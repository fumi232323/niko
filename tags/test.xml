<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて (testについての文書)</title><link>https://32imuf.com/</link><description></description><atom:link href="https://32imuf.com/tags/test.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2019 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Mon, 14 Oct 2019 10:33:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>mypy</title><link>https://32imuf.com/python-test/mypy/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/mypy/#id2" id="id6"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/mypy/#type-hints" id="id7"&gt;Type hints 覚書き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/mypy/#id3" id="id8"&gt;これ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/mypy/#id4" id="id9"&gt;Type hints はどこに必要か、どこに書くべきか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/mypy/#python3" id="id10"&gt;python3 ではこういうふうに書ける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/mypy/#tips" id="id11"&gt;Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/mypy/#id5" id="id12"&gt;情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/mypy/#id6"&gt;リファレンス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mypy.readthedocs.io/en/latest/index.html"&gt;https://mypy.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="type-hints"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/mypy/#id7"&gt;Type hints 覚書き&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html"&gt;Type hints cheat sheet (Python 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mypy.readthedocs.io/en/latest/cheat_sheet.html"&gt;Type hints cheat sheet (Python 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name"&gt;
&lt;col class="field-body"&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name" colspan="2"&gt;Union[int, str]:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;td&gt; &lt;/td&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;int&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; の意。とり得る型が全部わかっているなら、 &lt;tt class="docutils literal"&gt;Any&lt;/tt&gt; と書くより列記したほうがよい。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Optional[str]:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;str&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; の意&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Any:&lt;/th&gt;&lt;td class="field-body"&gt;なんでもいい&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;ignore:&lt;/th&gt;&lt;td class="field-body"&gt;mypy エラーを抑止&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/mypy/#id8"&gt;これ&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;Any は型チェックの敗北&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;ignore は敗北その2&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;実行時にわかること&lt;/tt&gt; は mypy にはわからない&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;mypy が解釈できないなら人間にも読みにくい&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/mypy/#id9"&gt;Type hints はどこに必要か、どこに書くべきか&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;引数と戻り値&lt;/li&gt;
&lt;li&gt;定数の初期化時 (空の場合のみ)&lt;/li&gt;
&lt;li&gt;変数の初期化時&lt;/li&gt;
&lt;li&gt;まわりのひとに、こうしてほしい (この型にしてほしい) って知らせたいとき&lt;/li&gt;
&lt;li&gt;ついていたらありがたいと (自分が) 思うところ&lt;/li&gt;
&lt;li&gt;どこという決まりはどうもないらしい (調べていて今のところ見つかっていない)&lt;/li&gt;
&lt;li&gt;とりあえずのところ、 mypy に怒られるところにつけていけば、そのうちわかるようになると思う&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/mypy/#id10"&gt;python3 ではこういうふうに書ける&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_79799e7022f34d2b90c18a799aa79a3d-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html&lt;/span&gt;
&lt;a name="rest_code_79799e7022f34d2b90c18a799aa79a3d-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_79799e7022f34d2b90c18a799aa79a3d-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_79799e7022f34d2b90c18a799aa79a3d-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_79799e7022f34d2b90c18a799aa79a3d-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_79799e7022f34d2b90c18a799aa79a3d-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_79799e7022f34d2b90c18a799aa79a3d-7"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;my_float&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/typing.html"&gt;typing --- 型ヒントのサポート&lt;/a&gt; ( &lt;cite&gt;バージョン 3.5 で追加&lt;/cite&gt; と言っている)&lt;/li&gt;
&lt;li&gt;python3 でも、type hints を書いたからと言って、言語側でチェックしてくれるわけではない。 &lt;cite&gt;static type checker&lt;/cite&gt; と言っているのが、 &lt;tt class="docutils literal"&gt;mypy&lt;/tt&gt; とかのこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tips"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/mypy/#id11"&gt;Tips&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PyCharm で、 &lt;tt class="docutils literal"&gt;関数名やら定数やら変数やらを範囲選択&lt;/tt&gt; -&amp;gt; &lt;tt class="docutils literal"&gt;Option + Enter&lt;/tt&gt; で type hints を自動追加できる&lt;ul&gt;
&lt;li&gt;ガイド: &lt;a class="reference external" href="https://pleiades.io/help/pycharm/type-hinting-in-product.html"&gt;PyCharmのヒント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;いくつか試してみたけど、半々くらいの確率でちゃんとなる (期待どおりの type hints が追加できる)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/mypy/#id12"&gt;情報&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.slideshare.net/t2y/python-typechecker-20180519"&gt;Python と型チェッカー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mypy-lang.blogspot.com/2018/05/"&gt;Mypy 0.600 Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mypy.readthedocs.io/en/latest/getting_started.html"&gt;Mypy: Getting started&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/"&gt;Static types in Python, oh my(py)!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pMgmKJyWKn8"&gt;Carl Meyer - Type-checked Python in the real world - PyCon 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484 -- Type Hints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>test</category><guid>https://32imuf.com/python-test/mypy/</guid><pubDate>Fri, 16 Nov 2018 15:00:00 GMT</pubDate></item><item><title>tox</title><link>https://32imuf.com/python-test/tox/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/tox/#tox" id="id7"&gt;tox とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/tox/#id2" id="id8"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/tox/#id3" id="id9"&gt;インストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/tox/#tox-ini" id="id10"&gt;tox.ini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/tox/#id4" id="id11"&gt;実行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/tox/#id5" id="id12"&gt;テスト用仮想環境の再作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/tox/#pytest-pythonpath" id="id13"&gt;pytest-pythonpath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/tox/#id6" id="id14"&gt;参考書籍, サイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="tox"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/tox/#id7"&gt;tox とは&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;これをテストに使いたいとは限らないのでもうテスト用に環境分けちゃおうぜ的なツール&lt;/cite&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;別々の virtualenv にそれぞれテスト環境を構築してくれる&lt;/li&gt;
&lt;li&gt;構築した virtualenv の中でテストを実行して、結果を表示してくれる&lt;/li&gt;
&lt;li&gt;テストツールや環境変数などをまとめておける&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; コマンドを実行するだけで、必要なテストを簡単に、まとめて実行できるようになる&lt;/li&gt;
&lt;li&gt;それぞれのテストは virtualenv によって分離されているため、他のテスト用設定が別のテストに影響を与えない&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/tox/#id8"&gt;リファレンス&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/config.html"&gt;https://tox.readthedocs.io/en/latest/config.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/tox/#id9"&gt;インストール&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_a3e2c0d194684375ac9ec48608fb8b3a-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install tox
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="tox-ini"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/tox/#id10"&gt;tox.ini&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;テスト実行環境の設定を記述するファイル&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# envlist: テスト環境の一覧。それぞれ別々の環境が用意される。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# py27: インストールされている python2.7 コマンドを探し出して、 Python2.7 の virtualenv を作成してくれる。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;envlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;flake8,typecheck,py27&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# setup.py がなくても実行可能にする。 setup.py がない場合は、 requirements.txt などで依存ライブラリを管理する。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-7"&gt;&lt;/a&gt;&lt;span class="na"&gt;skipsdist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;[pytest]&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-10"&gt;&lt;/a&gt;&lt;span class="na"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;--durations=10&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 実行対象を指定する。この場合は、 tests ディレクトリ配下。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-13"&gt;&lt;/a&gt;&lt;span class="na"&gt;testpaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;tests&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-15"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pytest-pythonpath の項を参照のこと。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-16"&gt;&lt;/a&gt;&lt;span class="na"&gt;python_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;apps tests&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://pytest-django.readthedocs.io/en/latest/managing_python_path.html#managing-the-python-path-explicitly&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-19"&gt;&lt;/a&gt;&lt;span class="na"&gt;django_find_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-20"&gt;&lt;/a&gt;&lt;span class="na"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;settings.test&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-22"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# [testenv]: テスト環境の設定。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-23"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# `[testenv:flake8]` のように環境の名前が指定されている場合は、そちらの指定が優先される。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 環境の名前に合う設定がない場合は、 `[testenv]` セクションの汎用的な設定が利用される。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-25"&gt;&lt;/a&gt;&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-27"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 環境にインストールするライブラリを指定する。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-28"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# この部分は pip に直接渡されるため、ライブラリではなく requirements.txt の指定も可能。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-29"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# `-r` と `requirements_dev.txt` の間にスペースを入れるとエラーになるので注意。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-30"&gt;&lt;/a&gt;&lt;span class="na"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;-rrequirements_dev.txt&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-32"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 環境変数を固定したい場合はここに書く&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-33"&gt;&lt;/a&gt;&lt;span class="na"&gt;setenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-34"&gt;&lt;/a&gt;&lt;span class="s"&gt;    PYTHONDONTWRITEBYTECODE = 1&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 実行するコマンド: py.test, 実行対象: tox コマンド実行時に引数として渡されたディレクトリ配下&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-37"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# `{posargs}` と書くと、 tox コマンド実行時に引数を渡すことができる&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-38"&gt;&lt;/a&gt;&lt;span class="na"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;py.test {posargs}&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-39"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-40"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# typecheck はこちらのテスト環境設定が優先される&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-41"&gt;&lt;/a&gt;&lt;span class="k"&gt;[testenv:typecheck]&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-42"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# typecheck 用の環境にインストールするライブラリを指定する。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-43"&gt;&lt;/a&gt;&lt;span class="na"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-44"&gt;&lt;/a&gt;&lt;span class="s"&gt;    mypy&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-45"&gt;&lt;/a&gt;&lt;span class="s"&gt;    mypy-extensions&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-46"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-47"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# typecheck 用の virtualenv は python3 で作る&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-48"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://tox.readthedocs.io/en/latest/config.html#conf-basepython&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-49"&gt;&lt;/a&gt;&lt;span class="na"&gt;basepython&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python3&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-50"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-51"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 実行するコマンド: mypy, 実行対象: app ディレクトリ配下&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-52"&gt;&lt;/a&gt;&lt;span class="na"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;mypy apps&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-53"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-54"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# flake8 はこちらのテスト環境設定が優先される&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-55"&gt;&lt;/a&gt;&lt;span class="k"&gt;[testenv:flake8]&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-56"&gt;&lt;/a&gt;&lt;span class="na"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-57"&gt;&lt;/a&gt;&lt;span class="s"&gt;    flake8&amp;gt;=3.6.0&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-58"&gt;&lt;/a&gt;&lt;span class="s"&gt;    flake8-blind-except&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-59"&gt;&lt;/a&gt;&lt;span class="s"&gt;    flake8-docstrings&amp;lt;1.1.0&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-60"&gt;&lt;/a&gt;&lt;span class="s"&gt;    flake8-import-order&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-61"&gt;&lt;/a&gt;&lt;span class="s"&gt;    pydocstyle&amp;lt;2.0.0&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-62"&gt;&lt;/a&gt;&lt;span class="s"&gt;    mccabe&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-63"&gt;&lt;/a&gt;&lt;span class="s"&gt;    radon&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-64"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-65"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE (よくわからない)&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-66"&gt;&lt;/a&gt;&lt;span class="na"&gt;setenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-67"&gt;&lt;/a&gt;&lt;span class="s"&gt;    PYTHONDONTWRITEBYTECODE = 1&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-68"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-69"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 実行するコマンド: flake8, 実行対象: app ディレクトリ配下&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-70"&gt;&lt;/a&gt;&lt;span class="na"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;flake8 apps&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-71"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-72"&gt;&lt;/a&gt;&lt;span class="k"&gt;[flake8]&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-73"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 実行対象外リスト。除外するディレクトリを列記する。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-74"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# `[testenv:flake8]` セクションに `app` 配下を実行対象とする、と書いてあるので、 `app` の中の `migrations,urls.py,manage.py,settings` 配下は対象外、の意。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-75"&gt;&lt;/a&gt;&lt;span class="na"&gt;exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;migrations,urls.py,manage.py,settings&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-76"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-77"&gt;&lt;/a&gt;&lt;span class="na"&gt;max-line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;120&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-78"&gt;&lt;/a&gt;&lt;span class="na"&gt;max-complexity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-79"&gt;&lt;/a&gt;&lt;span class="na"&gt;radon-max-cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-80"&gt;&lt;/a&gt;&lt;span class="na"&gt;import-order-style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;google&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-81"&gt;&lt;/a&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-82"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# flake8 警告を抑止するリスト。詳しくは shihmizukawa さんの scrapbox ↓ を参照のこと。&lt;/span&gt;
&lt;a name="rest_code_5cc52103eb4448aeacbd22e95f620c36-83"&gt;&lt;/a&gt;&lt;span class="na"&gt;extend-ignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;C901,D100,D101,D102,D103,D104,D105,D200,D202,D203,D204,D205,D208,D209,D210,D300,D301,D302,D400,D401,D402,D403,E741,I100,I101,R701&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/tox/#id11"&gt;実行&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;全部実行する。 tox.ini ファイルのあるディレクトリで実行する!!&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_a31543f4f4cd49a8be11821d7612be15-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tox
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt;&lt;/tt&gt; オプションを指定すると、指定した環境のテストのみが実行できる。&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_9b1b598f334e425eb1c6b176b7124b21-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pytest だけ&lt;/span&gt;
&lt;a name="rest_code_9b1b598f334e425eb1c6b176b7124b21-2"&gt;&lt;/a&gt;$ tox -e py27
&lt;a name="rest_code_9b1b598f334e425eb1c6b176b7124b21-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pytest だけ, tests/test_target 配下だけ&lt;/span&gt;
&lt;a name="rest_code_9b1b598f334e425eb1c6b176b7124b21-4"&gt;&lt;/a&gt;$ tox -e py27 tests/test_target
&lt;a name="rest_code_9b1b598f334e425eb1c6b176b7124b21-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# flake8 だけ&lt;/span&gt;
&lt;a name="rest_code_9b1b598f334e425eb1c6b176b7124b21-6"&gt;&lt;/a&gt;$ tox -e flake8
&lt;a name="rest_code_9b1b598f334e425eb1c6b176b7124b21-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# flake8 と typecheck&lt;/span&gt;
&lt;a name="rest_code_9b1b598f334e425eb1c6b176b7124b21-8"&gt;&lt;/a&gt;$ tox -e flake8, typecheck
&lt;/pre&gt;&lt;p&gt;tox ではなく、テストコマンドにオプションを渡したい場合は、 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--&lt;/span&gt;&lt;/tt&gt; のあとにオプションを指定する。&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_54b724523ba24b5ea6de627d01b3a510-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tox -e py27 -- -vv tests/test_target
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/tox/#id12"&gt;テスト用仮想環境の再作成&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_0a9a4f59d38f41be9b08ab652fdeaea8-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tox -r
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;tox.ini から参照している requirements.txt の中身を変更したあとは、明示的にテスト用仮想環境を再作成する必要がある。&lt;ul&gt;
&lt;li&gt;tox は、 テスト用の仮想環境を作成するときに、 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-rrequirements_dev.txt&lt;/span&gt;&lt;/tt&gt; 引数を内部で pip コマンドに渡して実行する。&lt;ul&gt;
&lt;li&gt;tox.ini の &lt;tt class="docutils literal"&gt;deps&lt;/tt&gt; の記述が更新された場合は、テスト用の仮想環境を再作成してくれる。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requirements_dev.txt&lt;/tt&gt; の中身だけ更新されて、&lt;tt class="docutils literal"&gt;deps&lt;/tt&gt; 自体の更新がない場合は、 仮想環境の再作成も pip コマンドの再実行も行わない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest-pythonpath"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/tox/#id13"&gt;pytest-pythonpath&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;テスト実行の前に、 pytests.ini に指定した検索パスを &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; に追加してくれるプラグイン&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使い方はこちら: &lt;a class="reference external" href="https://pypi.org/project/pytest-pythonpath/"&gt;https://pypi.org/project/pytest-pythonpath/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; はこちら: &lt;a class="reference external" href="https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONPATH"&gt;https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONPATH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/tox/#id14"&gt;参考書籍, サイト&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python プロフェッショナル プログラミング 第3版: P.249, 274&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://note.crohaco.net/2016/python-tox/"&gt;http://note.crohaco.net/2016/python-tox/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://note.crohaco.net/2016/python-pytest/"&gt;http://note.crohaco.net/2016/python-pytest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/config.html#conf-basepython"&gt;https://tox.readthedocs.io/en/latest/config.html#conf-basepython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/reference.html#configuration-options"&gt;https://docs.pytest.org/en/latest/reference.html#configuration-options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytest-pythonpath/"&gt;https://pypi.org/project/pytest-pythonpath/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE"&gt;https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONPATH"&gt;https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONPATH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>test</category><guid>https://32imuf.com/python-test/tox/</guid><pubDate>Fri, 16 Nov 2018 15:00:00 GMT</pubDate></item><item><title>Python テストのメモ</title><link>https://32imuf.com/python-test/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#pytest" id="id7"&gt;pytest&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#id2" id="id8"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#id3" id="id9"&gt;例外のテストはこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#parametrize" id="id10"&gt;parametrize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#pytest-fixture" id="id11"&gt;pytest.fixture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#temporary-directories-and-files" id="id12"&gt;Temporary directories and files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#pytest-django" id="id13"&gt;pytest-django&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#settings-fixture" id="id14"&gt;settings の fixture がある&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#testfixtures" id="id15"&gt;testfixtures&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#id4" id="id16"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#date-datetime-mock" id="id17"&gt;date と datetime を mock できる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#flake8-3-6" id="id18"&gt;flake8 3.6 対応がわかりやすい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#id5" id="id19"&gt;あれこれ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#a" id="id20"&gt;3a スタイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#testpyramid" id="id21"&gt;TestPyramid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python-test/note/#id6" id="id22"&gt;テストターゲットの取得方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="pytest"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id7"&gt;pytest&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id8"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/"&gt;https://docs.pytest.org/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id9"&gt;例外のテストはこれ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/reference.html#pytest-raises"&gt;https://docs.pytest.org/en/latest/reference.html#pytest-raises&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;with pytest.raises(RuntimeError) as excinfo:&lt;/tt&gt; の &lt;tt class="docutils literal"&gt;excinfo&lt;/tt&gt; には、 &lt;a class="reference external" href="https://docs.pytest.org/en/latest/reference.html#exceptioninfo"&gt;ExceptionInfo&lt;/a&gt; が入ってくる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;例外のインスタンスは、 &lt;tt class="docutils literal"&gt;value&lt;/tt&gt; フィールドに入っている&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8e835ef233264af7839c2061d21f2fbb-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListFileError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8e835ef233264af7839c2061d21f2fbb-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'201803'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8e835ef233264af7839c2061d21f2fbb-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_8e835ef233264af7839c2061d21f2fbb-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# assert&lt;/span&gt;
&lt;a name="rest_code_8e835ef233264af7839c2061d21f2fbb-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="parametrize"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id10"&gt;parametrize&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;unittest.TestCase&lt;/tt&gt; を継承したテストクラス内では、 &lt;tt class="docutils literal"&gt;@pytest.mark.parametrize&lt;/tt&gt; を使えない。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest-fixture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id11"&gt;pytest.fixture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/fixture.html"&gt;https://docs.pytest.org/en/latest/fixture.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Test functions can receive fixture objects by naming them as an input argument. For each argument name, a fixture function with that name provides the fixture object. Fixture functions are registered by marking them with @pytest.fixture.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="temporary-directories-and-files"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id12"&gt;Temporary directories and files&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://doc.pytest.org/en/latest/tmpdir.html#the-tmpdir-fixture"&gt;http://doc.pytest.org/en/latest/tmpdir.html#the-tmpdir-fixture&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;一時ディレクトリやファイルの fixture がある&lt;/li&gt;
&lt;li&gt;こんな感じで使う、便利&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9aa3959ec83340e9a60a6d6b3ac7bc75-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# settings fixture 経由で storage の path を pytest の tempdir fixture の path に置き換える&lt;/span&gt;
&lt;a name="rest_code_9aa3959ec83340e9a60a6d6b3ac7bc75-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmpdir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- settings fixture と tmpdir fixture を受け取る&lt;/span&gt;
&lt;a name="rest_code_9aa3959ec83340e9a60a6d6b3ac7bc75-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmpdir&lt;/span&gt;               &lt;span class="c1"&gt;# ダウンロードファイル出力先を置換&lt;/span&gt;
&lt;a name="rest_code_9aa3959ec83340e9a60a6d6b3ac7bc75-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_9aa3959ec83340e9a60a6d6b3ac7bc75-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;a name="rest_code_9aa3959ec83340e9a60a6d6b3ac7bc75-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# これで、ファイルのパスがとれる&lt;/span&gt;
&lt;a name="rest_code_9aa3959ec83340e9a60a6d6b3ac7bc75-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmpdir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# &amp;lt;- output_file_path はファイル名とか&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest-django"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id13"&gt;pytest-django&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pytest-django.readthedocs.io/en/latest/index.html"&gt;https://pytest-django.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pytest-django is a plugin for pytest that provides a set of useful tools for testing Django applications and projects.&lt;/li&gt;
&lt;li&gt;Django アプリとプロジェクトのテストに便利な pytest のプラグイン&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="settings-fixture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id14"&gt;settings の fixture がある&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pytest-django.readthedocs.io/en/latest/helpers.html#settings"&gt;https://pytest-django.readthedocs.io/en/latest/helpers.html#settings&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="testfixtures"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id15"&gt;testfixtures&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id16"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://testfixtures.readthedocs.io/en/latest/index.html"&gt;https://testfixtures.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="date-datetime-mock"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id17"&gt;date と datetime を mock できる&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://testfixtures.readthedocs.io/en/latest/datetime.html"&gt;https://testfixtures.readthedocs.io/en/latest/datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://testfixtures.readthedocs.io/en/latest/api.html#testfixtures.test_date"&gt;https://testfixtures.readthedocs.io/en/latest/api.html#testfixtures.test_date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://testfixtures.readthedocs.io/en/latest/api.html#testfixtures.test_datetime"&gt;https://testfixtures.readthedocs.io/en/latest/api.html#testfixtures.test_datetime&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;test_datetime&lt;/tt&gt; は、 &lt;tt class="docutils literal"&gt;datetime.datetime.now()&lt;/tt&gt; にしか効果を及ぼさないので注意!!&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;datetime.datetime.today()&lt;/tt&gt; には何の効果もない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="flake8-3-6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id18"&gt;flake8 3.6 対応がわかりやすい&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://scrapbox.io/shimizukawa/flake8-3.6.0_%E3%81%AB%E6%9B%B4%E6%96%B0%E3%81%97%E3%81%9F%E3%82%89%E8%AD%A6%E5%91%8A%E3%81%9F%E3%81%8F%E3%81%95%E3%82%93%E5%87%BA%E3%81%A6%E3%81%8D%E3%81%9F"&gt;https://scrapbox.io/shimizukawa/flake8-3.6.0_%E3%81%AB%E6%9B%B4%E6%96%B0%E3%81%97%E3%81%9F%E3%82%89%E8%AD%A6%E5%91%8A%E3%81%9F%E3%81%8F%E3%81%95%E3%82%93%E5%87%BA%E3%81%A6%E3%81%8D%E3%81%9F&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id19"&gt;あれこれ&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="a"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id20"&gt;3a スタイル&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_f9565aa9e0b14519858a4180e19c5c20-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# arrange&lt;/span&gt;
&lt;a name="rest_code_f9565aa9e0b14519858a4180e19c5c20-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# act&lt;/span&gt;
&lt;a name="rest_code_f9565aa9e0b14519858a4180e19c5c20-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# assert&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://wiki.c2.com/?arrangeactassert"&gt;http://wiki.c2.com/?arrangeactassert&lt;/a&gt; (つながらない)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testpyramid"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id21"&gt;TestPyramid&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;UI 寄りのテストは、コストと実行時間が長くなってしまうので、いきなり書かない方がいい&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinfowler.com/bliki/TestPyramid.html"&gt;https://martinfowler.com/bliki/TestPyramid.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python-test/note/#id22"&gt;テストターゲットの取得方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pelican.aodag.jp/xiao-guo-de-naunittest-mataha-callfutnomi-mi.html"&gt;http://pelican.aodag.jp/xiao-guo-de-naunittest-mataha-callfutnomi-mi.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>test</category><guid>https://32imuf.com/python-test/note/</guid><pubDate>Wed, 07 Nov 2018 15:00:00 GMT</pubDate></item></channel></rss>