<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて</title><link>https://32imuf.com/</link><description>のてのて</description><atom:link href="https://32imuf.com/atom.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2020 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Sat, 20 Jun 2020 16:04:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>React チュートリアル</title><link>https://32imuf.com/javascript/react/tutorial/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#id2" id="id4"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#id3" id="id5"&gt;ふむ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#memo" id="id6"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id4"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/tutorial/tutorial.html"&gt;https://ja.reactjs.org/tutorial/tutorial.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hello-world.html"&gt;https://ja.reactjs.org/docs/hello-world.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id5"&gt;ふむ&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;インタラクティブな三目並べゲーム (tic-tac-toe) を作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Create React App&lt;/code&gt;: &lt;a class="reference external" href="https://ja.reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;https://ja.reactjs.org/docs/create-a-new-react-app.html#create-react-app&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;フロントエンドのビルドパイプラインを構築する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バックエンドのロジックやデータベース接続は扱わない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部では Babel と webpack を利用している&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンポーネントは &lt;code class="docutils literal"&gt;props&lt;/code&gt; （“&lt;code class="docutils literal"&gt;properties&lt;/code&gt;” の略）と呼ばれるパラメータを受け取り、&lt;code class="docutils literal"&gt;render&lt;/code&gt; メソッドを通じて、表示するビューの階層構造を返します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;this.state&lt;/code&gt; はそれが定義されているコンポーネント内でプライベートと見なすべきものです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript のクラスでは、サブクラスのコンストラクタを定義する際は常に &lt;code class="docutils literal"&gt;super&lt;/code&gt; を呼ぶ必要があります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;constructor&lt;/code&gt; を持つ React のクラスコンポーネントでは、すべてコンストラクタを &lt;code class="docutils literal"&gt;super(props)&lt;/code&gt; の呼び出しから始めるべきです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;state&lt;/code&gt; を親コンポーネントにリフトアップ (lift up) することは React コンポーネントのリファクタリングでよくあることです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では、イベントを表す &lt;code class="docutils literal"&gt;props&lt;/code&gt; には &lt;code class="docutils literal"&gt;on[Event]&lt;/code&gt; という名前、イベントを処理するメソッドには &lt;code class="docutils literal"&gt;handle[Event]&lt;/code&gt; という名前を付けるのが慣習となっています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React における関数コンポーネントとは、&lt;code class="docutils literal"&gt;render&lt;/code&gt; メソッドだけを有して自分の &lt;code class="docutils literal"&gt;state&lt;/code&gt; を持たないコンポーネントを、よりシンプルに書くための方法です。React.Component を継承するクラスを定義する代わりに、&lt;code class="docutils literal"&gt;props&lt;/code&gt; を入力として受け取り表示すべき内容を返す関数を定義します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リストには &lt;code class="docutils literal"&gt;key&lt;/code&gt; が必要です&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「実を言うと class コンポーネントはもうあんまり使わないから state も使わないんだよなぁ。関数コンポーネントで書いて、状態はフックで管理するのが今どきのやり方らしい。」という情報を得た&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id6"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://nodejs.org/en/&lt;/span&gt;
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Node.js のバージョンを確認する&lt;/span&gt;
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-3"&gt;&lt;/a&gt;$ node --version
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Create React App で新しいプロジェクトを作成する&lt;/span&gt;
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npx: npm 5.2 から利用できるパッケージランナーツール&lt;/span&gt;
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-7"&gt;&lt;/a&gt;$ npx create-react-app tic-tac-toe
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリを起動&lt;/span&gt;
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-10"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; tic-tac-toe
&lt;a name="rest_code_1cbf08cf06e549e5aa4dac020ae3c389-11"&gt;&lt;/a&gt;$ npm start
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/tutorial/</guid><pubDate>Sat, 20 Jun 2020 15:00:00 GMT</pubDate></item><item><title>React そのに</title><link>https://32imuf.com/javascript/react/part2/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#id2" id="id4"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#id3" id="id5"&gt;ほむほむ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#memo" id="id6"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id4"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://reactjs.org/"&gt;https://reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/"&gt;https://ja.reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id5"&gt;ほむほむ&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;react-router: Routing 機能を提供するサードパーティパッケージ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;semantic-ui-react: UIツールキット Semantic UI に実装された UI に関する機能を React Component として利用できるようにしたもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios: Promise をベースとした HTTP クライアント。サーバーサイドアプリケーションにリクエストを送信する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RESTful API のクライアントとしてよく利用する機能や設定があらかじめ用意されている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;.tsx&lt;/code&gt;: TypeScriptで記述し、かつJSXを利用するもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;.ts&lt;/code&gt;: TypeScriptでJSXを利用しないもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小さい中身も Component だし、まわりの外側も Component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;props として渡せるのは値だけではない。オブジェクトや関数などあらゆるものを受け渡せる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では、データは親Component から子Component へ流れるというデータフローの原則がある。親子関係にない Component間で情報を直接やりとりすることはできない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;そういうときは、 親Component を経由して props で受け渡す&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;スピナー: &lt;code class="docutils literal"&gt;import {Dimmer, Loader} from &lt;span class="pre"&gt;'semantic-ui-react'&lt;/span&gt;&lt;/code&gt; とか&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component のアンマウントと HTTPリクエストのキャンセル: Axios の場合、 CancelToken のしくみを利用して処理の中断を実現できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id6"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# プロジェクト作成&lt;/span&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-2"&gt;&lt;/a&gt;$ mkdir react-sample-app
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-3"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; react-sample-app
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-4"&gt;&lt;/a&gt;$ npm init -y
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 依存パッケージのインストール&lt;/span&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-7"&gt;&lt;/a&gt;$ npm i react@ react-dom@
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-8"&gt;&lt;/a&gt;$ npm i react-router@ react-router-dom@
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-9"&gt;&lt;/a&gt;$ npm i semantic-ui-react@
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-10"&gt;&lt;/a&gt;$ npm i axios@
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 依存パッケージのインストール (開発環境用)&lt;/span&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-13"&gt;&lt;/a&gt;$ npm i -D @types/react@ @types/react-dom@
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-14"&gt;&lt;/a&gt;$ npm i -D @types/react-router@ @types/react-router-dom@
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-15"&gt;&lt;/a&gt;$ npm i -D typescript@ ts-loader@
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-16"&gt;&lt;/a&gt;$ npm i -D webpack webpack-cli webpack-dev-server
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# tslint (2019年から非推奨) のインストール&lt;/span&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-19"&gt;&lt;/a&gt;$ npm i -D tslint
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-20"&gt;&lt;/a&gt;$ npm i tslint-config-typings
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# eslint のインストール&lt;/span&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-22"&gt;&lt;/a&gt;$ npm i -D eslint
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# しばしアプリを実装...&lt;/span&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリケーションの起動&lt;/span&gt;
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-27"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; react-sample-app
&lt;a name="rest_code_0e5e0075250f45419124732d2430e021-28"&gt;&lt;/a&gt;$ npm run start
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/part2/</guid><pubDate>Mon, 15 Jun 2020 15:00:00 GMT</pubDate></item><item><title>React そのいち</title><link>https://32imuf.com/javascript/react/part1/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#id2" id="id6"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#id3" id="id7"&gt;これが大事&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#component" id="id8"&gt;Component の構成要素&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#props-state" id="id9"&gt;props と state&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#id4" id="id10"&gt;Component ライフサイクル&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#id5" id="id11"&gt;その他&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id6"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://reactjs.org/"&gt;https://reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/"&gt;https://ja.reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id7"&gt;これが大事&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;props と state の役割と利用方法&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component ライフサイクルの管理&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="component"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id8"&gt;Component の構成要素&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;constructor()&lt;/code&gt;: ECMAScript 2015 から利用できるようになったクラスのコンストラクタ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React の Component としては主に state の初期状態をセットするのに利用する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;state: Component のレンダリングに結びつく値を管理する状態&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;handleInputChange()&lt;/code&gt; ※名前は任意: ユーザの操作を Component の state に反映させる役割&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentDidMount()&lt;/code&gt;: Component ライフサイクルに関するメソッド&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;render()&lt;/code&gt;: VirtualDOM（VDOM）のレンダリングに関する処理を行うメソッド。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reactは、標準では HTML のレンダリングのために JSX を使用する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Preview も Component のひとつ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class Component: React.Component を継承して定義する Component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functional Component: 関数として定義される Component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React は Component を入れ子にしてアプリケーションを組み立てます&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="props-state"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id9"&gt;props と state&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;props:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Component に対する入力、親 Component から子 Component に渡される(降ろされる) もの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;props は読み込み専用、変更してはいけない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Component 自体が持つ「状態」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ユーザが入力中のテキストや、チェックボックスがチェックされているかどうかの判定、データの読み込みが完了したかどうかの情報などが「状態」に該当する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;props とは異なり、 state は変更可能。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では state を変更することで、外部データやユーザの入力内容を Component に反映して行く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state を変更する場合は、必ず &lt;code class="docutils literal"&gt;this.setState()&lt;/code&gt; を利用する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では、classのプロパティを自由に追加できることになっている。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プロパティとして管理するか state にするかは、 &lt;code class="docutils literal"&gt;render()&lt;/code&gt; の中で利用するかどうかで判断する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;render()&lt;/code&gt; の中で利用する場合: state  &amp;lt;= fumi23: 外に出ていくやつ?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;そうでない場合: はプロパティとして管理する &amp;lt;= fumi23: 中だけで使うやつ?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id10"&gt;Component ライフサイクル&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ライフサイクル: 「 Component がマウントされたとき」や「 Component が props (読み取り専用のやつ) を受け取るとき」といった Component の状態の推移のこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ライフサイクルのわかりやすい図: &lt;a class="reference external" href="https://reactjs.org/docs/react-component.html#the-component-lifecycle"&gt;https://reactjs.org/docs/react-component.html#the-component-lifecycle&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentDidMount()&lt;/code&gt;: Component がマウントされたときに一度だけ実行される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DOM が存在していることを前提とする処理を記述する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bootstrap のような CSSフレームワークを利用する場合にしばしば必要となるHTML要素に対する初期化処理はここでやると良い&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;イベントリスナーの定義&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外部から HTTP リクエストでデータを取得する処理の呼び出し&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentWillUnmount()&lt;/code&gt;: Component がアンマウントされるときに実行される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;アンマウントはたとえば SPA においてページ遷移が発生した際に、レンダリング中の Component がレンダリング対象から外れた場合に発生する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;タイマーの解除&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非同期通信のキャンセル処理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;イベントリスナーの解除&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentWillReceiveProps()&lt;/code&gt;: Component が props を受け取るとき&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;マウントされた Component が新しい props を受け取るときに実行される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「新しく受け取る」 props を引数に取る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;現在の props の内容と、新しく受け取る props の内容を比較して処理を分岐できる&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_da3bc7dd76a046978190d053fb7017a8-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 例&lt;/span&gt;
&lt;a name="rest_code_da3bc7dd76a046978190d053fb7017a8-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;componentWillReceiveProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_da3bc7dd76a046978190d053fb7017a8-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_da3bc7dd76a046978190d053fb7017a8-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;//props.hogeが変更された場合の処理&lt;/span&gt;
&lt;a name="rest_code_da3bc7dd76a046978190d053fb7017a8-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_da3bc7dd76a046978190d053fb7017a8-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentDidUpdate()&lt;/code&gt;: Component がアップデートされたとき (props や state が変化した場合) に実行される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;変更前の props と state を引数に取る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentWillReceiveProps()&lt;/code&gt; と同様、変更前と変更後の値を比較して処理を分岐できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初回マウント時には実行されない (初回は &lt;code class="docutils literal"&gt;componentDidMount()&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;shouldComponentUpdate()&lt;/code&gt;: Component のパフォーマンス改善に&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;更新後の props と 更新後の state を引数に取る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React の Component では、 props や state が変更された場合、再レンダリング = &lt;code class="docutils literal"&gt;render()&lt;/code&gt; の再実行が発生する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;shouldComponentUpdate()&lt;/code&gt; を利用すると、再レンダリングの有無を制御できます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;shouldComponentUpdate()&lt;/code&gt; が true を戻した場合は再レンダリングが行われ、 false を戻した場合は再レンダリングが行われない。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不必要な再レンダリングを抑制できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentDidCatch()&lt;/code&gt;: 子（あるいは子以下の） Component で発生した例外を catch した場合に実行される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Componentのいずれかの場所で例外が発生した場合にログを送信したり、エラーメッセージをレンダリングするといった共通処理を行うのに適したメソッド。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;公式例: &lt;a class="reference external" href="https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html"&gt;https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id11"&gt;その他&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;スターターキット (ボイラテンプレートツール)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create-react-app&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;react-starter-kit&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;react-firebase-starter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フルスタックフレームワークではないので、本格的なアプリケーションを実装する際はサードパーティパッケージと組み合わせて利用する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/enaqx/awesome-react"&gt;https://github.com/enaqx/awesome-react&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/brillout/awesome-react-components"&gt;https://github.com/brillout/awesome-react-components&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/part1/</guid><pubDate>Sat, 23 May 2020 15:00:00 GMT</pubDate></item><item><title>Firebase</title><link>https://32imuf.com/javascript/firebase/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#id2" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#note" id="id4"&gt;note&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#memo" id="id5"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://firebase.google.com/docs"&gt;https://firebase.google.com/docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id4"&gt;note&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Firebase: Google社が提供するモバイルプラットフォーム。iOS、Android、Webなどでアプリケーションを構築し、モバイルサービスを提供する際に必要な機能を備えている。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Cloud Functions: Firebase の機能のイベントや HTTPSリクエストによるトリガに応じて関数を実行する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.js 環境&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Realtime Database: NoSQL データベース。 JSON データを保存・同期する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Hosting: SPAを簡単に公開できる。 CDN や HTTPS にも対応している。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Authentication: ユーザ認証システムを簡単に構築できる。ログインプロバイダとして、メールアドレス、電話認証、Google、Twitter、Facebook、GitHubおよび匿名がある。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://console.firebase.google.com"&gt;https://console.firebase.google.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Express: Express パッケージのルーティングを使ってAPIのエンドポイントを実装する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cors: cors パッケージを使ってクロスドメイン通信の許可をする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サーバーに Firebase Admin SDK を追加する: &lt;a class="reference external" href="https://firebase.google.com/docs/admin/setup"&gt;https://firebase.google.com/docs/admin/setup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id5"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase CLI のインストール&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-2"&gt;&lt;/a&gt;$ sudo npm i -g firebase-tools
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Admin SDK のインストール&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-4"&gt;&lt;/a&gt;$ npm install firebase-admin --save
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Express, cors のインストール&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-6"&gt;&lt;/a&gt;$ npm i express cors
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase へログイン&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-9"&gt;&lt;/a&gt;$ firebase login
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase からログアウト&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-11"&gt;&lt;/a&gt;$ firebase &lt;span class="nb"&gt;logout&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Hosting の設定&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-14"&gt;&lt;/a&gt;$ firebase init hosting
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-15"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Functions の設定&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-16"&gt;&lt;/a&gt;$ firebase init functions
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 作成したAPIのテスト&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 事前に環境変数 GOOGLE_APPLICATION_CREDENTIALS に、サービス アカウント キーが含まれる JSON ファイルのファイルパスを設定する。&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Path は絶対パスでないといけない模様&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-21"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/path/to/fumi23-chat-app-firebase-adminsdk-e09li-560aa95e27.json"&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-23"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# テスト用サーバーの起動&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-24"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;firebase.json のあるディレクトリ&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-25"&gt;&lt;/a&gt;$ firebase serve --only functions
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# チャンネル作成&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-27"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# http://localhost:5000/fumi23-chat-app/us-central1/v1&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-28"&gt;&lt;/a&gt;$ curl -H &lt;span class="s1"&gt;'Content-Type:application/json'&lt;/span&gt; -d &lt;span class="s1"&gt;'{"cname": "general"}'&lt;/span&gt; http://localhost:5000/fumi23-chat-app/us-central1/v1/channels
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-29"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# チャンネル一覧&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-30"&gt;&lt;/a&gt;$ curl http://localhost:5000/fumi23-chat-app/uscentral1/v1/channels
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-32"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 作成した Functions を公開する&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-33"&gt;&lt;/a&gt;$ firebase deploy --only functions
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-34"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 初期状態に戻す&lt;/span&gt;
&lt;a name="rest_code_5e9954ae5ed7438abf290fc6b13c272c-35"&gt;&lt;/a&gt;$ curl -H &lt;span class="s1"&gt;'ContentType:application/json'&lt;/span&gt; -d &lt;span class="s1"&gt;'{}'&lt;/span&gt; https://us-central1-fumi23-chat-app.cloudfunctions.net/v1/reset
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/firebase/</guid><pubDate>Tue, 12 May 2020 15:00:00 GMT</pubDate></item><item><title>JavaScript</title><link>https://32imuf.com/javascript/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#id2" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#note" id="id4"&gt;note&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#ecmascript2015" id="id5"&gt;ECMAScript2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#typescript" id="id6"&gt;TypeScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#memo" id="id7"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#vscode-memo" id="id8"&gt;VSCode memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://developer.mozilla.org/ja/docs/Web/JavaScript"&gt;https://developer.mozilla.org/ja/docs/Web/JavaScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.typescriptlang.org/docs/home.html"&gt;https://www.typescriptlang.org/docs/home.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.npmjs.com/"&gt;https://docs.npmjs.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://reactjs.org/docs/getting-started.html"&gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id4"&gt;note&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;TypeScript は言語 (JavaScript のスーパーセット)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vue, React, Angular はフレームワーク&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は React を使ったフレームワーク。 Nuxt.js は Vue を使ったフレームワーク。 Next のほうが先輩。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js はサーバーサイドで動く JavaScript 環境&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm (Node Package Manager): Node.js で作られたパッケージを管理するためのツール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;npm を使うとパッケージの共有やインストール、アップデートを簡単にできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package.json: ローカル開発環境にインストールする npm パッケージを管理するのに利用する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;package.json を利用すると npm パッケージの依存関係やバージョン管理、開発環境のセットアップが簡単にできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package.json から npm i できる、package.json を更新したら npm up でパッケージ更新もできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package-lock.json: npm インストールしたパッケージ名や明確なバージョン情報が記載される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;webpack: フロントエンドビルドツール, モジュールバンドラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;複数の JavaScript ファイルや CSS などあらゆる static ファイルの依存関係を解決し１つのファイルにまとめてくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リクエスト数を減らせるなどのメリットがある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Entry: webpack がモジュールの依存関係を解析するためのエントリポイント、複数指定することもできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Output: バンドルされたファイルの出力先、絶対パスを指定する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loader: JavaScript 以外の static ファイルも同時にバンドルできる、トランスパイルできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: いろいろ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Babel: トランスコンパイラー (ECMAScript2015 以降のコードを ECMAScript5 に変換する)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;トランスパイル: あるプログラミング言語で書かれたコードをほかのプログラミング言語のコードに変換すること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;extract-text-webpack-plugin: スタイルシートを CSS ファイルに出力する Plugin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ESLint: Linter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;require&lt;/code&gt;: CommonJS の仕様、Node.js 環境で動作する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;import&lt;/code&gt;:  ES2015 (ES6) の仕様、古いブラウザでは動かない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="ecmascript2015"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id5"&gt;ECMAScript2015&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript は ECMA International という標準化団体が仕様を策定している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ECMAScript2015 == ECMAScript6&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;2015年に策定された6番目の仕様&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;変数宣言: &lt;code class="docutils literal"&gt;let&lt;/code&gt; と &lt;code class="docutils literal"&gt;const&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブロックスコープ, テンプレートリテラル, デフォルト引数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;アロー関数: アロー関数の場合は定義した場所の &lt;code class="docutils literal"&gt;this&lt;/code&gt; が参照される&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_9622113c76754cf3afd9cf5dce2a0649-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// アロー関数その１&lt;/span&gt;
&lt;a name="rest_code_9622113c76754cf3afd9cf5dce2a0649-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_9622113c76754cf3afd9cf5dce2a0649-3"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;returna&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_9622113c76754cf3afd9cf5dce2a0649-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code javascript"&gt;&lt;a name="rest_code_f7971ae4cfd24981aa2ae2356f097d34-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// アロー関数その２&lt;/span&gt;
&lt;a name="rest_code_f7971ae4cfd24981aa2ae2356f097d34-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;class 定義, class の継承&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Promise: 非同期処理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;モジュール: モジュールとしてファイル分割できる。 &lt;code class="docutils literal"&gt;export&lt;/code&gt; 文。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="typescript"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id6"&gt;TypeScript&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript: JavaScript のスーパーセット, 上位互換&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Microsoft によって開発された OSS の JavaScript ベースのプログラミング言語&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静的型付け, クラスベースのオブジェクト指向&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tsc: TypeScript 付属のコンパイラツール, ECMAScript5 へ変換できるよ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript の拡張子は &lt;code class="docutils literal"&gt;.ts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型注釈（type annotation）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;型推論できるところは型推論に任せる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;?&lt;/code&gt;: オプショナル&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コールバック関数の型注釈と、アロー関数の定義が紛らわしい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型変換&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;JSX を使用することが確定している場合には、「変数 as 変換後の型」を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;interface&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;アクセス修飾子 (&lt;code class="docutils literal"&gt;public&lt;/code&gt;、&lt;code class="docutils literal"&gt;private&lt;/code&gt;、&lt;code class="docutils literal"&gt;protected&lt;/code&gt;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;デフォルトは &lt;code class="docutils literal"&gt;public&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ジェネリクス&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;: &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// こうとか&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-6"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"taro"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// こうとか&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-8"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型定義ファイル: 型の定義を別ファイルにまとめておける&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;拡張子は &lt;code class="docutils literal"&gt;.d.ts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デコレータ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;クラス、メソッド、アクセサ、プロパティやパラメータに付与できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 使う時&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;@sealed&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-4"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;greeting&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-7"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-8"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;greet() {&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Hello, "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-10"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// デコレーターの実体&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-14"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sealed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-15"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-16"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSX: JavaScript 中に埋め込み可能な XML ライクな文法&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// React.createElement() は DOM を作成する関数&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"div"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"class"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nickname"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;nickname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// JSXではこのように書けるとのこと&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-7"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-8"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nickname"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id7"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json ファイルが生成される&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-2"&gt;&lt;/a&gt;$ npm init -y
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# パッケージをインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# node_modules ディレクトリに指定したパッケージがインストールされる&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json &amp;gt; dependencies/devDependencies にインストールしたパッケージとバージョンが追記される&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-7"&gt;&lt;/a&gt;$ npm i react react-dom
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -g : グローバルインストール (すべてのプロジェクトで利用できる)&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-9"&gt;&lt;/a&gt;$ npm i -g react react-dom
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ビルドなど開発時だけに必要なパッケージは -D を利用してインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-11"&gt;&lt;/a&gt;npm i -D webpack webpack-cli
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アンインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-13"&gt;&lt;/a&gt;$ npm un react react-dom
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -D の省略しない形は --save-dev&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-15"&gt;&lt;/a&gt;$ npm uninstall babel-preset-env --save-dev
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# webpack をインストール, CLI もインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-18"&gt;&lt;/a&gt;$ npm i -D webpack webpack-cli
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# webpack でバンドラする&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npx: ローカルにインストールした npm パッケージをパッケージ名を指定して実行できる&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# --mode development: 開発モード. ビルドが速く watch がサポートされている&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-22"&gt;&lt;/a&gt;$ npx webpack --mode development
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npm scripts コマンドのエイリアスが作れる&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-25"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json の "scripts" フィールドにスクリプトを書いておく&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-26"&gt;&lt;/a&gt;$ npm run build:dev
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-28"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 今はこの書き方&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-29"&gt;&lt;/a&gt;$ npm i -D babel-loader style-loader css-loader @babel/core @babel/preset-env @babel/preset-react
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# スタイルシートを CSS ファイルに出力する Plugin をインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-32"&gt;&lt;/a&gt;$ npm i -D extract-text-webpack-plugin@4.0.0beta.0
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-34"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 開発用サーバーを立てる&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-35"&gt;&lt;/a&gt;$ npm i -D webpack-dev-server@3.1.1
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 開発用サーバーを起動&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-37"&gt;&lt;/a&gt;$ npx webpack-dev-server --mode development --hot --inline --open
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-38"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npm scripts 作っておくと、こう&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-39"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Ctrl + C で停止&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-40"&gt;&lt;/a&gt;$ npm start
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-41"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-42"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ESLint をインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-43"&gt;&lt;/a&gt;$ npm i -D eslint@4.19.1
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-44"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-45"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# TypeScript をインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-46"&gt;&lt;/a&gt;$ sudo npm i -g typescript
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-47"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-48"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# tsc コマンドで ECMAScript5 に変換&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-49"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -t: 変換する対象バージョン&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-50"&gt;&lt;/a&gt;$ tsc -t ES5 hello.ts
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="vscode-memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id8"&gt;VSCode memo&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;F12&lt;/code&gt;: 定義へ移動&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;option&lt;/code&gt; + &lt;code class="docutils literal"&gt;F12&lt;/code&gt;: Peek ウィンドウ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debugger for Chrome: VSCode の Chrome 拡張機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VSCode上でブレークポイントを使ってデバッグできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React Developer Tools: Chrome 拡張機能&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/note/</guid><pubDate>Tue, 05 May 2020 15:00:00 GMT</pubDate></item><item><title>docker-compose で動かしている Django アプリケーションを PyCharm で Dubug する</title><link>https://32imuf.com/pycharm/debug-django-app-running-on-docker/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/pycharm/debug-django-app-running-on-docker/#id2" id="id5"&gt;ガイド&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/pycharm/debug-django-app-running-on-docker/#id3" id="id6"&gt;実行/デバッグ構成を作成する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/pycharm/debug-django-app-running-on-docker/#id4" id="id7"&gt;デバッグする&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/pycharm/debug-django-app-running-on-docker/#id5"&gt;ガイド&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://pleiades.io/help/pycharm/run-debug-configuration-django-server.html"&gt;実行/デバッグ構成: Django サーバー&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/pycharm/debug-django-app-running-on-docker/#id6"&gt;実行/デバッグ構成を作成する&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Run -&amp;gt; Edit Configurations...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/pycharm/debug-django-app-running-on-docker/RunEditCofigurations.png" src="https://32imuf.com/images/pycharm/debug-django-app-running-on-docker/RunEditCofigurations.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run/Debug Configurations -&amp;gt; &lt;code class="docutils literal"&gt;+&lt;/code&gt; ボタン -&amp;gt; Django server&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/pycharm/debug-django-app-running-on-docker/ChooseDjangoServer.png" src="https://32imuf.com/images/pycharm/debug-django-app-running-on-docker/ChooseDjangoServer.png"&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ずっと &lt;code class="docutils literal"&gt;Docker&lt;/code&gt; のほうを選ぶんだろうと思っていたけど、違ってた&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定値を書く&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/pycharm/debug-django-app-running-on-docker/RunDebugConfigurations.png" src="https://32imuf.com/images/pycharm/debug-django-app-running-on-docker/RunDebugConfigurations.png"&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Name: 任意の名前&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Host: &lt;code class="docutils literal"&gt;0.0.0.0&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;127.0.0.1&lt;/code&gt; とか &lt;code class="docutils literal"&gt;localhost&lt;/code&gt; だと動かなかった&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;docker-compose.yml 内でこうしているからかもしれない&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_d181259aa3de4990a3dd4385acb46f55-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d181259aa3de4990a3dd4385acb46f55-2"&gt;&lt;/a&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"python"&lt;/span&gt;
&lt;a name="rest_code_d181259aa3de4990a3dd4385acb46f55-3"&gt;&lt;/a&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"fufufu/manage.py"&lt;/span&gt;
&lt;a name="rest_code_d181259aa3de4990a3dd4385acb46f55-4"&gt;&lt;/a&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"runserver"&lt;/span&gt;
&lt;a name="rest_code_d181259aa3de4990a3dd4385acb46f55-5"&gt;&lt;/a&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"0.0.0.0:8000"&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Port: &lt;code class="docutils literal"&gt;8000&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;たぶん docker-compose.yml 内でこうしているからだろう&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_f131f527ebd14e8195bf9e909d1ebc01-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f131f527ebd14e8195bf9e909d1ebc01-2"&gt;&lt;/a&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"8000:8000"&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Project: デバッグ対象のプロジェクトを選択する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment variables: デフォルトに加えて &lt;code class="docutils literal"&gt;;DJANGO_SETTINGS_MODULE=fufufu.settings&lt;/code&gt; を追記&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;わたしの場合は docker-compose.yml 内でこうしているので、そこからの相対位置を指定する必要があったのだろう (このプロジェクトの settings はコンテナ内だと &lt;code class="docutils literal"&gt;/var/www/fufufu/fufufu&lt;/code&gt; 配下にある)&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_5d3dcdc199a84d79a94562035e3ea234-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;working_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"/var/www/fufufu"&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python interpreter: デバッグ対象のプロジェクトの interpreter を選択する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Path mappings: ローカルのアプリのプロジェクトのパス:コンテナ内のアプリのパス (なくても動くかも)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply -&amp;gt; OK&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/pycharm/debug-django-app-running-on-docker/#id7"&gt;デバッグする&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;左上のほうにあるプルダウンで↑で作った「実行/デバッグ構成」選択する&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/pycharm/debug-django-app-running-on-docker/Pulldown.png" src="https://32imuf.com/images/pycharm/debug-django-app-running-on-docker/Pulldown.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虫みたいなマークを押下するとデバッグモードでアプリが起動する&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/pycharm/debug-django-app-running-on-docker/Debug.png" src="https://32imuf.com/images/pycharm/debug-django-app-running-on-docker/Debug.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;あとは、コード上のブレイクしたいポイントに印をつけて、アプリを呼び出す&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>pycharm</category><guid>https://32imuf.com/pycharm/debug-django-app-running-on-docker/</guid><pubDate>Wed, 15 Apr 2020 15:00:00 GMT</pubDate></item><item><title>[読書メモ] SQL アンチパターン: II部 データベース物理設計のアンチパターン</title><link>https://32imuf.com/sql/sql-antipatterns/2-physical-design/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id2" id="id8"&gt;書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id3" id="id9"&gt;1章 インデックスショットガン (闇雲インデックス)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id4" id="id10"&gt;目的:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id5" id="id11"&gt;アンチパターン:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id6" id="id12"&gt;解決策:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id7" id="id13"&gt;まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id8"&gt;書籍&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.oreilly.co.jp/books/9784873115894/"&gt;SQL アンチパターン SQL Antipatterns (2013年, オライリー・ジャパン)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Bill Karwin 著&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和田 卓人, 和田 省二 監訳&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小島 修 訳&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id9"&gt;1章 インデックスショットガン (闇雲インデックス)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id10"&gt;目的:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;パフォーマンスを最適化する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;データベースのパフォーマンスを完全する最善の方法は、 &lt;strong&gt;インデックス&lt;/strong&gt; を効果的に使用すること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;インデックス:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;データベースが使うデータ構造で、対象とするデータベース列の値が、
データベースに実際に格納されている行の位置に関連付けられている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;テーブルを最初から最後まで検索する方法に比べ、インデックスを用いることで検索を容易に行えるようになる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id11"&gt;アンチパターン:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;闇雲にインデックスを使用する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;インデックスを全く定義しない or 少ししか定義しない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通常のアプリケーションでは、更新よりも参照のほうが何百倍も多い&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;インデックス維持のためのオーバーヘッドを取り戻せる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;インデックスを定義し過ぎる or 役立たないインデックスを定義してしまう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ほとんどのデータベースは、主キーのインデックスを自動的に作成するので、主キーに明示的にインデックスを定義するのは冗長&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;検索やソートに使わない列につけても役立たない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;冗長だったり使用頻度の極めて低い複合インデックス&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;インデックスを活用しないクエリを実行してしまう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;複合インデックスでは列の順序がとても重要!! 検索条件、結合条件、ソート順において、列を定義した順 (左から右) に使わなければならない。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;WHERE MONTH(date_reported) = 4&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このインデックスの順番は年ごとに1月1日を開始日とした連続した日付に基づいているため、月を基準にした検索には役立たない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;LIKE '%crash%'&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;この LIKE述語は、文字列のどの部分とも一致する可能性があるため、ソートされたインデックスデータ構造は役立たない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id12"&gt;解決策:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MENTOR の原則に基づいて効果的なインデックス管理を行う&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Measure (測定)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL と PostgreSQL は、指定された閾値より実行時間が長くかかったクエリを記録できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL: スロークエリログ。 &lt;code class="docutils literal"&gt;long_query_time&lt;/code&gt; (デフォルト10秒)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PostgreSQL: &lt;code class="docutils literal"&gt;log_min_duration_statement&lt;/code&gt; 。 pgFouine (クエリログ分析支援ツール) もある。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クエリパフォーマンス測定中は、クエリ結果のキャッシュをすべて無効化しましょう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain (解析)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クエリの処理が遅くなっている原因を分析します&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;データベースは、クエリ実行計画 (Query Execution Plan: QEP) と呼ばれるクエリ最適化機能によって、クエリ実行にどのインデックスを使うかを判断している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各データベース製品における QEP 取得方法&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;IBM DB2&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN&lt;/code&gt;, &lt;code class="docutils literal"&gt;db2expln&lt;/code&gt; コマンドまたは &lt;code class="docutils literal"&gt;Visual Explain&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Microsoft SQL Server&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;SET SHOWPLAN_XML&lt;/code&gt; または &lt;code class="docutils literal"&gt;Display Execution Plan&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;MySQL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Oracle&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN PLAN&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PostgresSQL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;SQLite&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nominate (指名)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クエリの QEP を読んで、クエリがインデックスを使わないでテーブルアクセスしている箇所を探しましょう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カバーリングインデックス (P.139)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test (テスト)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;インデックスの作成後 (インデックス作成でなくても何か策を講じたら) 再びクエリをプロファイリングする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimaize (最適化)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;インデックスはコンパクトで、使用頻度の高いデータ構造のため、キャッシュメモリに格納されやすい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メモリ上のインデックスにアクセスすることにより、ディスクI/O を伴う読み込みよりもはるかにパフォーマンスを改善できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;データベースサーバーでは、キャッシュに割り当てるシステムメモリ量を設定できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用頻度の高いインデックスをあらかじめキャッシュにロードしておくことでメリットを得られる場合もあり ( &lt;code class="docutils literal"&gt;LOAD INDEX INTO CACHE&lt;/code&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rebuild (再構築)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;インデックスは、バランスが取れているときに最も効果的&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;長期にわたって行の更新や削除を行っていくと次第に不均衡になっていく&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;できる限りインデックスの効率を高めたいのであれば、定期的にメンテナンスする価値はある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各データベース製品におけるインデックスのメンテナンスコマンド&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;IBM DB2&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;REBUILD INDEX&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Microsoft SQL Server&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;ALTER INDEX ... REORGANIZE&lt;/code&gt; 、 &lt;code class="docutils literal"&gt;ALTER INDEX ... REBUILD&lt;/code&gt; 、または &lt;code class="docutils literal"&gt;DBCC DBREINDEX&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;MySQL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;ANALYZE TABLE&lt;/code&gt; または &lt;code class="docutils literal"&gt;OPTIMIZE TABLE&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Oracle&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;ALTER INDEX ... REBUILD&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PostgresSQL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;VACUUM&lt;/code&gt; または &lt;code class="docutils literal"&gt;ANALYZE&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;SQLite&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;VACUUM&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id13"&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;推測のみに基づいて、闇雲にインデックスをつけてはならない&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;データとクエリについての理解を深め、 MENTOR の原則に基づいてインデックスを管理しましょう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>sql</category><guid>https://32imuf.com/sql/sql-antipatterns/2-physical-design/</guid><pubDate>Sat, 25 Jan 2020 15:00:00 GMT</pubDate></item><item><title>Amazon SES でメールを送信する</title><link>https://32imuf.com/aws/ses-sending-email/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id2" id="id16"&gt;リファレンス/ガイド&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id3" id="id17"&gt;説明&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id4" id="id18"&gt;導入の流れ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id6" id="id19"&gt;1. ドメイン検証&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id7" id="id20"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id8" id="id21"&gt;2. Eメールの認証&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#spf-e" id="id22"&gt;SPF を使った E メールの認証&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id9" id="id23"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#dkim-e" id="id24"&gt;DKIM を使った E メールの認証&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id10" id="id25"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#dmarc" id="id26"&gt;3. DMARC に準拠する&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id12" id="id27"&gt;やりかた&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id13" id="id28"&gt;ドメインの DMARC ポリシーのセットアップ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#dkim-dmarc" id="id29"&gt;DKIM による DMARC への準拠&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#spf-dmarc" id="id30"&gt;SPF による DMARC への準拠&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id14" id="id31"&gt;4. 本番運用するには...&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id15" id="id32"&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id16"&gt;リファレンス/ガイド&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES とは: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES クイック スタート: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/quick-start.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/quick-start.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id17"&gt;説明&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html"&gt;Amazon SES (Amazon Simple Email Service)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES は、ユーザー自身の E メールアドレスとドメインを使用して E メールを送受信するための、簡単で費用効率の高い方法を提供する E メールプラットフォームです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id18"&gt;導入の流れ&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;「 &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domains.html"&gt;ドメイン検証&lt;/a&gt; 」もしくは「 &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-email-addresses.html"&gt;E メールアドレス検証&lt;/a&gt; 」する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eメールを認証する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Sender Policy Framework (SPF)  を使った E メールの認証&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ドメインキーアイデンティファイドメール (DKIM) を使った E メールの認証&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DMARC (Domain-based Message Authentication, Reporting and Conformance) に準拠する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ドメインの DMARC ポリシーのセットアップ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF による DMARC への準拠&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DKIM による DMARC への準拠&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番運用するには...&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id19"&gt;1. ドメイン検証&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;「E メールアドレスの検証」 or 「ドメイン検証」 のいずれかを行う必要がある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ドメインごと検証すると、対象ドメインのすべての E メールアドレスを検証することになるため、(そのドメインの) E メールアドレスを個別に検証する必要がない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「ドメイン検証」は、AWS リージョンごとに必要&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;検証対象のドメインが Route 53 の DNS サービスを使用していて、Route 53 用の同じアカウントで AWS マネジメントコンソール にサインインしている場合、
Amazon SES コンソール内からすぐに DNS サーバーを更新できるらしい (わたしは別の DNS プロバイダーでやった)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id20"&gt;やりかた&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このガイドのとおりにやれば、とくにハマることもなくできる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES でのドメインの検証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domains.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domains.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES でのドメインの検証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domain-procedure.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domain-procedure.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;検証が完了すると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールでのドメインのステータスが「pending verification (検証中)」から「verified (検証済み)」に変わり、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES から通知 E メールが届く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールの「Send a Test Email」からテストメールを送信できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サンドボックス内にいる場合は、TOアドレスも検証する必要あり (&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-email-addresses.html"&gt;Amazon SES での E メールアドレスの検証&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;届いたメールはこんな感じ↓&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/01_test-mail-verify-domains.png" src="https://32imuf.com/images/aws/ses-sending-email/01_test-mail-verify-domains.png"&gt;
&lt;/div&gt; &lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/02_test-mail-details-verify-domains.png" src="https://32imuf.com/images/aws/ses-sending-email/02_test-mail-details-verify-domains.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id21"&gt;2. Eメールの認証&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Amazon SES での E メールの認証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/authentication.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/authentication.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES では、E メールの送信に Simple Mail Transfer Protocol（SMTP）が使用されるが、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SMTP 自体は認証を提供しないので、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;SPF&lt;/code&gt;, &lt;code class="docutils literal"&gt;DKIM&lt;/code&gt;, &lt;code class="docutils literal"&gt;DMARC への準拠&lt;/code&gt; (後述) によって「送信ドメイン認証」対応し、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ISP に対して、わたしが送信するメールが「なりすましメール」ではないことを証明しましょう (もし誰かになりすまされたら気付けるようにしましょう)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="spf-e"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id22"&gt;SPF を使った E メールの認証&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;SPF: Sender Policy Framework&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;E メールのなりすましを防ぐために設計された E メールの検証標準&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ドメイン所有者は SPF を使用して、自分のドメインからメールを送信できるサーバーをメールプロバイダーに通知する (承認済みメールサーバーのリストをドメインの DNS 設定に公開する)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E メールプロバイダーは、ドメインからメッセージを受信すると、ドメインの DNS サーバーの SPF レコードをチェックして、承認されたサーバーから E メールが送信されたことを確認する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES における SPF を使った E メールの認証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/spf.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/spf.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon SES を介して E メールを送信すると、送信するメッセージはデフォルトで SPF チェックをパスするようになっているけれども、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オプションで、独自の SPF レコードを公開できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF レコードを公開することにより、DMARC に準拠できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id23"&gt;やりかた&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="https://32imuf.com/aws/ses-sending-email/#spf-dmarc"&gt;3. DMARC に準拠する &amp;gt; SPF による DMARC への準拠 &amp;gt; 1. カスタムの MAIL FROM ドメインを設定する&lt;/a&gt; を参照のこと&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;どうせやるのなら、 DMARC に準拠できるのが良いと思う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dkim-e"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id24"&gt;DKIM を使った E メールの認証&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DKIM: ドメインキーアイデンティファイドメール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;E メールメッセージに署名することで、自分のメッセージが本物であることと送信中に改ざんされていないことを ISP に証明するための標準規格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;送信者が暗号化キーで E メールメッセージを署名できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E メールプロバイダーはこの署名を使用して、メッセージが転送中に第三者によって改ざんされていないことを検証する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;詳しくは、 &lt;a class="reference external" href="http://dkim.org/"&gt;http://dkim.org/&lt;/a&gt; に書いてあるそうです&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES における DKIM を使った E メールの認証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dkim.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dkim.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;「送信元」アドレスで使用するドメインでのみ Easy DKIM 設定が必要&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リージョンごとに Easy DKIM 設定が必要&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id25"&gt;やりかた&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="https://32imuf.com/aws/ses-sending-email/#dkim-dmarc"&gt;3. DMARC に準拠する &amp;gt; DKIM による DMARC への準拠&lt;/a&gt; を参照のこと&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;どうせやるのなら、 DMARC に準拠できるのが良いと思う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dmarc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id26"&gt;3. DMARC に準拠する&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://dmarc.org/"&gt;DMARC&lt;/a&gt;: Domain-based Message Authentication, Reporting and Conformance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SPF (Sender Policy Framework) および DKIM (ドメインキーアイデンティファイドメール) を使用して
メールスプーフィングを検出するためのメール認証プロトコルです。
DMARC に準拠するため、メッセージは SPF または DKIM のいずれか、または両方で認証される必要があります。 (2)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF と DKIM を合わせて活用する技術で、「送信ドメイン認証関連の技術」「レポーティング」という機能がある。 (3)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF や DKIM それぞれ単体の送信ドメイン認証技術と、DMARC との大きな違いは、以下が挙げられます。 (4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;それぞれ (SPF or DKIM) の認証結果のどちらかが pass すれば良いこと&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メール受信者が直接みることができるメールヘッダ上の送信者情報 (From:ヘッダ) を認証すること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メール送信者が認証が失敗したメールの取り扱いを示すことができること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メール送信者が認証結果をメール受信者から受け取る仕組みが用意されていること&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF や DKIM の合わせ技 (相互補完) + レポーティング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一番詳しくはここを見よ: &lt;a class="reference external" href="https://dmarc.org/"&gt;https://dmarc.org/&lt;/a&gt; (1)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出典:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;DMARC: &lt;a class="reference external" href="https://dmarc.org/"&gt;https://dmarc.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES での DMARC への準拠: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dmarc.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dmarc.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;送信ドメイン認証技術「DMARC」によるなりすましメール対策とDMARCレポートの活用: &lt;a class="reference external" href="https://www.dekyo.or.jp/info/2019/02/seminar/5684/"&gt;https://www.dekyo.or.jp/info/2019/02/seminar/5684/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;なりすまし対策ポータルナリタイ: &lt;a class="reference external" href="https://www.naritai.jp/index.html"&gt;https://www.naritai.jp/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id27"&gt;やりかた&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id28"&gt;ドメインの DMARC ポリシーのセットアップ&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ドメインの DNS 設定に、ドメインの DMARC 設定を指定する TXT レコードを追加する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このガイドどおりでとくにむずかしいことはない。TXT レコードの値の説明もここに書いてある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dmarc.html#dmarc-dns"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dmarc.html#dmarc-dns&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dkim-dmarc"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id29"&gt;DKIM による DMARC への準拠&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim.html"&gt;Amazon SES の Easy DKIM&lt;/a&gt; の手順を実行して Easy DKIM を設定する: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ドメインにおける Easy DKIM のセットアップ: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim-setup-domain.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim-setup-domain.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;このガイドのとおりにやれば、とくにハマることもなくできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;検証が完了すると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールでのドメインのステータスが「pending verification (検証中)」から「verified (検証済み)」に変わり、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES から通知 E メールが届く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールの「Send a Test Email」からテストメールを送信できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;届いたメールはこんな感じ (セットアップ前と比べると、「署名元」が &lt;code class="docutils literal"&gt;32imuf.com&lt;/code&gt; に変わっている)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/03_test-mail-dkim.png" src="https://32imuf.com/images/aws/ses-sending-email/03_test-mail-dkim.png"&gt;
&lt;/div&gt; &lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/04_test-mail-details-dkim.png" src="https://32imuf.com/images/aws/ses-sending-email/04_test-mail-details-dkim.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;送信元ドメインが DKIM に relaxed ポリシーを使用していることを確認する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-1"&gt;&lt;/a&gt;$ nslookup -type&lt;span class="o"&gt;=&lt;/span&gt;TXT _dmarc.32imuf.com
&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-2"&gt;&lt;/a&gt;Server:           &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8
&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-3"&gt;&lt;/a&gt;Address:  &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8#53
&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-5"&gt;&lt;/a&gt;Non-authoritative answer:
&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ここに、 adkim=r が含まれるか、または adkim 文字列がまったく存在しない場合は relaxed&lt;/span&gt;
&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-7"&gt;&lt;/a&gt;_dmarc.32imuf.com &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"v=DMARC1;p=quarantine;pct=25;rua=mailto:dmarcreports@32imuf.com"&lt;/span&gt;
&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_1491bf8c00144638bc06959a9736f78e-9"&gt;&lt;/a&gt;Authoritative answers can be found from:
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ドメインのポリシーアラインメントを変更していない場合は、デフォルトで relaxed ポリシーが使用される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="spf-dmarc"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id30"&gt;SPF による DMARC への準拠&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;カスタムの MAIL FROM ドメインを設定する: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/mail-from.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/mail-from.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;デフォルトでは、Amazon SES から送信するメッセージには、MAIL FROM ドメインとして amazonses.com のサブドメインが使用される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デフォルトの MAIL FROM ドメインが E メールを送信したアプリケーション (この場合は Amazon SES) と一致するため、
Sender Policy Framework (SPF) 認証はこれらのメッセージを正常に検証するけれども、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カスタム MAIL FROM ドメインを設定することにより、E メールはドメインベースのメッセージ認証、レポート、
および適合性 (DMARC: Domain-based Message Authentication, Reporting and Conformance) に準拠できる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;SPF で DMARC に準拠する唯一の方法は、カスタム MAIL FROM ドメインを使用すること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF 検証では、差出人アドレスのドメインが MAIL FROM ドメインと一致する必要がある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MAIL FROM ドメインは、メールの送信元である検証済み ID (メールアドレスまたはドメイン) のサブドメインである必要がある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ドメインの DNS 設定に、 MXレコードと SPFレコードを追加する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ガイドどおりでとくにハマることはなかったけれども、これ↓だけちょっと戸惑った&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MXレコード: Value の最初の &lt;code class="docutils literal"&gt;10&lt;/code&gt; は優先度のことらしい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;セットアップが完了すると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールでのドメインのステータスが「pending verification (検証中)」から「verified (検証済み)」に変わり、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES から通知 E メールが届く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールの「Send a Test Email」からテストメールを送信してみると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;届いたメールはこう (「送信元」が、設定したカスタム MAIL FROM ドメイン &lt;code class="docutils literal"&gt;bounces.32imuf.com&lt;/code&gt; に変わっている)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/05_test-mail-spf.png" src="https://32imuf.com/images/aws/ses-sending-email/05_test-mail-spf.png"&gt;
&lt;/div&gt; &lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/06_test-mail-details-spf.png" src="https://32imuf.com/images/aws/ses-sending-email/06_test-mail-details-spf.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;送信元ドメインが SPF に relaxed ポリシーを使用していることを確認する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-1"&gt;&lt;/a&gt;$ nslookup -type&lt;span class="o"&gt;=&lt;/span&gt;TXT _dmarc.32imuf.com
&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-2"&gt;&lt;/a&gt;Server:           &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8
&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-3"&gt;&lt;/a&gt;Address:  &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8#53
&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-5"&gt;&lt;/a&gt;Non-authoritative answer:
&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ここに、 aspf=r が含まれるか、または aspf 文字列がまったく存在しない場合は relaxed&lt;/span&gt;
&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-7"&gt;&lt;/a&gt;_dmarc.32imuf.com &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"v=DMARC1;p=quarantine;pct=25;rua=mailto:dmarcreports@32imuf.com"&lt;/span&gt;
&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_63b344fbb4424e0bacf927b7f22be275-9"&gt;&lt;/a&gt;Authoritative answers can be found from:
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ドメインのポリシーアラインメントを変更していない場合は、デフォルトで relaxed ポリシーが使用される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id31"&gt;4. 本番運用するには...&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;バウンスや苦情の処理方法の検討&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/request-production-access.html"&gt;Amazon SES サンドボックスの外への移動&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もやる&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id32"&gt;参考&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.wikipedia.org/wiki/DNS%E3%83%AC%E3%82%B3%E3%83%BC%E3%83%89%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E4%B8%80%E8%A6%A7"&gt;https://ja.wikipedia.org/wiki/DNSレコードタイプの一覧&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主なレコードの意味&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;A(Address) レコード&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ホスト名にIPv4 IPアドレスをマッピングする (返されるのはIPアドレス)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CNAME レコード&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;正規ホスト名に対する別名を定義する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;MX レコード&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;対象ドメイン宛のメールの配送先（メールサーバ）のホスト名を定義する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;TXT レコード&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ホスト名に関連付けるテキスト情報（文字列）を定義する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;送信ドメイン認証の認証情報などを記述する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;nslookup&lt;/code&gt;: DNS（Domain Name System）サーバに名前解決を問い合わせるコマンド&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>aws</category><guid>https://32imuf.com/aws/ses-sending-email/</guid><pubDate>Sun, 22 Dec 2019 15:00:00 GMT</pubDate></item><item><title>Django: メールを送信する</title><link>https://32imuf.com/django/email/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/email/#id2" id="id5"&gt;リファレンス/参考書籍など&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/email/#id3" id="id6"&gt;説明&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/email/#amazon-ses" id="id7"&gt;Amazon SES を使ってメール送信する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/email/#id5"&gt;リファレンス/参考書籍など&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/email/"&gt;https://docs.djangoproject.com/ja/2.2/topics/email/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1030026"&gt;現場で使える Django の教科書《実践編》&lt;/a&gt; A: メール送信の設定&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/email/#id6"&gt;説明&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;メールを送信する&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9a56bccb0c3046cd8dcb892db5bd6b18-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;
&lt;a name="rest_code_9a56bccb0c3046cd8dcb892db5bd6b18-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_9a56bccb0c3046cd8dcb892db5bd6b18-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_9a56bccb0c3046cd8dcb892db5bd6b18-4"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Subject here'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c1"&gt;# 件名&lt;/span&gt;
&lt;a name="rest_code_9a56bccb0c3046cd8dcb892db5bd6b18-5"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Here is the message.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# 本文&lt;/span&gt;
&lt;a name="rest_code_9a56bccb0c3046cd8dcb892db5bd6b18-6"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'from@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c1"&gt;# From アドレス&lt;/span&gt;
&lt;a name="rest_code_9a56bccb0c3046cd8dcb892db5bd6b18-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'to@example.com'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;       &lt;span class="c1"&gt;# To アドレス&lt;/span&gt;
&lt;a name="rest_code_9a56bccb0c3046cd8dcb892db5bd6b18-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;いろんなバックエンドがある&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/email/#email-backends"&gt;https://docs.djangoproject.com/ja/2.2/topics/email/#email-backends&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;コンソールに出すとか&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メール送らないダミーとか&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;開発用にメールを設定する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/email/#configuring-email-for-development"&gt;https://docs.djangoproject.com/ja/2.2/topics/email/#configuring-email-for-development&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これ使いそう&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_f99f2287c4ed4516a90cd8346996070e-1"&gt;&lt;/a&gt;$ python -m smtpd -n -c DebuggingServer localhost:1025
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="amazon-ses"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/email/#id7"&gt;Amazon SES を使ってメール送信する&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://pypi.org/project/django-ses/"&gt;https://pypi.org/project/django-ses/&lt;/a&gt; をインストール&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_e9b5b6708f9b4be4aed91d22d56d4fcf-1"&gt;&lt;/a&gt;$ pip install django-ses
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;settings に設定を追加する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;EMAIL_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'django_ses.SESBackend'&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 本当は settings には書かない&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'MY-ACCESS-KEY-ID'&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'MY-SECRET-ACCESS-KEY'&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# us-east-1 以外のAWSリージョンを使用する場合はこれも必要↓&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# AWS_SES_REGION_NAME = 'us-west-2'&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# AWS_SES_REGION_ENDPOINT = 'email.us-west-2.amazonaws.com'&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# DEFAULT_FROM_EMAIL: サイト管理者からの自動送信メールに使用するデフォルトの Email アドレス&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# SERVER_EMAIL: ADMINS や MANAGERS に送信されるエラーメッセージの送信元 Email アドレス&lt;/span&gt;
&lt;a name="rest_code_756c56119c65477fb01dc0c5bcaaefab-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SERVER_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'no-reply &amp;lt;XXXXX@example.com&amp;gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES を設定する&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://32imuf.com/aws/ses-sending-email/"&gt;Amazon SES でメールを送信する&lt;/a&gt; を参照のこと&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django</category><guid>https://32imuf.com/django/email/</guid><pubDate>Sat, 07 Dec 2019 15:00:00 GMT</pubDate></item><item><title>django-allauth</title><link>https://32imuf.com/django/allauth/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id2" id="id10"&gt;リファレンスなど&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id3" id="id11"&gt;概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id4" id="id12"&gt;主な機能&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#github" id="id13"&gt;GitHub とソーシャル連携認証してみる&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id5" id="id14"&gt;ガイド&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id6" id="id15"&gt;手順&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id7" id="id16"&gt;できあがるレコード&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#settings" id="id17"&gt;settings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id8" id="id18"&gt;メールを設定した&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id10"&gt;リファレンスなど&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://django-allauth.readthedocs.io/en/latest/"&gt;https://django-allauth.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1030026"&gt;現場で使える Django の教科書《実践編》&lt;/a&gt; 2章&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id11"&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Integrated set of Django applications addressing authentication, registration, account management as well as 3rd party (social) account authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id12"&gt;主な機能&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ログイン&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ログアウト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;パスワード変更&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;パスワード再設定&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ユーザー登録&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ユーザー登録時にメールを送信して登録確認&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メールアドレスとパスワードでログイン&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ログイン失敗回数制限&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ソーシャル連携認証&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://python-social-auth-docs.readthedocs.io/en/latest/"&gt;https://python-social-auth-docs.readthedocs.io/en/latest/&lt;/a&gt; こういうのもある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;テンプレートも用意してくれている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="github"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id13"&gt;GitHub とソーシャル連携認証してみる&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id14"&gt;ガイド&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://django-allauth.readthedocs.io/en/latest/providers.html#github"&gt;https://django-allauth.readthedocs.io/en/latest/providers.html#github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id15"&gt;手順&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;GitHub に OAuth アプリケーションを登録する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/settings/developers"&gt;https://github.com/settings/developers&lt;/a&gt; &amp;gt; &lt;code class="docutils literal"&gt;OAuth Apps&lt;/code&gt;  &amp;gt; &lt;code class="docutils literal"&gt;Register a new OAuth application&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/00_register-oauth-application.png" src="https://32imuf.com/images/django/allauth/00_register-oauth-application.png"&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Authorization callback URL&lt;/code&gt;: サービスプロバイダが認可コードを返した後に Web アプリ側にリダイレクトするための URL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;django-allauth を使う場合はサービスプロバイダによって異なる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サービスプロバイダごとに異なるビュー関数が用意されているため&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定値は後から Update できるよ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Admin サイトで GitHub とソーシャル連携するために初期データを登録する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# django-allauth をインストールする&lt;/span&gt;
&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-2"&gt;&lt;/a&gt;$ pip3 install django-allauth
&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# マイグレーション&lt;/span&gt;
&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-5"&gt;&lt;/a&gt;$ python3 manage.py migrate
&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# スーパーユーザー作成&lt;/span&gt;
&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-7"&gt;&lt;/a&gt;$ python3 manage.py createsuperuser
&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Django アプリを起動&lt;/span&gt;
&lt;a name="rest_code_fa5401ddb8aa473195a3b0e5e208dbe4-9"&gt;&lt;/a&gt;$ python3 manage.py runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8181
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/admin/"&gt;http://localhost:8181/admin/&lt;/a&gt; へログインする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/admin/sites/site/"&gt;http://localhost:8181/admin/sites/site/&lt;/a&gt; にレコードが1件あることを確認する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/admin/socialaccount/socialapp/"&gt;http://localhost:8181/admin/socialaccount/socialapp/&lt;/a&gt; に GitHub に登録した OAuth アプリケーションの &lt;code class="docutils literal"&gt;Client ID&lt;/code&gt; と &lt;code class="docutils literal"&gt;Client Secret&lt;/code&gt; を登録する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;動作確認する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;admin サイトからログアウト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub からもログアウト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/accounts/login/"&gt;http://localhost:8181/accounts/login/&lt;/a&gt; へアクセス&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub リンク押下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/01_login.png" src="https://32imuf.com/images/django/allauth/01_login.png"&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/02_sign-in-to-github.png" src="https://32imuf.com/images/django/allauth/02_sign-in-to-github.png"&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/03_authorize-fuminote.png" src="https://32imuf.com/images/django/allauth/03_authorize-fuminote.png"&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;今いま callback URL がエラーになる =&amp;gt; メールを設定していないからかもしれない =&amp;gt; あとでやってみる&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/06_social-login-error.png" src="https://32imuf.com/images/django/allauth/06_social-login-error.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ログインできた!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/04_home.png" src="https://32imuf.com/images/django/allauth/04_home.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ソーシャル連携解除&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/accounts/social/connections/"&gt;http://localhost:8181/accounts/social/connections/&lt;/a&gt; でソーシャル連携解除できる&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/05_social-connections.png" src="https://32imuf.com/images/django/allauth/05_social-connections.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id16"&gt;できあがるレコード&lt;/a&gt;&lt;/h3&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;auth_user&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Django サイトのユーザー&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;account_emailaddress&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Django サイトのユーザーと Email&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;socialaccount_socialtoken&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;サービスプロバイダから払いだされたトークン&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;socialaccount_socialaccount&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Django サイトのユーザーとサービスプロバイダから払いだされたトークンとを関連付けるソーシャルアカウント&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;サービスプロバイダから連携されたユーザー情報を保持&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;socialaccount_socialapp&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/admin/socialaccount/socialapp/"&gt;http://localhost:8181/admin/socialaccount/socialapp/&lt;/a&gt; で登録したサービスプロパイダ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;今回の場合だと GitHub に登録した OAuth アプリケーションの &lt;code class="docutils literal"&gt;Client ID&lt;/code&gt; と &lt;code class="docutils literal"&gt;Client Secret&lt;/code&gt; を保持&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;socialaccount_socialapp_sites&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;サービスプロパイダとサイトの紐付け&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id17"&gt;settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;settings.py&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Django settings for fufu project.&lt;/span&gt;

&lt;span class="sd"&gt;Generated by 'django-admin startproject' using Django 2.2.7.&lt;/span&gt;

&lt;span class="sd"&gt;For more information on this file, see&lt;/span&gt;
&lt;span class="sd"&gt;https://docs.djangoproject.com/en/2.2/topics/settings/&lt;/span&gt;

&lt;span class="sd"&gt;For the full list of settings and their values, see&lt;/span&gt;
&lt;span class="sd"&gt;https://docs.djangoproject.com/en/2.2/ref/settings/&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;environ&lt;/span&gt;  &lt;span class="c1"&gt;# https://github.com/joke2k/django-environ&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# set casting, default value&lt;/span&gt;
    &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# reading .env file&lt;/span&gt;
&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_env&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# False if not in os.environ&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Raises django's ImproperlyConfigured exception if SECRET_KEY not in os.environ&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;


&lt;span class="c1"&gt;# Quick-start development settings - unsuitable for production&lt;/span&gt;
&lt;span class="c1"&gt;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&lt;/span&gt;

&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Application definition&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# django-allauth ######&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.sites'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# django-allauth では sites フレームワーク必須&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth.account'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth.socialaccount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth.socialaccount.providers.github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# GitHub とソーシャル連携&lt;/span&gt;
    &lt;span class="s1"&gt;'bootstrap4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# https://pypi.org/project/django-bootstrap4/&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'django.middleware.security.SecurityMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.middleware.common.CommonMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.auth.middleware.AuthenticationMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.messages.middleware.MessageMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.middleware.clickjacking.XFrameOptionsMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'fufu.urls'&lt;/span&gt;

&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'BACKEND'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.template.backends.django.DjangoTemplates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'templates'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'APP_DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'OPTIONS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'context_processors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'django.template.context_processors.debug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'django.template.context_processors.request'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'django.contrib.auth.context_processors.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'django.contrib.messages.context_processors.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'fufu.wsgi.application'&lt;/span&gt;


&lt;span class="c1"&gt;# Database&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.db.backends.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;# Password validation&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&lt;/span&gt;

&lt;span class="n"&gt;AUTH_PASSWORD_VALIDATORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.contrib.auth.password_validation.MinimumLengthValidator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.contrib.auth.password_validation.CommonPasswordValidator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.contrib.auth.password_validation.NumericPasswordValidator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# Internationalization&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.2/topics/i18n/&lt;/span&gt;

&lt;span class="c1"&gt;# 日本語にするとテンプレートも勝手に日本語で表示される&lt;/span&gt;
&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ja'&lt;/span&gt;
&lt;span class="c1"&gt;# 英語にするとテンプレートも勝手に英語で表示される&lt;/span&gt;
&lt;span class="c1"&gt;# LANGUAGE_CODE = 'en-us'&lt;/span&gt;

&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Asia/Tokyo'&lt;/span&gt;

&lt;span class="n"&gt;USE_I18N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;USE_L10N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="c1"&gt;# Static files (CSS, JavaScript, Images)&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.2/howto/static-files/&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/static/'&lt;/span&gt;

&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# Authentication #&lt;/span&gt;
&lt;span class="c1"&gt;##################&lt;/span&gt;

&lt;span class="c1"&gt;# メールアドレスとパスワードで認証&lt;/span&gt;
&lt;span class="n"&gt;AUTHENTICATION_BACKENDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# デフォルト: これを残しておくと管理画面はユーザー名/パスワードで認証できる&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.auth.backends.ModelBackend'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth.account.auth_backends.AuthenticationBackend'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# django-allauth を追加&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 認証⽅式を 「メールアドレスとパスワード」 に変更&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_AUTHENTICATION_METHOD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'email'&lt;/span&gt;
&lt;span class="c1"&gt;# ユーザー名は使⽤しない&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_USERNAME_REQUIRED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# django-allauth にはこれが必要&lt;/span&gt;
&lt;span class="n"&gt;SITE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;LOGIN_REDIRECT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'home'&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_LOGOUT_REDIRECT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/accounts/login/'&lt;/span&gt;

&lt;span class="c1"&gt;# ログアウトリンクログアウトさせたい場合 True&lt;/span&gt;
&lt;span class="c1"&gt;# (デフォルトはログアウト画面経由で POST リクエスト)&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_LOGOUT_ON_GET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# ユーザー登録時にメールアドレス確認を行う&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_EMAIL_VARIFICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'mandatory'&lt;/span&gt;
&lt;span class="c1"&gt;# ユーザー登録時にメールアドレス確認を行わない&lt;/span&gt;
&lt;span class="c1"&gt;# ACCOUNT_EMAIL_VARIFICATION = 'none'&lt;/span&gt;
&lt;span class="c1"&gt;# ユーザー登録画面でにEmailを必須項目にする&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_EMAIL_REQUIRED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# AWS settings   #&lt;/span&gt;
&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'AWS_ACCESS_KEY_ID'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'AWS_SECRET_ACCESS_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# Email settings #&lt;/span&gt;
&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# Amazon SES を使う場合&lt;/span&gt;
&lt;span class="c1"&gt;# https://pypi.org/project/django-ses/&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'django_ses.SESBackend'&lt;/span&gt;
&lt;span class="c1"&gt;# us-east-1 以外のAWSリージョンを使用する場合はこれも必要↓&lt;/span&gt;
&lt;span class="c1"&gt;# AWS_SES_REGION_NAME = 'us-west-2'&lt;/span&gt;
&lt;span class="c1"&gt;# AWS_SES_REGION_ENDPOINT = 'email.us-west-2.amazonaws.com'&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SERVER_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'no-reply &amp;lt;no-reply@32imuf.com&amp;gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id18"&gt;メールを設定した&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;callback URL はエラーにならず、 &lt;code class="docutils literal"&gt;Confirm &lt;span class="pre"&gt;E-mail&lt;/span&gt; Address&lt;/code&gt; メール が送られてくるようになった。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Confirm E-mail Address メールが送られてくるのは、 settings に &lt;code class="docutils literal"&gt;ユーザー登録時にメールアドレス確認を行う&lt;/code&gt; と設定しているためです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メールの設定は &lt;a class="reference external" href="https://32imuf.com/django/email/"&gt;Django: メールを送信する&lt;/a&gt; を参照のこと&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流れ&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;ログイン画面で &lt;code class="docutils literal"&gt;GitHub&lt;/code&gt; リンク押下する&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/11_sign_in.png" src="https://32imuf.com/images/django/allauth/11_sign_in.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub 側のサインイン画面へ遷移する&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/12_continue_to_fuminote.png" src="https://32imuf.com/images/django/allauth/12_continue_to_fuminote.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub でサインインすると、自分のアプリのホーム画面へ遷移する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同時に、 GitHub に登録してある Email address に &lt;code class="docutils literal"&gt;Confirm &lt;span class="pre"&gt;E-mail&lt;/span&gt; Address&lt;/code&gt; メールが届く。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/13_confirm_email.png" src="https://32imuf.com/images/django/allauth/13_confirm_email.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Confirm &lt;span class="pre"&gt;E-mail&lt;/span&gt; Address&lt;/code&gt; メールに記載のリンクを押下すると、 E-mail Address 確認画面へ遷移する。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/14_confirm_email_screen.png" src="https://32imuf.com/images/django/allauth/14_confirm_email_screen.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm ボタンを押下するとホーム画面が表示される。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/15_home.png" src="https://32imuf.com/images/django/allauth/15_home.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;おまけ: &lt;a class="reference external" href="https://32imuf.com/aws/ses-sending-email/"&gt;Amazon SES をセットアップした&lt;/a&gt; の図 (ちゃんと送られてきたー)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/16_mail-detail-aws-ses.png" src="https://32imuf.com/images/django/allauth/16_mail-detail-aws-ses.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django</category><guid>https://32imuf.com/django/allauth/</guid><pubDate>Mon, 02 Dec 2019 15:00:00 GMT</pubDate></item></channel></rss>