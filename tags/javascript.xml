<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて (javascriptについての文書)</title><link>https://32imuf.com/</link><description></description><atom:link href="https://32imuf.com/tags/javascript.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2020 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Wed, 13 May 2020 14:57:58 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Firebase</title><link>https://32imuf.com/javascript/firebase/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#id2" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#note" id="id4"&gt;note&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#memo" id="id5"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://firebase.google.com/docs"&gt;https://firebase.google.com/docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id4"&gt;note&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Firebase: Google社が提供するモバイルプラットフォーム。iOS、Android、Webなどでアプリケーションを構築し、モバイルサービスを提供する際に必要な機能を備えている。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Cloud Functions: Firebase の機能のイベントや HTTPSリクエストによるトリガに応じて関数を実行する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.js 環境&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Realtime Database: NoSQL データベース。 JSON データを保存・同期する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Hosting: SPAを簡単に公開できる。 CDN や HTTPS にも対応している。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Authentication: ユーザ認証システムを簡単に構築できる。ログインプロバイダとして、メールアドレス、電話認証、Google、Twitter、Facebook、GitHubおよび匿名がある。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://console.firebase.google.com"&gt;https://console.firebase.google.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Express: Express パッケージのルーティングを使ってAPIのエンドポイントを実装する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cors: cors パッケージを使ってクロスドメイン通信の許可をする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サーバーに Firebase Admin SDK を追加する: &lt;a class="reference external" href="https://firebase.google.com/docs/admin/setup"&gt;https://firebase.google.com/docs/admin/setup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id5"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_f74baaa346a54650859266c2de329271-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase CLI のインストール&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-2"&gt;&lt;/a&gt;$ sudo npm i -g firebase-tools
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Admin SDK のインストール&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-4"&gt;&lt;/a&gt;$ npm install firebase-admin --save
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Express, cors のインストール&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-6"&gt;&lt;/a&gt;$ npm i express cors
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase へログイン&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-9"&gt;&lt;/a&gt;$ firebase login
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase からログアウト&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-11"&gt;&lt;/a&gt;$ firebase &lt;span class="nb"&gt;logout&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Hosting の設定&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-14"&gt;&lt;/a&gt;$ firebase init hosting
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-15"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Functions の設定&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-16"&gt;&lt;/a&gt;$ firebase init functions
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 作成したAPIのテスト&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-19"&gt;&lt;/a&gt;$ firebase serve --only functions
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 作成した Functions を公開する&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-21"&gt;&lt;/a&gt;$ firebase deploy --only functions
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-23"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# チャンネル作成&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# http://localhost:5000/fumi23-chat-app/us-central1/v1&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-25"&gt;&lt;/a&gt;$ curl -H &lt;span class="s1"&gt;'Content-Type:application/json'&lt;/span&gt; -d &lt;span class="s1"&gt;'{"cname": "general"}'&lt;/span&gt; http://localhost:5000/fumi23-chat-app/us-central1/v1/channels
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# チャンネル一覧&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-27"&gt;&lt;/a&gt;$ curl http://localhost:5000/fumi23-chat-app/uscentral1/v1/channels
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-28"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 初期状態に戻す&lt;/span&gt;
&lt;a name="rest_code_f74baaa346a54650859266c2de329271-29"&gt;&lt;/a&gt;$ curl -H &lt;span class="s1"&gt;'ContentType:application/json'&lt;/span&gt; -d &lt;span class="s1"&gt;'{}'&lt;/span&gt; https://us-central1-fumi23-chat-app.cloudfunctions.net/v1/reset
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/firebase/</guid><pubDate>Tue, 12 May 2020 15:00:00 GMT</pubDate></item><item><title>JavaScript</title><link>https://32imuf.com/javascript/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#id2" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#note" id="id4"&gt;note&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#ecmascript2015" id="id5"&gt;ECMAScript2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#typescript" id="id6"&gt;TypeScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#memo" id="id7"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#vscode-memo" id="id8"&gt;VSCode memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://developer.mozilla.org/ja/docs/Web/JavaScript"&gt;https://developer.mozilla.org/ja/docs/Web/JavaScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.typescriptlang.org/docs/home.html"&gt;https://www.typescriptlang.org/docs/home.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.npmjs.com/"&gt;https://docs.npmjs.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://reactjs.org/docs/getting-started.html"&gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id4"&gt;note&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;TypeScript は言語 (JavaScript のスーパーセット)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vue, React, Angular はフレームワーク&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は React を使ったフレームワーク。 Nuxt.js は Vue を使ったフレームワーク。 Next のほうが先輩。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js はサーバーサイドで動く JavaScript 環境&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm (Node Package Manager): Node.js で作られたパッケージを管理するためのツール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;npm を使うとパッケージの共有やインストール、アップデートを簡単にできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package.json: ローカル開発環境にインストールする npm パッケージを管理するのに利用する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;package.json を利用すると npm パッケージの依存関係やバージョン管理、開発環境のセットアップが簡単にできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package.json から npm i できる、package.json を更新したら npm up でパッケージ更新もできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package-lock.json: npm インストールしたパッケージ名や明確なバージョン情報が記載される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;webpack: フロントエンドビルドツール, モジュールバンドラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;複数の JavaScript ファイルや CSS などあらゆる static ファイルの依存関係を解決し１つのファイルにまとめてくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リクエスト数を減らせるなどのメリットがある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Entry: webpack がモジュールの依存関係を解析するためのエントリポイント、複数指定することもできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Output: バンドルされたファイルの出力先、絶対パスを指定する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loader: JavaScript 以外の static ファイルも同時にバンドルできる、トランスパイルできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: いろいろ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Babel: トランスコンパイラー (ECMAScript2015 以降のコードを ECMAScript5 に変換する)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;トランスパイル: あるプログラミング言語で書かれたコードをほかのプログラミング言語のコードに変換すること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;extract-text-webpack-plugin: スタイルシートを CSS ファイルに出力する Plugin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ESLint: Linter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;require&lt;/code&gt;: CommonJS の仕様、Node.js 環境で動作する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;import&lt;/code&gt;:  ES2015 (ES6) の仕様、古いブラウザでは動かない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="ecmascript2015"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id5"&gt;ECMAScript2015&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript は ECMA International という標準化団体が仕様を策定している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ECMAScript2015 == ECMAScript6&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;2015年に策定された6番目の仕様&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;変数宣言: &lt;code class="docutils literal"&gt;let&lt;/code&gt; と &lt;code class="docutils literal"&gt;const&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブロックスコープ, テンプレートリテラル, デフォルト引数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;アロー関数: アロー関数の場合は定義した場所の &lt;code class="docutils literal"&gt;this&lt;/code&gt; が参照される&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_9622113c76754cf3afd9cf5dce2a0649-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// アロー関数その１&lt;/span&gt;
&lt;a name="rest_code_9622113c76754cf3afd9cf5dce2a0649-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_9622113c76754cf3afd9cf5dce2a0649-3"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;returna&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_9622113c76754cf3afd9cf5dce2a0649-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code javascript"&gt;&lt;a name="rest_code_f7971ae4cfd24981aa2ae2356f097d34-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// アロー関数その２&lt;/span&gt;
&lt;a name="rest_code_f7971ae4cfd24981aa2ae2356f097d34-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;class 定義, class の継承&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Promise: 非同期処理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;モジュール: モジュールとしてファイル分割できる。 &lt;code class="docutils literal"&gt;export&lt;/code&gt; 文。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="typescript"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id6"&gt;TypeScript&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript: JavaScript のスーパーセット, 上位互換&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Microsoft によって開発された OSS の JavaScript ベースのプログラミング言語&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静的型付け, クラスベースのオブジェクト指向&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tsc: TypeScript 付属のコンパイラツール, ECMAScript5 へ変換できるよ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript の拡張子は &lt;code class="docutils literal"&gt;.ts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型注釈（type annotation）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;型推論できるところは型推論に任せる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;?&lt;/code&gt;: オプショナル&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コールバック関数の型注釈と、アロー関数の定義が紛らわしい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型変換&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;JSX を使用することが確定している場合には、「変数 as 変換後の型」を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;interface&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;アクセス修飾子 (&lt;code class="docutils literal"&gt;public&lt;/code&gt;、&lt;code class="docutils literal"&gt;private&lt;/code&gt;、&lt;code class="docutils literal"&gt;protected&lt;/code&gt;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;デフォルトは &lt;code class="docutils literal"&gt;public&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ジェネリクス&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;: &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// こうとか&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-6"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"taro"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// こうとか&lt;/span&gt;
&lt;a name="rest_code_7ada3135e3fb4df894229d97a229d6a1-8"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型定義ファイル: 型の定義を別ファイルにまとめておける&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;拡張子は &lt;code class="docutils literal"&gt;.d.ts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デコレータ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;クラス、メソッド、アクセサ、プロパティやパラメータに付与できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 使う時&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;@sealed&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-4"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;greeting&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-7"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-8"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;greet() {&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Hello, "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-10"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// デコレーターの実体&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-14"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sealed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-15"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-16"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d803c09a2b1a4d12894344c3bec8d106-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSX: JavaScript 中に埋め込み可能な XML ライクな文法&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// React.createElement() は DOM を作成する関数&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"div"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"class"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nickname"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;nickname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// JSXではこのように書けるとのこと&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-7"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-8"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nickname"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ac772b9b809941d68914c7f00ea424b4-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id7"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json ファイルが生成される&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-2"&gt;&lt;/a&gt;$ npm init -y
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# パッケージをインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# node_modules ディレクトリに指定したパッケージがインストールされる&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json &amp;gt; dependencies/devDependencies にインストールしたパッケージとバージョンが追記される&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-7"&gt;&lt;/a&gt;$ npm i react react-dom
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -g : グローバルインストール (すべてのプロジェクトで利用できる)&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-9"&gt;&lt;/a&gt;$ npm i -g react react-dom
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ビルドなど開発時だけに必要なパッケージは -D を利用してインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-11"&gt;&lt;/a&gt;npm i -D webpack webpack-cli
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アンインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-13"&gt;&lt;/a&gt;$ npm un react react-dom
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -D の省略しない形は --save-dev&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-15"&gt;&lt;/a&gt;$ npm uninstall babel-preset-env --save-dev
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# webpack をインストール, CLI もインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-18"&gt;&lt;/a&gt;$ npm i -D webpack webpack-cli
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# webpack でバンドラする&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npx: ローカルにインストールした npm パッケージをパッケージ名を指定して実行できる&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# --mode development: 開発モード. ビルドが速く watch がサポートされている&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-22"&gt;&lt;/a&gt;$ npx webpack --mode development
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npm scripts コマンドのエイリアスが作れる&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-25"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json の "scripts" フィールドにスクリプトを書いておく&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-26"&gt;&lt;/a&gt;$ npm run build:dev
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-28"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 今はこの書き方&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-29"&gt;&lt;/a&gt;$ npm i -D babel-loader style-loader css-loader @babel/core @babel/preset-env @babel/preset-react
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# スタイルシートを CSS ファイルに出力する Plugin をインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-32"&gt;&lt;/a&gt;$ npm i -D extract-text-webpack-plugin@4.0.0beta.0
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-34"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 開発用サーバーを立てる&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-35"&gt;&lt;/a&gt;$ npm i -D webpack-dev-server@3.1.1
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 開発用サーバーを起動&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-37"&gt;&lt;/a&gt;$ npx webpack-dev-server --mode development --hot --inline --open
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-38"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npm scripts 作っておくと、こう&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-39"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Ctrl + C で停止&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-40"&gt;&lt;/a&gt;$ npm start
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-41"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-42"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ESLint をインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-43"&gt;&lt;/a&gt;$ npm i -D eslint@4.19.1
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-44"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-45"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# TypeScript をインストール&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-46"&gt;&lt;/a&gt;$ sudo npm i -g typescript
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-47"&gt;&lt;/a&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-48"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# tsc コマンドで ECMAScript5 に変換&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-49"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -t: 変換する対象バージョン&lt;/span&gt;
&lt;a name="rest_code_71aeb30569a04f5d82a06e69a6425378-50"&gt;&lt;/a&gt;$ tsc -t ES5 hello.ts
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="vscode-memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id8"&gt;VSCode memo&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;F12&lt;/code&gt;: 定義へ移動&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;option&lt;/code&gt; + &lt;code class="docutils literal"&gt;F12&lt;/code&gt;: Peek ウィンドウ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debugger for Chrome: VSCode の Chrome 拡張機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VSCode上でブレークポイントを使ってデバッグできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React Developer Tools: Chrome 拡張機能&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/note/</guid><pubDate>Tue, 05 May 2020 15:00:00 GMT</pubDate></item></channel></rss>