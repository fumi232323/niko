<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fuminote (pythonについての文書)</title><link>https://32imuf.com/</link><description></description><atom:link href="https://32imuf.com/tags/python.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2019 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Sun, 02 Jun 2019 11:12:34 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python のメモ</title><link>https://32imuf.com/python/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id2" id="id27"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#http" id="id28"&gt;ローカルに HTTP サーバーを立てる&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id6" id="id29"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id7" id="id30"&gt;ユーザー定義例外&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id8" id="id31"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#re-matchobject-groupdict" id="id32"&gt;re.MatchObject.groupdict&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id10" id="id33"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id11" id="id34"&gt;どんどん足してくやつ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#coding-utf-8" id="id35"&gt;coding: utf-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#yield-dict-zip-columns-data" id="id36"&gt;yield dict(zip(columns, data))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#defaultdict" id="id37"&gt;defaultdict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id14" id="id38"&gt;組み込み型と名前が被った場合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#sorted" id="id39"&gt;sorted&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id15" id="id40"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#all" id="id41"&gt;all()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#property" id="id42"&gt;@property&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id17" id="id43"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id18" id="id44"&gt;シーケンスのアンパッキング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#stringio-seek-0" id="id45"&gt;StringIO().seek(0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#if-name-main" id="id46"&gt;if __name__ == "__main__"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#unicode-str" id="id47"&gt;unicode と str&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id20" id="id48"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id21" id="id49"&gt;バックスラッシュ感染症&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id22" id="id50"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id24" id="id51"&gt;正規表現のグループ化機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id26" id="id52"&gt;長い正規表現を記述する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id27"&gt;リファレンス&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/genindex.html"&gt;頭文字別索引:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/py-modindex.html"&gt;Pythonモジュール索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#built-in-functions"&gt;組み込み関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/index.html"&gt;Python 標準ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="http"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id28"&gt;ローカルに HTTP サーバーを立てる&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_f424904617264dbd984fff1f48e430a7-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ポートを指定 (現在のディレクトリのファイルを提供)&lt;/span&gt;
&lt;a name="rest_code_f424904617264dbd984fff1f48e430a7-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;a name="rest_code_f424904617264dbd984fff1f48e430a7-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# バインドするアドレスを指定 (現在のディレクトリのファイルを提供)&lt;/span&gt;
&lt;a name="rest_code_f424904617264dbd984fff1f48e430a7-4"&gt;&lt;/a&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;a name="rest_code_f424904617264dbd984fff1f48e430a7-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ファイルを提供するディレクトリを指定&lt;/span&gt;
&lt;a name="rest_code_f424904617264dbd984fff1f48e430a7-6"&gt;&lt;/a&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id29"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/http.server.html"&gt;http.server --- HTTP サーバ&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id30"&gt;ユーザー定義例外&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Exception クラスを、直接または間接的に継承する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/exceptions.html#BaseException"&gt;https://docs.python.org/ja/3/library/exceptions.html#BaseException&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
全ての組み込み例外の基底クラスです。ユーザ定義の例外に直接継承されることは意図されていません (継承には Exception を使ってください)。
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;大抵は、いくつかの属性だけを提供し、例外が発生したときにハンドラがエラーに関する情報を取り出せるようにする程度にとどめる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;だいたいは、標準の例外の名前付けと同様に、 "Error" で終わる名前で定義する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;複数の別個の例外を送出するようなモジュールを作成する際には、そのモジュールで定義されている例外の基底クラスを作成するのが一般的なプラクティス&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id31"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3.7/tutorial/errors.html#user-defined-exceptions"&gt;8.5. ユーザー定義例外&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="re-matchobject-groupdict"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id32"&gt;re.MatchObject.groupdict&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;マッチの、すべての 名前つきの サブグループを含む、サブグループ名でキー付けされた辞書を返す&lt;/li&gt;
&lt;li&gt;リファレンスのサンプルコードを見ると一目瞭然なので、そちらを見てください&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id33"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/2.7/library/re.html#re.MatchObject.groupdict"&gt;https://docs.python.org/ja/2.7/library/re.html#re.MatchObject.groupdict&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id34"&gt;どんどん足してくやつ&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functools.html#functools.reduce"&gt;functools.reduce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="coding-utf-8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id35"&gt;coding: utf-8&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ソースコードの文字エンコーディングを指定する&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3ed395f99a964378b18e43b01c0cd6e1-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;ファイルの先頭に記述する&lt;/li&gt;
&lt;li&gt;記述しないと、 Python2 環境かつファイルにマルチバイトが含まれていると &lt;tt class="docutils literal"&gt;SyntaxError&lt;/tt&gt; が発生する。&lt;/li&gt;
&lt;li&gt;Python3 環境では不要&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="yield-dict-zip-columns-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id36"&gt;yield dict(zip(columns, data))&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これは、&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_05182536daf14d0f8f01a574d2b1e7c1-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_05182536daf14d0f8f01a574d2b1e7c1-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;row_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a name="rest_code_05182536daf14d0f8f01a574d2b1e7c1-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;row_dict&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;こう書ける。&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a182196372444049a482569c5e70d05f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;zip&lt;/tt&gt; はタプルのイテレータを返す -&amp;gt; タプルから辞書を作れる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;dict(iterable, **kwarg)&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/stdtypes.html#dict"&gt;https://docs.python.org/ja/3/library/stdtypes.html#dict&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
それ以外の場合、位置引数は iterable オブジェクトでなければなりません。iterable のそれぞれの要素自身は、ちょうど 2 個のオブジェクトを持つイテラブルでなければなりません。それぞれの要素の最初のオブジェクトは新しい辞書のキーになり、2 番目のオブジェクトはそれに対応する値になります。同一のキーが 2 回以上現れた場合は、そのキーの最後の値が新しい辞書での対応する値になります。
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="defaultdict"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id37"&gt;defaultdict&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;リストの初期化が不要になる！&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/collections.html#defaultdict-objects"&gt;defaultdict オブジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/collections.html#defaultdict-examples"&gt;defaultdict の使用例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id38"&gt;組み込み型と名前が被った場合&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;in&lt;/tt&gt; や &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; など、キーワード・組み込み型と同じ名前を変数名にしたい場合は、末尾に &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; を付ける。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sorted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id39"&gt;sorted&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これは、&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_6855065c14f3446cbe6ed2f43d5ef674-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;summary_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_6855065c14f3446cbe6ed2f43d5ef674-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;summary_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sort_key'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;sorted&lt;/tt&gt; という関数を使って以下のように書ける。&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_fad0fecd1d474760af25d6bd7e7b3810-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;summary_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sort_key'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;さらに、for文をこんなふうに書くと &lt;tt class="docutils literal"&gt;summary_list&lt;/tt&gt; を作る工程が不要。&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_651a8c5a2c124482a59bae9502c24672-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
&lt;a name="rest_code_651a8c5a2c124482a59bae9502c24672-2"&gt;&lt;/a&gt;    &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id40"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;cite&gt;タプルはイミュータブルなシーケンス&lt;/cite&gt; なので、 ソートできる。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#sorted"&gt;sorted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/stdtypes.html#tuples"&gt;タプル型 (tuple)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="all"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id41"&gt;all()&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#all"&gt;all(iterable)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;iterable の全ての要素が真ならば (もしくは iterable が空ならば) True を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="property"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id42"&gt;@property&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;@property&lt;/tt&gt; デコレータ を付けると、プロパティのように呼び出せる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;付け方&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ff8afc7b63284bcfb44a1580c08a4baf-1"&gt;&lt;/a&gt;&lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;
&lt;a name="rest_code_ff8afc7b63284bcfb44a1580c08a4baf-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;access_datehour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ff8afc7b63284bcfb44a1580c08a4baf-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%Y/%m/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %H'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;呼び出すとき&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_f07f6be6caa4476aa049dbaa00daafce-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_datehour&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id17"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id43"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#property"&gt;https://docs.python.org/ja/3/library/functions.html#property&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;同じ名前のまま 読み出し専用属性の &lt;tt class="docutils literal"&gt;getter&lt;/tt&gt; にしてくれる&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id44"&gt;シーケンスのアンパッキング&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/tutorial/datastructures.html#tuples-and-sequences"&gt;タプルとシーケンス&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stringio-seek-0"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id45"&gt;StringIO().seek(0)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/io.html#io.IOBase.seek"&gt;https://docs.python.org/ja/3/library/io.html#io.IOBase.seek&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;先頭にもどす、 (カーソルを先頭に戻すみたいなイメージ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="if-name-main"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id46"&gt;if __name__ == "__main__"&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.pyq.jp/entry/Python_kaiketsu_180207"&gt;http://blog.pyq.jp/entry/Python_kaiketsu_180207&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pythonでは、インポートされたファイルの中身は実行される&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="unicode-str"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id47"&gt;unicode と str&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_f74f6f36c55140199e5bc29e54adc12a-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;a name="rest_code_f74f6f36c55140199e5bc29e54adc12a-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'ふみ'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'ふみ'&lt;/span&gt;
&lt;a name="rest_code_f74f6f36c55140199e5bc29e54adc12a-3"&gt;&lt;/a&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_f74f6f36c55140199e5bc29e54adc12a-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'fumi23'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'fumi23'&lt;/span&gt;
&lt;a name="rest_code_f74f6f36c55140199e5bc29e54adc12a-5"&gt;&lt;/a&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_f74f6f36c55140199e5bc29e54adc12a-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;python2 の場合、マルチバイトを含むと &lt;tt class="docutils literal"&gt;u&lt;/tt&gt; の有無で違うオブジェクトとして判定される。&lt;/li&gt;
&lt;li&gt;python2の文字には &lt;tt class="docutils literal"&gt;unicode&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; がある。 ascii 文字しか含まない場合は 同じ値と判断されるけど基本的に別物として考えたほうがいい。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id20"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id48"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/2.7/tutorial/introduction.html#unicode-strings"&gt;3.1.3. Unicode 文字列&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id49"&gt;バックスラッシュ感染症&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;こんなふうに書く&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_7b97f865cefc415188f37d9378b86dc9-1"&gt;&lt;/a&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"ab*"&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="id22"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id50"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3.7/howto/regex.html#the-backslash-plague"&gt;バックスラッシュ感染症&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;r&lt;/tt&gt; を文字列リテラルの先頭に書くことでバックスラッシュは特別扱いされなくなる&lt;/li&gt;
&lt;li&gt;多くの場合 Python コードの中の正規表現はこの raw string 記法を使って書かれる&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id51"&gt;正規表現のグループ化機能&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このあたりから&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3.7/howto/regex.html#non-capturing-and-named-groups"&gt;取り出さないグループと名前つきグループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id26"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id52"&gt;長い正規表現を記述する方法&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;カンマ区切り無しで文字列リテラルを複数に分ける&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python-guide.org/en/latest/writing/style/#line-continuations"&gt;http://docs.python-guide.org/en/latest/writing/style/#line-continuations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;re.VERBOSE オプションを使う&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/re.html#re.VERBOSE"&gt;https://docs.python.org/ja/3/library/re.html#re.VERBOSE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/note/</guid><pubDate>Fri, 19 Apr 2019 15:00:00 GMT</pubDate></item><item><title>Python いろいろメモ</title><link>https://32imuf.com/python/etc/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#wheel" id="id8"&gt;wheel&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#id2" id="id9"&gt;wheel の作り方&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#id3" id="id10"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#pip" id="id11"&gt;pip&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#id4" id="id12"&gt;pip のリファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#pip-install-r" id="id13"&gt;pip install -r&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#id5" id="id14"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#pip-install-u" id="id15"&gt;pip install -U&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#id6" id="id16"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#rundeckrun" id="id17"&gt;rundeckrun&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#id7" id="id18"&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#autopep8" id="id19"&gt;autopep8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#pipdeptree" id="id20"&gt;pipdeptree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="wheel"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id8"&gt;wheel&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;ビルド済みの C 拡張や Python パッケージのみを含み、ファイルを展開するだけでインストールが完了する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;sdist : パッケージのソース、メタデータ、ビルド方法などをアーカイブしたソース配布形式&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;インストールのたびに各環境でアーカイブに同梱される setup スクリプトを読み込み、 C 拡張があればビルドし、必要は Python パッケージを確認して、 site-packages へコピーする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Python の公式バイナリパッケージは wheel 形式 (PEP491)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;pip コマンドは、 wheel 形式を優先して利用する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;pip は、 PyPI にアップロードされている wheel 形式のパッケージを直接インストールできる&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_93dee51b217d4182973071e2dd3cf7b2-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install &lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11.15
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://pythonwheels.com/"&gt;https://pythonwheels.com/&lt;/a&gt; : 定番パッケージの wheel 配布状況を確認できる&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id9"&gt;wheel の作り方&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;PyPI で sdist で配布されているパッケージを wheel 形式のパッケージに変換してローカルに保存する。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;wheel をインストールする&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_3d27786d396245b9b3f8242d006cca6f-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;(venv) $&lt;/span&gt; pip install wheel
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;wheelhouse ディレクトリに wheel 形式パッケージを作成する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_64c101ee34964662af87abbdc58209c8-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;(venv) $&lt;/span&gt; pip wheel markupsafe -w wheelhouse
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;wheelhouse&lt;/tt&gt; ディレクトリがなくても、 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt; wheelhouse&lt;/tt&gt; を指定すると勝手に作ってくれる&lt;/li&gt;
&lt;li&gt;wheel 形式のパッケージの保存ディレクトリ名は何でもよいが、慣習的に &lt;tt class="docutils literal"&gt;wheelhouse&lt;/tt&gt; という名前を使う&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id10"&gt;参考&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python プロフェッショナルプログラミング 第3版 P.256 - P.259&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pip"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id11"&gt;pip&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id12"&gt;pip のリファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pip.pypa.io/en/stable/reference/"&gt;https://pip.pypa.io/en/stable/reference/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-install-r"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id13"&gt;pip install -r&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;requirements.txt に指定したライブラリをインストールする&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_f1fab2df579b4f50bb51f1eac982f4e8-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install -r requirements.txt
&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;すでにインストール済みのものはスキップしてくれる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;requirements.txt にインストールオプションを書いておくことができる&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_7ace7613b58e4080a32963b4b2515f86-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;--no-index           # PyPI に問い合わせない (Index サーバーを使わない)&lt;/span&gt;
&lt;a name="rest_code_7ace7613b58e4080a32963b4b2515f86-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;-f wheelhouse        # ライブラリの取得元を wheelhouse に限定する&lt;/span&gt;
&lt;a name="rest_code_7ace7613b58e4080a32963b4b2515f86-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;-r run-requires.txt  # インストールしたいライブラリはこっちに書いたから見てね&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f(--find-links)&lt;/span&gt; &amp;lt;url&amp;gt;&lt;/tt&gt; : 参照したいパッケージがあるページのリンクを指定する。&lt;ul&gt;
&lt;li&gt;url に存在するパッケージは、 Index サーバーよりも優先的に使用される&lt;/li&gt;
&lt;li&gt;url に見つからないパッケージは、 Index サーバーからインストールする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id14"&gt;参考&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python プロフェッショナルプログラミング 第3版 P.272 - P.274, P.255&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-install-u"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id15"&gt;pip install -U&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最新のバージョンに更新する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_de10d491a75e47c397d29dfe90c59d17-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install -U requests
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;pip は、指定されたパッケージがすでにインストール済みの場合、新しいバージョンが公開されていても自動的に最新版に更新したりしない&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id16"&gt;参考&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python プロフェッショナルプログラミング 第3版 P.63&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rundeckrun"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id17"&gt;rundeckrun&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python コードから Rundeck を操作できる。&lt;/p&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id18"&gt;リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://rundeckrun.readthedocs.io/en/latest/index.html"&gt;https://rundeckrun.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="autopep8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id19"&gt;autopep8&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;autopep8 automatically formats Python code to conform to the PEP 8 style guide.&lt;/cite&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/autopep8"&gt;https://pypi.python.org/pypi/autopep8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pipdeptree"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id20"&gt;pipdeptree&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ライブラリの依存関係を調べられる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/naiquevin/pipdeptree"&gt;https://github.com/naiquevin/pipdeptree&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_c376d17776a34db59a895d5cd3765166-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install pipdeptree
&lt;a name="rest_code_c376d17776a34db59a895d5cd3765166-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pipdeptree -p django
&lt;a name="rest_code_c376d17776a34db59a895d5cd3765166-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;Django==1.11.15&lt;/span&gt;
&lt;a name="rest_code_c376d17776a34db59a895d5cd3765166-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;  - pytz [required: Any, installed: 2018.3]&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code console"&gt;&lt;a name="rest_code_9335fc5bd020404da116f21eb3c0c0b0-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pipdeptree -r -p django
&lt;a name="rest_code_9335fc5bd020404da116f21eb3c0c0b0-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;django==1.11.15&lt;/span&gt;
&lt;a name="rest_code_9335fc5bd020404da116f21eb3c0c0b0-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;  - dj-inmemorystorage==1.4.1 [requires: Django&amp;gt;=1.4]&lt;/span&gt;
&lt;a name="rest_code_9335fc5bd020404da116f21eb3c0c0b0-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;  - model-mommy==1.5.1 [requires: django&amp;gt;=1.8.0]&lt;/span&gt;
&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;オプションの意味&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_a308e9ab7acb4467bdcf9661c238318c-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;-r, --reverse         Shows the dependency tree in the reverse fashion ie.&lt;/span&gt;
&lt;a name="rest_code_a308e9ab7acb4467bdcf9661c238318c-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;                      the sub-dependencies are listed with the list of&lt;/span&gt;
&lt;a name="rest_code_a308e9ab7acb4467bdcf9661c238318c-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;                      packages that need them under them.&lt;/span&gt;
&lt;a name="rest_code_a308e9ab7acb4467bdcf9661c238318c-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;-p PACKAGES, --packages PACKAGES&lt;/span&gt;
&lt;a name="rest_code_a308e9ab7acb4467bdcf9661c238318c-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;                      Comma separated list of select packages to show in the&lt;/span&gt;
&lt;a name="rest_code_a308e9ab7acb4467bdcf9661c238318c-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;                      output. If set, --all will be ignored.&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/etc/</guid><pubDate>Sun, 28 Oct 2018 15:00:00 GMT</pubDate></item><item><title>PyConJP 2018 で聞いた講演</title><link>https://32imuf.com/python/pyconjp2018/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id2" id="id9"&gt;9月17日&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#argentina-in-python-community-dreams-travels-and-learning" id="id10"&gt;基調講演: Argentina in Python: community, dreams, travels and learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#ai" id="id11"&gt;招待講演: 東大松尾研流 実践的AI人材育成法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id3" id="id12"&gt;ジョブフェア&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#djangopycharm" id="id13"&gt;DjangoではじめるPyCharm実践入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id4" id="id14"&gt;あなたと私いますぐパッケージン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#jupyterpython" id="id15"&gt;Jupyterで広がるPythonの可能性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#python" id="id16"&gt;Pythonで解く大学入試数学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id5" id="id17"&gt;9月18日&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id6" id="id18"&gt;基調講演: 「Pythonでやってみた」：広がるプログラミングの愉しみ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#migrating-from-py2-application-to-py3-first-trial-in-monotaro-python2-python3-monotaro" id="id19"&gt;Migrating from Py2 application to Py3: first trial in MonotaRO / Python2 から Python3 への移植: MonotaRO での取り組み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#pythonista" id="id20"&gt;Pythonistaに贈るコンテナ入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#pythonunix" id="id21"&gt;Pythonでざっくり学ぶUnixプロセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#cpython-23" id="id22"&gt;C拡張と共に乗り切るPython 2→3移行術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id7" id="id23"&gt;Pythonで始めるウェブスクレイピング実践入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id8" id="id24"&gt;生では聞けなかったけど&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#web-takayuki-shimizukawa" id="id25"&gt;Webアプリケーションの仕組み(Takayuki Shimizukawa)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id9"&gt;9月17日&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="argentina-in-python-community-dreams-travels-and-learning"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id10"&gt;基調講演: Argentina in Python: community, dreams, travels and learning&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=KwmF5wyY2C4"&gt;https://www.youtube.com/watch?v=KwmF5wyY2C4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ai"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id11"&gt;招待講演: 東大松尾研流 実践的AI人材育成法&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=shaG3p8wtlQ"&gt;https://www.youtube.com/watch?v=shaG3p8wtlQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id12"&gt;ジョブフェア&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;動画なし&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="djangopycharm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id13"&gt;DjangoではじめるPyCharm実践入門&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=sJlyZmbT2xs"&gt;https://www.youtube.com/watch?v=sJlyZmbT2xs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gitpitch.com/kashewnuts/slides?p=20180917pyconjp#/"&gt;https://gitpitch.com/kashewnuts/slides?p=20180917pyconjp#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id14"&gt;あなたと私いますぐパッケージン&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=_5HCH51-47Y"&gt;https://www.youtube.com/watch?v=_5HCH51-47Y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://speakerdeck.com/aodag/anatatopythonjin-sugupatukezingu"&gt;https://speakerdeck.com/aodag/anatatopythonjin-sugupatukezingu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="jupyterpython"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id15"&gt;Jupyterで広がるPythonの可能性&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;動画見当たらず&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/drillan/pyconjp2018"&gt;https://github.com/drillan/pyconjp2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id16"&gt;Pythonで解く大学入試数学&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=x0mIzF_VXLg"&gt;https://www.youtube.com/watch?v=x0mIzF_VXLg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slideship.com/users/@massa142/presentations/2018/09/56hjwyTVtpSefg2dnTfKew/"&gt;https://slideship.com/users/@massa142/presentations/2018/09/56hjwyTVtpSefg2dnTfKew/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id17"&gt;9月18日&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id18"&gt;基調講演: 「Pythonでやってみた」：広がるプログラミングの愉しみ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=kO4FNg648qE"&gt;https://www.youtube.com/watch?v=kO4FNg648qE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.slideshare.net/RansuiIso/python-115121978"&gt;https://www.slideshare.net/RansuiIso/python-115121978&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="migrating-from-py2-application-to-py3-first-trial-in-monotaro-python2-python3-monotaro"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id19"&gt;Migrating from Py2 application to Py3: first trial in MonotaRO / Python2 から Python3 への移植: MonotaRO での取り組み&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3iSs6UeeKE"&gt;https://www.youtube.com/watch?v=w3iSs6UeeKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;スライド見当たらず&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pythonista"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id20"&gt;Pythonistaに贈るコンテナ入門&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;動画なし&lt;/li&gt;
&lt;li&gt;スライド見当たらず&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pythonunix"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id21"&gt;Pythonでざっくり学ぶUnixプロセス&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pX58pvc3Fk4"&gt;https://www.youtube.com/watch?v=pX58pvc3Fk4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tell-k.github.io/pyconjp2018/#1"&gt;https://tell-k.github.io/pyconjp2018/#1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cpython-23"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id22"&gt;C拡張と共に乗り切るPython 2→3移行術&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Wmxr3gn8fLY"&gt;https://www.youtube.com/watch?v=Wmxr3gn8fLY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://speakerdeck.com/puhitaku/ckuo-zhang-togong-nicheng-riqie-rupython-2-nil-3yi-xing-shu"&gt;https://speakerdeck.com/puhitaku/ckuo-zhang-togong-nicheng-riqie-rupython-2-nil-3yi-xing-shu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id23"&gt;Pythonで始めるウェブスクレイピング実践入門&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=zgTP_4-XEpw"&gt;https://www.youtube.com/watch?v=zgTP_4-XEpw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://speakerdeck.com/sin_tanaka_21/pythondeshi-meruuebusukureipingushi-jian-ru-men"&gt;https://speakerdeck.com/sin_tanaka_21/pythondeshi-meruuebusukureipingushi-jian-ru-men&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id24"&gt;生では聞けなかったけど&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="web-takayuki-shimizukawa"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id25"&gt;Webアプリケーションの仕組み(Takayuki Shimizukawa)&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=L7j2zgtpV9c"&gt;https://www.youtube.com/watch?v=L7j2zgtpV9c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://scrapbox.io/shimizukawa/PyCon_JP_2018:_Web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF"&gt;https://scrapbox.io/shimizukawa/PyCon_JP_2018:_Web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/pyconjp2018/</guid><pubDate>Wed, 19 Sep 2018 15:00:00 GMT</pubDate></item></channel></rss>