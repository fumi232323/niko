<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて</title><link>https://32imuf.com/</link><description>のてのて</description><atom:link href="https://32imuf.com/atom.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Sun, 21 Nov 2021 14:34:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Amazon RDS のバックアップと復元</title><link>https://32imuf.com/aws/rds-backup-restore/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#aws" id="id16"&gt;AWS ドキュメントメモ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#id1" id="id17"&gt;ドキュメント&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#id2" id="id18"&gt;概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#id3" id="id19"&gt;バックアップストレージ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#id4" id="id20"&gt;バックアップの保存期間&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#db" id="id21"&gt;DB スナップショットの作成&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#id5" id="id22"&gt;DB スナップショットからの復元&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#db-instance" id="id23"&gt;特定の時点への DB instanceの復元&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#fumi23" id="id24"&gt;fumi23 の疑問と結論&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#id6" id="id25"&gt;スナップショット取得 -&amp;gt; リストア手順&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#id9" id="id26"&gt;コマンド例&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/rds-backup-restore/#id10" id="id27"&gt;コマンドリファレンス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="aws"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id16"&gt;AWS ドキュメントメモ&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id17"&gt;ドキュメント&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://32imuf.com/aws/rds-backup-restore/(https:/docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_CommonTasks.BackupRestore.html)"&gt;Amazon RDS DB インスタンスのバックアップと復元&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id18"&gt;概要&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DBインスタンス全体をバックアップする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RDS は DB インスタンスのストレージボリュームのスナップショットを作成し、個々のデータベースだけではなく、DB インスタンス全体をバックアップします。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DB スナップショットを手動で作成して、DB インスタンスを手動でバックアップすることもできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DB インスタンスの最初のスナップショットには、フル DB インスタンスのデータが含まれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同じ DB インスタンスの後続のスナップショットは増分です。つまり、直近のスナップショット以降に変更されたデータのみが保存される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id19"&gt;バックアップストレージ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;リージョンあたり最大 100 個の手動スナップショットを作成できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 つの AWS リージョンで保持できる自動バックアップの最大数は 40 個&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id20"&gt;バックアップの保存期間&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;自動バックアップ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;コンソールを使用して DB インスタンスを作成した場合、デフォルトのバックアップ保持期間は 7 日&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バックアップ保持期間は変更できる (0 ～ 35 日間)  ※ &lt;code class="docutils literal"&gt;0&lt;/code&gt; == 自動バックアップが無効&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;手動スナップショット:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;スナップショットは期限切れになりません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自動バックアップとは異なり、手動スナップショットはバックアップ保持期間の影響を受けません。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="db"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id21"&gt;DB スナップショットの作成&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Single-AZ DB インスタンスでこの DB スナップショットを作成すると、I/O が短時間中断します。この時間は、DB インスタンスのサイズやクラスによって異なり、数秒から数分。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MariaDB、MySQL、Oracle、PostgreSQL の場合、バックアップはスタンバイから取得されるため、マルチ AZ 配置のバックアップ中プライマリで I/O アクティビティは中断しない。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; とのこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PostgreSQL DB インスタンスの場合、ログに記録されていないテーブルのデータはスナップショットから復元されないことがあります。詳細については、「&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_BestPractices.html#CHAP_BestPractices.PostgreSQL"&gt;PostgreSQL を使用するためのベストプラクティス&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Management Console から簡単にぽちぽちできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CLI のコマンドもシンプルそう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id22"&gt;DB スナップショットからの復元&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;復元元の DB スナップショットの名前を指定してから、復元から作成された新しい DB インスタンスの名前を指定する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DB スナップショットから既存の DB インスタンスに復元することはできません。復元すると新しい DB インスタンスが作成されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;パラメータグループ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;復元された DB インスタンスを適切なパラメータグループと関連付けることができるように、作成する DB スナップショットのパラメータグループを保持することをお勧めします。DB インスタンスを復元するときにパラメータグループを指定できます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;セキュリティグループ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS CLI を使用している場合、カスタムセキュリティグループを指定し、
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;restore-db-instance-from-db-snapshot&lt;/span&gt;&lt;/code&gt; コマンドに &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--vpc-security-group-ids&lt;/span&gt;&lt;/code&gt; オプションを含めることにより、インスタンスに関連付けることができます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;復元が完了し、新しい DB インスタンスが利用できるようになったらすぐに、復元の元となるスナップショットによって使用されているカスタムセキュリティグループを関連付けることができる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CLI &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;modify-db-instance&lt;/span&gt;&lt;/code&gt; コマンドを介して DB インスタンスを修正することで、これらの変更を適用する必要がある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オプショングループ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DB インスタンスを復元すると、DB スナップショットに関連付けられたオプショングループは、作成後に復元された DB インスタンスと関連付けられる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/cli/latest/reference/rds/restore-db-instance-from-db-snapshot.html"&gt;restore-db-instance-from-db-snapshot&lt;/a&gt; コマンドにだいぶオプションがあるので、たいがい間に合いそう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DB 立ち上がるまで待てるやつもある: &lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/wait/db-instance-available.html"&gt;db-instance-available&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="db-instance"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id23"&gt;特定の時点への DB instanceの復元&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DB インスタンスを特定の時点に復元し、新しい DB インスタンス を作成できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DB インスタンスを特定の時点に復元する場合、デフォルトの VPC セキュリティグループを選択するか、カスタム VPC セキュリティグループを DB インスタンスに適用できます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;復元された DB インスタンスは、デフォルトの DB パラメータグループとオプショングループに自動的に関連付けられます。ただし、カスタムパラメータグループとオプショングループは、復元中に指定することで適用できます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/restore-db-instance-to-point-in-time.html"&gt;restore-db-instance-to-point-in-time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fumi23"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id24"&gt;fumi23 の疑問と結論&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;パスワードはどうなるのじゃ?&lt;/p&gt;
&lt;p&gt;=&amp;gt; &lt;code class="docutils literal"&gt;マスターユーザー名&lt;/code&gt;, &lt;code class="docutils literal"&gt;パスワード&lt;/code&gt;, &lt;code class="docutils literal"&gt;DB名&lt;/code&gt; (そりゃそうだけれど) は、スナップショット取得元インスタンスと同じで復元された&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DB接続文字列に使うので気になった&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;パラメータグループとセキュリティグループは、結局、いつくっつけられるの?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;restore-db-instance-from-db-snapshot&lt;/span&gt;&lt;/code&gt; のオプションで指定するだけでよいの?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それとも、 DB 上がってから &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;modify-db-instance&lt;/span&gt;&lt;/code&gt; するの??&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=&amp;gt; &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;restore-db-instance-from-db-snapshot&lt;/span&gt;&lt;/code&gt; のオプションで指定するだけで OK&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;指定したパラメータグループとセキュリティグループが関連づけられた状態で DB が復元される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;後から変更したいものは、復元した DB が立ち上がってから  &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;modify-db-instance&lt;/span&gt;&lt;/code&gt; で変更できるよ、ということらしい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;エンドポイント変わっちゃうな.. (新しいインスタンス立ち上げなので)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;AWS Secrets Manager の value を AWS CLI で変更できる?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CNAME しておくのが良いのか..? DNS 切り替えめんどう...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=&amp;gt; なんかできそう: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/secretsmanager/latest/userguide/manage_update-secret.html"&gt;https://docs.aws.amazon.com/ja_jp/secretsmanager/latest/userguide/manage_update-secret.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;復元終わったら古いほう削除しないとだな (入れ替えたいので)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;というか、↓とかできないかな、できないのかな&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;あらかじめスナップショットを取得しておく ( &lt;code class="docutils literal"&gt;devfumi23&lt;/code&gt; から &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;devfumi23-s1&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;古いほうをリネーム ( &lt;code class="docutils literal"&gt;devfumi23&lt;/code&gt; -&amp;gt; &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;devfumi23-b1&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;スナップショットから復元 ( &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;devfumi23-s1&lt;/span&gt;&lt;/code&gt; から &lt;code class="docutils literal"&gt;devfumi23&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;古いほうを削除 (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;devfumi23-b1&lt;/span&gt;&lt;/code&gt; を削除)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=&amp;gt; できない。 DB識別子はさすがにリネームできない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=&amp;gt; DBインスタンスの削除はこちら: &lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/delete-db-instance.html"&gt;delete-db-instance&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DBインスタンスとそのすべての自動バックアップが削除される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;手動スナップショットは削除されない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id25"&gt;スナップショット取得 -&amp;gt; リストア手順&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;スナップショットを作成&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_CreateSnapshot.html"&gt;DB スナップショットの作成&lt;/a&gt; に書いてあるとおり&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CLI コマンドのほうもオプションちょっとしかないので、手動でやるなら AWS Management Console からで良いかなーという感じだった&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;スナップショットからの復元&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_RestoreFromSnapshot.html"&gt;DB スナップショットからの復元&lt;/a&gt; を見てやる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;こちらは指定できる or 指定すべきオプションが多い&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Management Console からぽちぽちやると間違えそうなので、 AWS CLI が良さそう (文字でとっておけるし)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;何某かからもキックできるし&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id26"&gt;コマンド例&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;スナップショットからの復元&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# サブネットグループ、セキュリティグループ、パラメーターグループ (とその他) を指定している&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 指定しないと、それぞれデフォルトのものが関連付けられる&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-3"&gt;&lt;/a&gt;$ aws --profile fumi23 rds restore-db-instance-from-db-snapshot &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-4"&gt;&lt;/a&gt;     --db-instance-identifier devfumi23-r1 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-5"&gt;&lt;/a&gt;     --db-snapshot-identifier devfumi23-s1 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-6"&gt;&lt;/a&gt;     --db-instance-class db.t2.micro &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-7"&gt;&lt;/a&gt;     --db-subnet-group-name dev-fumi23-db-subnet-gr-pv &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-8"&gt;&lt;/a&gt;     --multi-az &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-9"&gt;&lt;/a&gt;     --publicly-accessible &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-10"&gt;&lt;/a&gt;     --no-auto-minor-version-upgrade &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-11"&gt;&lt;/a&gt;     --vpc-security-group-ids sg-99999999999999999 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-12"&gt;&lt;/a&gt;     --copy-tags-to-snapshot &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-13"&gt;&lt;/a&gt;     --enable-cloudwatch-logs-exports postgresql &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-14"&gt;&lt;/a&gt;     --db-parameter-group-name  devfumi23-postgres11 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e671c71d1a8c413e8b01a2171114e514-15"&gt;&lt;/a&gt;     --no-deletion-protection
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オプションに指定すべき値がよくわからないなあ... というときは、
&lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/describe-db-instances.html"&gt;describe-db-instances&lt;/a&gt;
で、スナップショット取得元DBインスタンスの情報を取得してみるとだいたいわかる&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8f11ac42680b420fbeb9036703b82593-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 指定した DB インスタンスの情報を取得&lt;/span&gt;
&lt;a name="rest_code_8f11ac42680b420fbeb9036703b82593-2"&gt;&lt;/a&gt;$ aws --profile fumi23 rds describe-db-instances --db-instance-identifier devfumi23 &amp;gt; describe-db-devfumi23.json
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSON or YAML 形式のスケルトンも取得できる。それを &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--cli-input-json&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--cli-input-yaml&lt;/span&gt;&lt;/code&gt; に指定できる。&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_beb083c2ec504a65bb60050a68968dc7-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# スケルトンを YAML 形式で取得&lt;/span&gt;
&lt;a name="rest_code_beb083c2ec504a65bb60050a68968dc7-2"&gt;&lt;/a&gt;$ aws --profile fumi23 rds restore-db-instance-from-db-snapshot --generate-cli-skeleton yaml-input &amp;gt; restore-db-skeleton.yaml
&lt;a name="rest_code_beb083c2ec504a65bb60050a68968dc7-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# スケルトンを JSON 形式で取得&lt;/span&gt;
&lt;a name="rest_code_beb083c2ec504a65bb60050a68968dc7-4"&gt;&lt;/a&gt;$ aws --profile fumi23 rds restore-db-instance-from-db-snapshot --generate-cli-skeleton &amp;gt; restore-db-skeleton.json
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/rds-backup-restore/#id27"&gt;コマンドリファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/create-db-snapshot.html"&gt;create-db-snapshot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/cli/latest/reference/rds/restore-db-instance-from-db-snapshot.html"&gt;restore-db-instance-from-db-snapshot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/describe-db-instances.html"&gt;describe-db-instances&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/restore-db-instance-to-point-in-time.html"&gt;restore-db-instance-to-point-in-time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/wait/db-instance-available.html"&gt;db-instance-available&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/delete-db-instance.html"&gt;delete-db-instance&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>aws</category><guid>https://32imuf.com/aws/rds-backup-restore/</guid><pubDate>Sat, 20 Nov 2021 15:00:00 GMT</pubDate></item><item><title>ECS Fargate: コンテナごとの CPU使用率とメモリ使用率を見たい</title><link>https://32imuf.com/ecs/check-container-performance/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/ecs/check-container-performance/#cpu" id="id6"&gt;タスク定義.コンテナ定義に、コンテナごとの CPUユニット数・メモリリミットを設定しておく&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/ecs/check-container-performance/#id1" id="id7"&gt;こんな感じ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/ecs/check-container-performance/#id2" id="id8"&gt;参考ページ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/ecs/check-container-performance/#cloudwatch-logs-insights" id="id9"&gt;CloudWatch Logs Insights でクエリを投げて見る&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/ecs/check-container-performance/#id3" id="id10"&gt;こんな感じ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/ecs/check-container-performance/#id4" id="id11"&gt;参考ページ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="cpu"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/ecs/check-container-performance/#id6"&gt;タスク定義.コンテナ定義に、コンテナごとの CPUユニット数・メモリリミットを設定しておく&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;↓ で、 &lt;code class="docutils literal"&gt;%&lt;/code&gt; で見られるようになる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CloudWatch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; Container Insights&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; パフォーマンスのモニタリング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; ECS Tasks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; コンテナのパフォーマンス&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/ecs/check-container-performance/#id7"&gt;こんな感じ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/ecs/check-container-performance/container-performance.png" src="https://32imuf.com/images/ecs/check-container-performance/container-performance.png"&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;コンテナごとに設定した CPUユニット数・メモリリミットに対する &lt;code class="docutils literal"&gt;%&lt;/code&gt; だと思う&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;タスク数が複数だったら、その分のコンテナ分全部出る (e.g. 1タスク内にコンテナ 2つで、タスク数2 にしていたら 4コンテナ分出る)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/ecs/check-container-performance/#id8"&gt;参考ページ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://dev.classmethod.jp/articles/how-to-check-container-cpu-usage-by-container-insights/"&gt;Container Insights でコンテナ単位のCPU・メモリ使用率を表示させる方法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cloudwatch-logs-insights"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/ecs/check-container-performance/#id9"&gt;CloudWatch Logs Insights でクエリを投げて見る&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;↓ で、 &lt;code class="docutils literal"&gt;CPUユニット数&lt;/code&gt; と &lt;code class="docutils literal"&gt;メモリ (MiB)&lt;/code&gt; で見られるようになる&lt;/p&gt;
&lt;p&gt;※こちらの方法だと、タスク定義.コンテナ定義に「コンテナごとの CPUユニット数・メモリリミット」を設定していなくても見られる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CloudWatch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; Container Insights&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; パフォーマンスのモニタリング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; ECS Tasks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; コンテナのパフォーマンス&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; Container name をチェックして&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; View performance logs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; (Logs Insights ページにいくので) クエリの実行&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/ecs/check-container-performance/#id10"&gt;こんな感じ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://dev.classmethod.jp/articles/ways-to-check-fargate-cpu-usage/"&gt;CloudWatch Logs Insights でコンテナ単位のCPU・メモリ使用量などを確認する&lt;/a&gt; に書いていただいているとおりです、ありがとうございます。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ほかのクエリも投げられる =&amp;gt; 1時間平均なども取得できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/ecs/check-container-performance/#id11"&gt;参考ページ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://dev.classmethod.jp/articles/ways-to-check-fargate-cpu-usage/"&gt;CloudWatch Logs Insights でコンテナ単位のCPU・メモリ使用量などを確認する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS: &lt;a class="reference external" href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/ecs-tasks-fargate-memory-utilization/"&gt;Fargate で Amazon ECS タスクの高いメモリ使用率をモニタリングする方法を教えてください。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS: &lt;a class="reference external" href="https://aws.amazon.com/jp/blogs/mt/introducing-container-insights-for-amazon-ecs/"&gt;AmazonECS用のAmazonCloudWatch ContainerInsightsの紹介&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;調整のしかたとか載っていておもしろそうだった&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS: &lt;a class="reference external" href="https://aws.amazon.com/jp/blogs/containers/how-amazon-ecs-manages-cpu-and-memory-resources/"&gt;AmazonECSがCPUおよびメモリリソースを管理する方法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/deploy-container-insights-ECS-cluster.html#deploy-container-insights-ECS-existing"&gt;既存の Amazon ECS クラスターでの Container Insights のセットアップ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新規作成時であれば、Management Console で有効化できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>aws</category><guid>https://32imuf.com/ecs/check-container-performance/</guid><pubDate>Sat, 09 Oct 2021 15:00:00 GMT</pubDate></item><item><title>GitHub Actions で deploy 時に changelog を生成してタグを打ちたい</title><link>https://32imuf.com/github/actions/changelog-tag-deploy/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id1" id="id18"&gt;リファレンス・ガイド&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#github-actions" id="id19"&gt;GitHub Actions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#actions" id="id20"&gt;ワークフロー中で使った Actions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#case1-push-tag" id="id21"&gt;Case1: 直接 push する、 tag は手動トリガー時に入力できる&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id3" id="id22"&gt;条件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#workflow" id="id23"&gt;workflow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#case2-push-tag-protected-branch" id="id24"&gt;Case2: 直接 push する、 tag は手動トリガー時に入力できる (ちょっとだけ protected branch)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id5" id="id25"&gt;条件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id6" id="id26"&gt;workflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id9" id="id27"&gt;ちなみに&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#case3-protected-branch-pr-tag-auto-bump-changelog-tag" id="id28"&gt;Case3: protected branch に PR する、 tag は auto bump (changelog と tag のコミットがずれる)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id10" id="id29"&gt;条件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id13" id="id30"&gt;workflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#note" id="id31"&gt;Note&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#case4-protected-branch-pr-tag-auto-bump-changelog-tag" id="id32"&gt;Case4: protected branch に PR する、 tag は auto bump (changelog と tag のコミットがいっしょ!)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id14" id="id33"&gt;条件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id15" id="id34"&gt;workflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#changelog-next-tag" id="id35"&gt;1. changelog 生成, next tag 払い出し&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#tag-deploy" id="id36"&gt;2. tag 打ちして deploy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id16" id="id37"&gt;その他&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id18"&gt;リファレンス・ガイド&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="github-actions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id19"&gt;GitHub Actions&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/actions/reference/workflow-syntax-for-github-actions"&gt;GitHub Actionsのワークフロー構文&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="actions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id20"&gt;ワークフロー中で使った Actions&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Checkout V2: &lt;a class="reference external" href="https://github.com/actions/checkout"&gt;https://github.com/actions/checkout&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git-auto-commit Action: &lt;a class="reference external" href="https://github.com/stefanzweifel/git-auto-commit-action"&gt;https://github.com/stefanzweifel/git-auto-commit-action&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub Tag Action: &lt;a class="reference external" href="https://github.com/mathieudutour/github-tag-action"&gt;https://github.com/mathieudutour/github-tag-action&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create Pull Request: &lt;a class="reference external" href="https://github.com/peter-evans/create-pull-request"&gt;https://github.com/peter-evans/create-pull-request&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable Pull Request Auto-merge: &lt;a class="reference external" href="https://github.com/peter-evans/enable-pull-request-automerge"&gt;https://github.com/peter-evans/enable-pull-request-automerge&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;approve-pull-request-action: &lt;a class="reference external" href="https://github.com/juliangruber/approve-pull-request-action"&gt;https://github.com/juliangruber/approve-pull-request-action&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case1-push-tag"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id21"&gt;Case1: 直接 push する、 tag は手動トリガー時に入力できる&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id22"&gt;条件&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;private repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog push 対象のブランチに、 Branch protection rules の適用なし&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id23"&gt;workflow&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;ブランチを選択・タグ名を入力して、 &lt;code class="docutils literal"&gt;Run workflow&lt;/code&gt; (手動トリガー)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を生成&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ワークフローをトリガーしたブランチに、 changelog を commit &amp;amp; push&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog の commit に、入力したタグ名でタグ打ち&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;deploy&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/actions/managing-workflow-runs/manually-running-a-workflow"&gt;ワークフローの手動実行&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy (Case1)&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-3"&gt;&lt;/a&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-4"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 手動トリガー&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-6"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-7"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;tag-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-8"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ここで入力したタグ名でタグを打つ&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-9"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Enter&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tag&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(e.g.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;v1.2.3)'&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-10"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-12"&gt;&lt;/a&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-13"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# 必要な環境変数を定義する&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-14"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# ここで定義した env はすべての job から参照できる&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-15"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ap-northeast-1&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-16"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# (以下省略)&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-18"&gt;&lt;/a&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-19"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-20"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-22"&gt;&lt;/a&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-24"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-25"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG and create new tag&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-26"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-27"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-28"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# job の outputs として tag を打った (changelog を commit した) コミットの hash (SHA) を設定&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-29"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;tagged-sha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.push-changelog-tag.outputs.commit_hash }}&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-31"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-32"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-33"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-35"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build services&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-36"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-37"&gt;&lt;/a&gt;          &lt;span class="no"&gt;cp example.env .env&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-38"&gt;&lt;/a&gt;          &lt;span class="no"&gt;docker-compose build --parallel&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-39"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-40"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-41"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-42"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-43"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# root ユーザーで実行する&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-44"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# root で実行しないと、 towncrier が見たい dir の参照権限がなかったりして、fail する&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-45"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose run -u 0 --rm djangoapp towncrier --yes&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-46"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-47"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Stop and remove containers, networks and volumes&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-48"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose down -v&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-49"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always()&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-50"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-51"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Restore git dir owner and group&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-52"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# CHANGELOG は root:root で作成される&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-53"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# そのままだと git-auto-commit-action に失敗することがあるため元に戻す&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-54"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ※これは正しい解決策なのか否かちょっと自信なし&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-55"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo chown -R runner:docker .git/objects/&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-56"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-57"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Commit, push CHANGELOG and create new tag&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-58"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;push-changelog-tag&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-59"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;stefanzweifel/git-auto-commit-action@v4&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-60"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-61"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;commit_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Updated CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-62"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 手動トリガーで受け取ったタグ名でタグを打つ&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-63"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 手動トリガー時に受け取った inputs はこんな風に参照できる&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-64"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;tagging_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.inputs.tag-name }}&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-65"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-66"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-67"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-68"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-69"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# changelog job が正常終了したらこの job を実行する (直列で実行する)&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-70"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# needs を指定しないと並列実行される&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-71"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;needs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-72"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;changelog&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-73"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-74"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-75"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-76"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-77"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-78"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# すべての tag も fetch する&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-79"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# これをつけないと (デフォルトだと) 、ワークフローをトリガーした ref/SHA のコミットひとつだけが fetch される&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-80"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;fetch-depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-81"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# changelog job で tag を打った (changelog を commit した) コミットをチェックアウトする&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-82"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# ※ changelog + tag のコミットを deploy したいため&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-83"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# needs に指定した job の outputs はこんな風に参照できる&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-84"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ needs.changelog.outputs.tagged_hash }}&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-85"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-86"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set tagged sha&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-87"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;set-tag-sha&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-88"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# [確認用] チェックアウトしたブランチの最新の commit を取得&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-89"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-90"&gt;&lt;/a&gt;          &lt;span class="no"&gt;TAGGED_SHA=$(git log -1 --format='%H')&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-91"&gt;&lt;/a&gt;          &lt;span class="no"&gt;echo $TAGGED_SHA&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-92"&gt;&lt;/a&gt;          &lt;span class="no"&gt;echo "::set-output name=tag-sha::$TAGGED_SHA"&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-93"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-94"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-ref&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-95"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.ref }}"&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-96"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-sha&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-97"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーしたときの SHA&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-98"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.sha }}"&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-99"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo changelog-tagged_hash&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-100"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# changelog job で tag を打った SHA&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-101"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# このワークフロー中で commit したので、 github.sha より一つ進んでいる&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-102"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ needs.changelog.outputs.tagged_hash }}"&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-103"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo tag-sha&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-104"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# チェックアウトしたブランチの最新の commit の SHA&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-105"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# == changelog-tagged_hash&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-106"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ steps.set-tag-sha.outputs.tag-sha }}"&lt;/span&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-107"&gt;&lt;/a&gt;
&lt;a name="rest_code_f37f9a30864a43b4a3f07a3513d4e14f-108"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# あとは deploy する (省略)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case2-push-tag-protected-branch"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id24"&gt;Case2: 直接 push する、 tag は手動トリガー時に入力できる (ちょっとだけ protected branch)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id25"&gt;条件&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;private repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog push 対象のブランチに、 Branch protection rules の適用あり&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Require pull request reviews before merging: OFF&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Require status checks to pass before merging: ON&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include administrators: OFF&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id26"&gt;workflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Case1 と同じ&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_727f4ef884cf47c4a9c46e9c37a18888-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_727f4ef884cf47c4a9c46e9c37a18888-2"&gt;&lt;/a&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_727f4ef884cf47c4a9c46e9c37a18888-3"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_727f4ef884cf47c4a9c46e9c37a18888-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ここだけ変える&lt;/span&gt;
&lt;a name="rest_code_727f4ef884cf47c4a9c46e9c37a18888-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_727f4ef884cf47c4a9c46e9c37a18888-6"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# 管理者権限を持つユーザーで repo scope の PAT を作成し、&lt;/span&gt;
&lt;a name="rest_code_727f4ef884cf47c4a9c46e9c37a18888-7"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# GitHub Actions の secrets に登録しておく&lt;/span&gt;
&lt;a name="rest_code_727f4ef884cf47c4a9c46e9c37a18888-8"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.REPO_SCOPED_PAT }}&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;個人アクセストークンを使用する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/actions/reference/encrypted-secrets"&gt;暗号化されたシークレット&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id27"&gt;ちなみに&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Branch protection rules のうち、以下のいずれかもしくは両方が &lt;code class="docutils literal"&gt;ON&lt;/code&gt; の場合は NG です。
workflow は fail します (changelog の push に失敗する) 。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Require pull request reviews before merging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自分のローカルから push するときは、これ ON でも Include administrators が OFF なら push できるんだけれども、
なにか、PAT の権限足すといけるのかもしれない (けれどあまり強権限持たせたくない..)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それに、管理者だからって、自分の頭で気をつけるんじゃなくて GitHub に助けて (チェックして) もらいたい...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include administrators&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case3-protected-branch-pr-tag-auto-bump-changelog-tag"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id28"&gt;Case3: protected branch に PR する、 tag は auto bump (changelog と tag のコミットがずれる)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id29"&gt;条件&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;private repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog push 対象のブランチに、 Branch protection rules の適用あり&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Require pull request reviews before merging: ON&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Require status checks to pass before merging: ON (今回の場合は、以下の3つを指定)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ci (自分のところで用意している CI)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;push イベントで起動 (branch は特に絞り込んでいません)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/marketplace/task-list-completed"&gt;task-list-completed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/marketplace/actions/wip"&gt;WIP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include administrators: ON&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リポジトリ内のプルリクエストの自動マージを許可: ON&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/github/administering-a-repository/configuring-pull-request-merges/managing-auto-merge-for-pull-requests-in-your-repository"&gt;リポジトリ内のプルリクエストの自動マージを管理する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request"&gt;プルリクエストを自動的にマージする&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id30"&gt;workflow&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;ブランチを選択して、 &lt;code class="docutils literal"&gt;Run workflow&lt;/code&gt; (手動トリガー)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;タグ version の bump up は自動でやってくれるので、通常の実行時はタグ名を指定しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デフォルトが &lt;code class="docutils literal"&gt;Patch&lt;/code&gt; になっているので、 &lt;code class="docutils literal"&gt;Minor&lt;/code&gt; or &lt;code class="docutils literal"&gt;Major&lt;/code&gt; の version を bump up したいときは、 &lt;code class="docutils literal"&gt;custom_tag&lt;/code&gt; を指定する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ちょっとまだどんな風に version up していくか見えていないので&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を生成&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ワークフローをトリガーしたコミットにタグ打ち (タグのバージョンは自動 bump up)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;changelog の PR が merge されるのをワークフロー中で待てないので、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;あきらめて「ワークフローをトリガーしたコミット」にタグを打つ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog のコミットは、「タグを打ったコミット」より後の別のコミットになる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を PR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog の PR の自動マージを有効化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を PR を自動 approve&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;deploy&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy (Case3)&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-3"&gt;&lt;/a&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-4"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-6"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;custom_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-7"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'メジャー/マイナーバージョンをインクリメントしたいときのみ指定してください&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(e.g.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1.2.0)'&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-9"&gt;&lt;/a&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-10"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ap-northeast-1&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-11"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# (以下省略)&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-13"&gt;&lt;/a&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-14"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-15"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-17"&gt;&lt;/a&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-19"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-20"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG and create new tag&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-21"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-22"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-23"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# changelog job の outputs として version を bump したタグ名設定&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-24"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;new_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.create-tag.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-26"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-27"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-28"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-30"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build services&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-31"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-32"&gt;&lt;/a&gt;          &lt;span class="no"&gt;cp example.env .env&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-33"&gt;&lt;/a&gt;          &lt;span class="no"&gt;docker-compose build --parallel&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-34"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-35"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-37"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-38"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose run -u 0 --rm djangoapp towncrier --yes&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-39"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-40"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Stop and remove containers, networks and volumes&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-41"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose down -v&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-42"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always()&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-44"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Bump version and push tag&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-45"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# changelog の PR が merge されるのをワークフロー中で待てないので、&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-46"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# あきらめて「ワークフローをトリガーしたコミット」にタグを打つ。&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-47"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# changelog のコミットは、「タグを打ったコミット」より後の別のコミットになる。&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-48"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;create-tag&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-49"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mathieudutour/github-tag-action@v5.6&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-50"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# main 以外のブランチで実行した場合は `v1.2.3-{branch_name}.0` のようなタグがつくため、&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-51"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# main ブランチの bump には影響しない。&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-52"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ※ custom_tag に、 main ブランチのタグと同じ形式のタグ名を指定すると影響する&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-53"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-54"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# secrets.GITHUB_TOKEN は github.token と同義だそうです&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-55"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-56"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 手動トリガー時に custom_tag を受け取った場合は、&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-57"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 受け取ったタグ名でタグを打つ&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-58"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;custom_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.inputs.custom_tag }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-59"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-60"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create Pull Request&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-61"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpr&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-62"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-63"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-64"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;TAG_MAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.create-tag.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-65"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-66"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PR_CHANGELOG_PAT }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-67"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'deploy/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-68"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;commit-message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Updated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CHANGELOG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-69"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CHANGELOG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-70"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# どのコミットにタグを打ったかわからなくならないようにメモ↓&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-71"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Commit&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SHA:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;github.sha&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-72"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-73"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Enable Pull Request Automerge&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-74"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.cpr.outputs.pull-request-operation == 'created'&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-75"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/enable-pull-request-automerge@v1&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-76"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-77"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# repo scope の PAT を作成し、&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-78"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# GitHub Actions の secrets に登録しておく&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-79"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PR_CHANGELOG_PAT }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-80"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;pull-request-number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.cpr.outputs.pull-request-number }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-81"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;merge-method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;squash&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-82"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-83"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Auto approve Pull Request&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-84"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.cpr.outputs.pull-request-operation == 'created'&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-85"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;juliangruber/approve-pull-request-action@v1&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-86"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-87"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-88"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.cpr.outputs.pull-request-number }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-89"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-90"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-91"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-92"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-93"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;needs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-94"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;changelog&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-95"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-96"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-97"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-98"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-99"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-100"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# changelog job で タグを打ったコミットをチェックアウトする&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-101"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# とはいえ、「ワークフローをトリガーしたコミット == タグを打ったコミット」なので、&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-102"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 正直付けなくて良い&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-103"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;fetch-depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-104"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ needs.changelog.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-105"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-106"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set tagged sha&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-107"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;set-tag-sha&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-108"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# [確認用] チェックアウトしたブランチの最新の commit を取得&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-109"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-110"&gt;&lt;/a&gt;          &lt;span class="no"&gt;TAGGED_SHA=$(git log -1 --format='%H')&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-111"&gt;&lt;/a&gt;          &lt;span class="no"&gt;echo $TAGGED_SHA&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-112"&gt;&lt;/a&gt;          &lt;span class="no"&gt;echo "::set-output name=tag-sha::$TAGGED_SHA"&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-113"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-114"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-ref&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-115"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.ref }}"&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-116"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-sha&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-117"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーしたときの SHA&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-118"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.sha }}"&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-119"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo tag-sha&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-120"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# チェックアウトしたブランチの最新の commit の SHA&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-121"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# == changelog job で tag を打った SHA&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-122"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# == github-sha&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-123"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ steps.set-tag-sha.outputs.tag-sha }}"&lt;/span&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-124"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c45b51b354a44d595fc9841206cbb08-125"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# あとは deploy する (省略)&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="note"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id31"&gt;Note&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create Pull Request, Enable Pull Request Automerge, Auto approve Pull Request の &lt;code class="docutils literal"&gt;token&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;github-token&lt;/span&gt;&lt;/code&gt; は、
以下のとおり指定しないとうまくいかない (&lt;cite&gt;Can not approve your own pull request&lt;/cite&gt; になっちゃう)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Create Pull Request: &lt;code class="docutils literal"&gt;secrets.PR_CHANGELOG_PAT&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable Pull Request Automerge: &lt;code class="docutils literal"&gt;secrets.PR_CHANGELOG_PAT&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Auto approve Pull Request: &lt;code class="docutils literal"&gt;secrets.GITHUB_TOKEN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;※ &lt;a class="reference external" href="https://github.com/peter-evans/enable-pull-request-automerge#example"&gt;https://github.com/peter-evans/enable-pull-request-automerge#example&lt;/a&gt; に書いてある順番&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例えば、1 は &lt;code class="docutils literal"&gt;secrets.GITHUB_TOKEN&lt;/code&gt; も指定可能ですが、そうすると、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;PR つくるひと -&amp;gt; 2. PR の自動マージ有効化するひと -&amp;gt; 3. PR を approve するひと =&amp;gt; 1 と 3 がいっしょになっちゃう!!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case4-protected-branch-pr-tag-auto-bump-changelog-tag"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id32"&gt;Case4: protected branch に PR する、 tag は auto bump (changelog と tag のコミットがいっしょ!)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id33"&gt;条件&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Case3 と同じ&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id34"&gt;workflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;workflow は二本用意します&lt;/p&gt;
&lt;div class="section" id="changelog-next-tag"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id35"&gt;1. changelog 生成, next tag 払い出し&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;ブランチを選択して、 &lt;code class="docutils literal"&gt;Run workflow&lt;/code&gt; (手動トリガー)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;タグ version の bump up は自動でやってくれるので、通常の実行時はタグ名を指定しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デフォルトが &lt;code class="docutils literal"&gt;Patch&lt;/code&gt; になっているので、 &lt;code class="docutils literal"&gt;Minor&lt;/code&gt; or &lt;code class="docutils literal"&gt;Major&lt;/code&gt; の version を bump up したいときは、 &lt;code class="docutils literal"&gt;custom_tag&lt;/code&gt; を指定する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;デフォルトは変えられます&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bump up したタグ名 (&lt;code class="docutils literal"&gt;next tag&lt;/code&gt;) 払い出し&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;タグ打ちはまだしない (&lt;code class="docutils literal"&gt;dry_run: true&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を生成&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;changelog の version にも &lt;code class="docutils literal"&gt;next tag&lt;/code&gt; を指定&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を PR&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;deploy&lt;/code&gt; ラベルをつける&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;body に 3 で払い出した &lt;code class="docutils literal"&gt;next tag&lt;/code&gt; を書いておく&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog の PR の自動マージを有効化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を PR を自動 approve =&amp;gt; Automerge される&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Branch protection rules が適用されているブランチであれば、&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# main 以外のブランチでも実行できます&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-4"&gt;&lt;/a&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy dev (Case4-1. changelog)&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-6"&gt;&lt;/a&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-7"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-8"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-9"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;custom_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-10"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'メジャー/マイナーバージョンをインクリメントしたいときのみ指定してください&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(e.g.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1.2.0)'&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-12"&gt;&lt;/a&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-13"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-14"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-16"&gt;&lt;/a&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-18"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-19"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-20"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-22"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-23"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-24"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-26"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Bump tag version&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-27"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# bump up したタグ名を払い出す&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-28"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# main 以外のブランチで実行した場合は `v1.2.3-{branch_name}.0` のようなタグがつくため、&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-29"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;#  main ブランチの bump には影響しない。&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-30"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;#  ※ custom_tag に、 main ブランチのタグと同じ形式のタグ名を指定すると影響します&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-31"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bump-tag&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-32"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mathieudutour/github-tag-action@v5.6&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-33"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-34"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-35"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;custom_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.inputs.custom_tag }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-36"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# タグ打ちはまだしない&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-37"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;dry_run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-39"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build services&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-40"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-41"&gt;&lt;/a&gt;          &lt;span class="no"&gt;cp example.env .env&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-42"&gt;&lt;/a&gt;          &lt;span class="no"&gt;docker-compose build --parallel&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-43"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-44"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-45"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-46"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-47"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-48"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;TAG_MAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.bump-tag.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-49"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose run -u 0 --rm djangoapp towncrier --yes --version=${{ env.TAG_MAME }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-50"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-51"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Stop and remove containers, networks and volumes&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-52"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose down -v&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-53"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always()&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-54"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-55"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create Pull Request&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-56"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpr&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-57"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-58"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-59"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;TAG_MAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.bump-tag.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-60"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-61"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# repo scope の PAT を作成し、&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-62"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# GitHub Actions の secrets に登録しておく&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-63"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PR_CHANGELOG_PAT }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-64"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'deploy/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-65"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;commit-message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Updated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CHANGELOG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-66"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CHANGELOG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-67"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# `deploy` label を付けておく&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-68"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deploy, automerge&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-69"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# deploy workflow でタグ打ちするので、 next tag を body に書いておく&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-70"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ env.TAG_MAME }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-71"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-72"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Enable Pull Request Automerge&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-73"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.cpr.outputs.pull-request-operation == 'created'&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-74"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/enable-pull-request-automerge@v1&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-75"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-76"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PR_CHANGELOG_PAT }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-77"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;pull-request-number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.cpr.outputs.pull-request-number }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-78"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;merge-method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;squash&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-79"&gt;&lt;/a&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-80"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Auto approve Pull Request&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-81"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.cpr.outputs.pull-request-operation == 'created'&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-82"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;juliangruber/approve-pull-request-action@v1&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-83"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-84"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;a name="rest_code_8de45e61a81e47189e9be2430ee5b644-85"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.cpr.outputs.pull-request-number }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="tag-deploy"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id36"&gt;2. tag 打ちして deploy&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;PR の close イベントで起動&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以下の条件に合致する場合に deploy job を実行する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ワークフローをトリガーした PR が merge 済み、かつ、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ワークフローをトリガーした PR の labels に &lt;code class="docutils literal"&gt;deploy&lt;/code&gt; が含まれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog のコミットにタグ打ち&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;タグ名には、 PR の body から取得した next tag を使用する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;deploy&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy dev (Case4-2. deploy)&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-3"&gt;&lt;/a&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-4"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;pull_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;closed&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-7"&gt;&lt;/a&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-8"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ap-northeast-1&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-9"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# (以下省略)&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-11"&gt;&lt;/a&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-12"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-13"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-15"&gt;&lt;/a&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-17"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-18"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Tag and Deploy&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-19"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-20"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# PR が merge 済み、かつ、`deploy` label 付きの場合だけ実行&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-21"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ほかのトピックブランチが merge -&amp;gt; close されたときには、 Skip されるよ&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-22"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.event.pull_request.merged == true &amp;amp;&amp;amp; contains(github.event.pull_request.labels.*.name, 'deploy')&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-24"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-25"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-26"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-27"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーした PR の マージブランチの直近のマージコミット&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-28"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# がチェックアウトされる&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-30"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-ref&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-31"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーした PR のマージブランチ&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-32"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# 例えば、PR のブランチが main から生えていたら、 `main` 、&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-33"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;#  ブランチA から生えていたら `branchA`&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-34"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.ref }}"&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-35"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-sha&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-36"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーした PR の マージブランチの直近のマージコミット&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-37"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# == changelog の commit&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-38"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# (タイミングによっては違っちゃうこともあるかもしれない、頻度は低いが可能性としてはありえそう)&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-39"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.sha }}"&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-40"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-head-sha&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-41"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# PR のブランチで changelog を commit したときの commit&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-42"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.event.pull_request.head.sha }}"&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-44"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Push tag&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-45"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-46"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# ワークフローをトリガーした PR の body から取得した next tag&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-47"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;TAG_MAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.pull_request.body }}&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-48"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;COMMIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.sha }}&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-49"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-50"&gt;&lt;/a&gt;          &lt;span class="no"&gt;git tag $TAG_MAME $COMMIT&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-51"&gt;&lt;/a&gt;          &lt;span class="no"&gt;git push origin $TAG_MAME&lt;/span&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-52"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d5cd789df784ca4ae2dce43fec21b17-53"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# あとは deploy する (省略)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id37"&gt;その他&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GitHub Actions はスケジュール実行もできる。
&lt;code class="docutils literal"&gt;next tag&lt;/code&gt; がデフォルトの挙動通りで良いシーンでは、夜間に定期 deploy などしても。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/actions/reference/events-that-trigger-workflows#scheduled-events"&gt;スケジュールしたイベント&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>github</category><guid>https://32imuf.com/github/actions/changelog-tag-deploy/</guid><pubDate>Sun, 19 Sep 2021 15:00:00 GMT</pubDate></item><item><title>GraphQL メモ</title><link>https://32imuf.com/graphql/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#graphql" id="id4"&gt;GraphQL&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#id1" id="id5"&gt;リファレンス・ガイド&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#id2" id="id6"&gt;概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#tools" id="id7"&gt;ライブラリ・tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#id3" id="id8"&gt;耳より情報&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="graphql"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id4"&gt;GraphQL&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id5"&gt;リファレンス・ガイド&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GraphQL: &lt;a class="reference external" href="https://graphql.org/"&gt;https://graphql.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub の GraphQLガイド: &lt;a class="reference external" href="https://docs.github.com/ja/graphql/guides/introduction-to-graphql"&gt;https://docs.github.com/ja/graphql/guides/introduction-to-graphql&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id6"&gt;概要&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GraphQL だと、自分のほしいデータのみをクライアント側で絞り込んで取得できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;REST API: API のエンドポイントを叩くとデータが取得できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;公開されているAPI だと、自分には不要なデータも大量にとれてきたりする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;エンドポイントはひとつだけ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSON と SQL のあいのこみたいなクエリを書く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type 定義がサーバー側のテーブル定義のような雰囲気&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;画面に合わせて API を何本も書かないとならない、というようなことが解消できそうな印象を受けた&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tools"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id7"&gt;ライブラリ・tools&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.apollographql.com/docs/react/get-started/"&gt;https://www.apollographql.com/docs/react/get-started/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React 向けの GraphQL 呼び出し? ライブラリ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vue には同様に apollo というライブラリがある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/graphql/graphiql"&gt;https://github.com/graphql/graphiql&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;オートコンプリートが効く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クエリを書くのにDBのテーブル構造を知っている必要があるが、これを使うと IDE でオートコンプリートが効くので、
いちいちテーブル定義書とか ER図とにらめっこしなくて便利&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL Code Generator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;紹介しているブログ: &lt;a class="reference external" href="https://techlife.cookpad.com/entry/2021/03/24/123214"&gt;https://techlife.cookpad.com/entry/2021/03/24/123214&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL クエリを書いて、 Generator を叩くと TypeScript の型定義を自動で生成してくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL は JSON しか返さないので、型がついていない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これを使うと型がついた状態で Response してくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;yaml に hook = true のような設定があって、true にすると、クエリを叩くフックをつけることができて、クエリを叩くコードが自動生成される (べんりそうー: まだ使っていない)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;apollo の Generator もある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React だと、 GraphQL Code Generator のほうが良さそうな雰囲気 (会社の同僚談)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub の Explorer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/en/graphql/overview/explorer"&gt;https://docs.github.com/en/graphql/overview/explorer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL のクエリを書く練習はここでやると良さそう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id8"&gt;耳より情報&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/en/graphql"&gt;https://docs.github.com/en/graphql&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitHub が公開している GraphQL API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;練習用に良さそう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/trending"&gt;https://github.com/trending&lt;/a&gt; (星がたくさんついている repo を探せる) ライクなものを書いてみるとか&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://newrelic.com/jp"&gt;https://newrelic.com/jp&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここも GraphQL API があるもよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;システム・データ監視分析してくれるやつ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>graphql</category><guid>https://32imuf.com/graphql/note/</guid><pubDate>Wed, 15 Sep 2021 15:00:00 GMT</pubDate></item><item><title>Test メモ</title><link>https://32imuf.com/frontend-test/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend-test/note/#id1" id="id3"&gt;テストフレームワーク&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend-test/note/#id2" id="id4"&gt;設定など&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend-test/note/#id3"&gt;テストフレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Jest: &lt;a class="reference external" href="https://jestjs.io/ja/"&gt;https://jestjs.io/ja/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript のテスティングライブラリー&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React Testing Library: &lt;a class="reference external" href="https://testing-library.com/docs/react-testing-library/intro/"&gt;https://testing-library.com/docs/react-testing-library/intro/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React のテスティングライブラリー&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フレームワーク (React) 独自の render などの部分をサポートしてくれるもよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vue にも同様のものがある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend-test/note/#id4"&gt;設定など&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/kk6/d14da41f041296dd55c18fb3da8db788"&gt;jest で TypeScript のテストを書く場合の最低限度の設定など&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;kk6 さんありがとうございます!!!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>frontend-test</category><guid>https://32imuf.com/frontend-test/note/</guid><pubDate>Wed, 15 Sep 2021 15:00:00 GMT</pubDate></item><item><title>OpenAPI Document の自動生成</title><link>https://32imuf.com/django-rest-framework/generating-openapi-document/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;以前案件で Django REST framework のアプリケーションコードから OpenAPI document を自動生成する調査をしたので、自分用にここにもメモ。&lt;/p&gt;
&lt;p&gt;2020年9月時点の情報。&lt;/p&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id1" id="id7"&gt;調査対象とした自動生成ライブラリ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id2" id="id8"&gt;挙動まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id3" id="id9"&gt;生成方法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#api-schemas-drf" id="id10"&gt;API schemas (DRF 標準)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id4" id="id11"&gt;参考にしたページ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#drf-yasg-third-party-package" id="id12"&gt;drf-yasg (Third party package)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id5" id="id13"&gt;参考にしたページ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#openapi-document" id="id14"&gt;OpenAPI document があるとうれしいこと&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id6" id="id15"&gt;OpenAPI document を自動生成できるとうれしいこと&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id7"&gt;調査対象とした自動生成ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下のふたつ。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;API schemas (DRF 標準): &lt;a class="reference external" href="https://www.django-rest-framework.org/coreapi/schemas/"&gt;https://www.django-rest-framework.org/coreapi/schemas/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drf-yasg (Third party package): &lt;a class="reference external" href="https://github.com/axnsan12/drf-yasg"&gt;https://github.com/axnsan12/drf-yasg&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/marcgibbons/django-rest-swagger"&gt;https://github.com/marcgibbons/django-rest-swagger&lt;/a&gt; の後継&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;現在は、 &lt;a class="reference external" href="https://github.com/tfranzel/drf-spectacular"&gt;https://github.com/tfranzel/drf-spectacular&lt;/a&gt; で OpenAPI 3.0 ベースの OpenAPI document が生成できるもよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[理由]&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DRF の公式リファレンス &lt;a class="reference external" href="https://www.django-rest-framework.org/topics/documenting-your-api/#documenting-your-api"&gt;Documenting your API&lt;/a&gt; でオススメされているのはこの2つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web で検索してみると (現在有効なものだと) このふたつの情報がほとんど&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id8"&gt;挙動まとめ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;自分たちのアプリケーションコードに自動生成用のコードを追加する (※1) ことで生成結果をカスタマイズできる (より事実に近い状態の OpenAPI document を自動生成できる) もようだが、
以下はコード追加せずデフォルト状態で生成した (※2)&lt;/p&gt;
&lt;table class="colwidths-given"&gt;
&lt;colgroup&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 40%"&gt;
&lt;col style="width: 40%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head stub"&gt;&lt;p&gt;項目&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;API schemas (DRF 標準)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;drf-yasg&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;OpenAPI version&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;openapi: 3.0.2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;swagger: 2.0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;output format&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;yaml, json&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;yaml, json&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;UI&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;Swagger UI, ReDoc&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Swagger UI, ReDoc&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;path&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;コード通り生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;urls.py から生成しているもよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;method&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;コード通り生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;urls.py =&amp;gt; viewクラス/関数を見て生成しているもよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;operationId&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;実際のコードと相違がある&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;path + method に応じて機械的につけているもよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左 (命名法則には違いがある)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;description&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;コード通り生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;viewクラス/view関数のDocString が転記される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;ステータスコード&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;実際のコードと相違がある&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;method に応じて機械的につけているもよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GET: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PUT: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PATCH: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POST: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DELETE: 204&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;実際のコードと相違がある&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;method に応じて機械的につけているもよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GET: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PUT: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PATCH: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POST: 201&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DELETE: 204&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;parameters (path)&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;コード通り生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ただし、ID などDRF としては int 型で受け取るものも一律 &lt;code class="docutils literal"&gt;type: string&lt;/code&gt; として出力される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;requestBody&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;一部コード通り?生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Generic views を継承している view の場合は serializer_class に指定されたserializer から生成されるもよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;APIView を継承した view は生成されない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;responses&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;同上&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ただし、ClassView の場合は、すべての method に同じ response がついてしまう (例えば実際は何も返さない post にも出力されてしまう)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;tags&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;つかない&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;つく&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;起点 (ROOT_CONF or app/urls) で付き方は変わる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;※1 drf-yasg の場合。(試してないけど) View にデコレータをつけて、シリアライザやレスポンスコードなどを指定するようなイメージ。DRF 標準のほうでもできるのかは未確認。&lt;/p&gt;
&lt;p&gt;※2 drf-yasg のほうがチェックが甘く、多少ヘンテコなコードでも出力してくれた&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id9"&gt;生成方法&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="api-schemas-drf"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id10"&gt;API schemas (DRF 標準)&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;pyyaml, uritemplate を install&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;settings.DEFAULT_SCHEMA_CLASS&lt;/code&gt; が指定されていたら、 default の &lt;code class="docutils literal"&gt;rest_framework.schemas.openapi.AutoSchema&lt;/code&gt; に戻しておく&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以下のコマンドを実行する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_f15746ed00604c548b53e102a1acfa30-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python manage.py generateschema --title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fumi23API"&lt;/span&gt; --description&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[DFR標準] OpenAPI document 自動生成をテスト"&lt;/span&gt; --urlconf&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fumi23.urls'&lt;/span&gt; &amp;gt; openapi-schema.yaml
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;もしくは URLconf に以下を追記して、 runserver =&amp;gt;  &lt;a class="reference external" href="http://localhost:8000/openapi-schema/"&gt;http://localhost:8000/openapi-schema/&lt;/a&gt; にアクセス&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# urls.py (今回は ROOT_CONF に記載)&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.schemas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.renderers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OpenAPIRenderer&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# yaml file download&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'openapi-schema/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fumi23 API"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-11"&gt;&lt;/a&gt;        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[DFR標準] OpenAPI document 自動生成をテスト"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;urlconf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fumi23.urls'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;renderer_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OpenAPIRenderer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;permission_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllowAny&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-17"&gt;&lt;/a&gt;    &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'openapi-schema'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-18"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Swagger UI view&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-19"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ここ https://www.django-rest-framework.org/topics/documenting-your-api/#a-minimal-example-with-swagger-ui に記載の template も用意する&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'docs/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'swagger-ui.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'schema_url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'openapi-schema'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-23"&gt;&lt;/a&gt;    &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'swagger-ui'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id11"&gt;参考にしたページ&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.django-rest-framework.org/coreapi/schemas/"&gt;https://www.django-rest-framework.org/coreapi/schemas/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.django-rest-framework.org/community/3.10-announcement/"&gt;https://www.django-rest-framework.org/community/3.10-announcement/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://dev.to/errietta/documenting-a-django-api-with-openapi-and-dataclasses-1p6h"&gt;https://dev.to/errietta/documenting-a-django-api-with-openapi-and-dataclasses-1p6h&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="drf-yasg-third-party-package"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id12"&gt;drf-yasg (Third party package)&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;drf-yasg を install&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;settings.INSTALLED_APPS に &lt;code class="docutils literal"&gt;drf_yasg&lt;/code&gt; を追記&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URLconf に以下を追記して runserver =&amp;gt; &lt;a class="reference external" href="http://localhost:8000/swagger/"&gt;http://localhost:8000/swagger/&lt;/a&gt; にアクセス&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;re_path&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;drf_yasg.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;drf_yasg&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;schema_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fumi23 API"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;default_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'v3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[drf-yasg] OpenAPI document 自動生成をテスト"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://localhost:8000'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;urlconf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fumi23.urls'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;permission_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllowAny&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-19"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# yaml or json file download&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;re_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'^swagger(?P&amp;lt;format&amp;gt;\.json|\.yaml)$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;without_ui&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'schema-json'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-21"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# Swagger UI view&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'swagger/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_ui&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'swagger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'schema-swagger-ui'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-23"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ReDoc view&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-24"&gt;&lt;/a&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'redoc/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_ui&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'redoc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'schema-redoc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-25"&gt;&lt;/a&gt;    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id13"&gt;参考にしたページ&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/axnsan12/drf-yasg"&gt;https://github.com/axnsan12/drf-yasg&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://qiita.com/jnuank/items/be163ffb2a0c41a130be"&gt;https://qiita.com/jnuank/items/be163ffb2a0c41a130be&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://qiita.com/T0000N/items/c982fd9586763747fb11"&gt;https://qiita.com/T0000N/items/c982fd9586763747fb11&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="openapi-document"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id14"&gt;OpenAPI document があるとうれしいこと&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;コードを読んだり実際にアプリケーションを動かしてみなくても、API の I/F が一目瞭然&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;運用・保守していく立場からするととても助かる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フロントエンド の TypeScript の型ファイル? を自動生成できるもよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;人間が手でやると、書き間違えたり、誤認・誤解したりする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ちなみに、 Go など型がある言語だとどこも自動生成するものらしい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バックエンドの モックサーバーをたてられるもよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/zalando/connexion"&gt;https://github.com/zalando/connexion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/encode/apistar"&gt;https://github.com/encode/apistar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同じ起点 (OpenAPI Document) から実装 =&amp;gt; テストしていけば、例えばバックエンドとフロントエンドの担当者が違っても、認識齟齬によるバグと悲しい気持ちを生まない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id15"&gt;OpenAPI document を自動生成できるとうれしいこと&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;OAS に準拠した書き方を習得するのにちょっとだけ学習コストがかかるのと、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;書くのおっくうになっても、コード書けば勝手に yaml にしてくれたらうれしいかも&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django-rest-framework</category><guid>https://32imuf.com/django-rest-framework/generating-openapi-document/</guid><pubDate>Fri, 01 Jan 2021 15:00:00 GMT</pubDate></item><item><title>Jenkins のなぞ</title><link>https://32imuf.com/docker/jenkins/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/jenkins/#id1" id="id2"&gt;なぞ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/jenkins/#id2"&gt;なぞ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker (docker-compose) で動かしている Jenkins から Docker (docker-compose) を動かせるのが不思議だったので調べたメモ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jenkins 自体も Docker コンテナ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins の Dockerfile あり (こんな感じ↓)&lt;/p&gt;
&lt;pre class="code docker"&gt;&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; jenkins/jenkins:lts&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-3"&gt;&lt;/a&gt;&lt;span class="c"&gt;# install docker&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; root&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; curl -fL -o docker.tgz &lt;span class="s2"&gt;"https://download.docker.com/linux/static/test/x86_64/docker-19.03.9.tgz"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-6"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar --strip-components&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; -xvzf docker.tgz -C /usr/bin &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-7"&gt;&lt;/a&gt;    # dockerグループの ID は環境によって変わるので調べておく
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-8"&gt;&lt;/a&gt;    # cat /etc/group &lt;span class="p"&gt;|&lt;/span&gt; grep docker
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-9"&gt;&lt;/a&gt;    # docker グループ作成, &lt;span class="nv"&gt;グループID&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;999&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-10"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; groupadd -g &lt;span class="m"&gt;999&lt;/span&gt; docker &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-11"&gt;&lt;/a&gt;    # docker グループに jenkins ユーザーを追加してる
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-12"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; gpasswd -a jenkins docker
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-15"&gt;&lt;/a&gt;    apt install -y python-pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-16"&gt;&lt;/a&gt;    pip install docker-compose
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; jenkins&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins 立ち上げるための docker-compose.yml もあり (こんな感じ↓)&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'3'&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-3"&gt;&lt;/a&gt;&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-4"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;jenkins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-6"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-7"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-8"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-9"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# コンテナ外にポート開放してる&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-10"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2323:8080&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-11"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;privileged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-12"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-13"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# https://github.com/jenkinsci/docker/blob/master/README.md#configuring-reverse-proxy&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-14"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;JENKINS_OPTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'--prefix=/jenkins'&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-15"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-16"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# volume 使ってる、じゃないと down したら workspace 消えちゃうからね&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-17"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jenkins_home:/var/jenkins_home&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-18"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# ここがみそだ!&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-19"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# ホストの dockerデーモンが使用しているソケット (/var/run/docker.sock) をマウントして&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-20"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# jenkins からアクセスできるようにしている&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-21"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-22"&gt;&lt;/a&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-23"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;jenkins_home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-24"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Compose の外ですでに作成済みの volume なんだぜ&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-25"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins 画面の URL はこんな感じ: &lt;a class="reference external" href="http://our.web.application:2323/jenkins"&gt;http://our.web.application:2323/jenkins&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;workspace はこんな感じ: /var/jenkins_home/workspace/our_app&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;これは jenikins コンテナの中だった&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ここにコードがある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins ジョブのビルド開始時に workspace は削除される (そういう設定にしている)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ジョブ自体は、&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GitHub のリポジトリからアプリを clone してきて、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker イメージを build して、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;アプリ起動している (docker-compose up --build している)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番は gunicorn なので&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これだ! &lt;a class="reference external" href="https://www.mmj.ne.jp/mmjblog/docker-on-jenkins/"&gt;https://www.mmj.ne.jp/mmjblog/docker-on-jenkins/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ホストの docker デーモンを共有しているので、 docker (jenkins) から自分達の services が docker-compose up できているわけだ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ありがとうございました&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これもありがとうございます: &lt;a class="reference external" href="https://techblog.recochoku.jp/1544"&gt;https://techblog.recochoku.jp/1544&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/jenkinsci/docker/blob/master/README.md"&gt;https://github.com/jenkinsci/docker/blob/master/README.md&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>docker</category><guid>https://32imuf.com/docker/jenkins/</guid><pubDate>Wed, 23 Sep 2020 15:00:00 GMT</pubDate></item><item><title>React * Next.js * TypeScript で何か作ろう</title><link>https://32imuf.com/frontend/how-to-start-creating-react-app-with-nextjs-typescript/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/how-to-start-creating-react-app-with-nextjs-typescript/#id1" id="id3"&gt;つくったもの&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/how-to-start-creating-react-app-with-nextjs-typescript/#id2" id="id4"&gt;アプリの種をつくる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/how-to-start-creating-react-app-with-nextjs-typescript/#vercel-deploy" id="id5"&gt;Vercel へ deploy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/how-to-start-creating-react-app-with-nextjs-typescript/#id3"&gt;つくったもの&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fuminote-tools.vercel.app/"&gt;https://fuminote-tools.vercel.app/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/how-to-start-creating-react-app-with-nextjs-typescript/#id4"&gt;アプリの種をつくる&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 新しいNext.jsアプリを作成&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-2"&gt;&lt;/a&gt;npx create-next-app
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Starts the development server.&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-5"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; path/to/app
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-6"&gt;&lt;/a&gt;npm run dev
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Builds the app for production.&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-9"&gt;&lt;/a&gt;npm run build
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Runs the built app in production mode.&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-12"&gt;&lt;/a&gt;npm start
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# TypeScript の導入&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-15"&gt;&lt;/a&gt;npm install --save-dev typescript @types/react @types/node
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-16"&gt;&lt;/a&gt;touch tsconfig.json
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# dev サーバーの再起動が必要&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-18"&gt;&lt;/a&gt;npm run dev
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# React Bootstrap の導入&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://react-bootstrap.github.io/getting-started/introduction&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-22"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# _app.tsx に `import 'bootstrap/dist/css/bootstrap.min.css';`&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-23"&gt;&lt;/a&gt;npm install react-bootstrap bootstrap
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-25"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# styled components の導入&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://styled-components.com/&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-27"&gt;&lt;/a&gt;npm install --save styled-components
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-28"&gt;&lt;/a&gt;npm install @types/styled-components
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-30"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# styled components: Babel Plugin&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://styled-components.com/docs/tooling#babel-plugin&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-32"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# .babelrc も書く&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-33"&gt;&lt;/a&gt;npm install --save-dev babel-plugin-styled-components
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-35"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# yarn をインストール (こっから yarn でやってみる)&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json をそのまま使える&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-37"&gt;&lt;/a&gt;sudo npm install -g yarn
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-39"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Material-UI をインストール&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-40"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://material-ui.com/&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-41"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# React Bootstrap よりも使い方がややこしいが、 Component の種類が豊富&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-42"&gt;&lt;/a&gt;yarn add @material-ui/core @material-ui/icons
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-44"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# react-copy-to-clipboard をインストール&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-45"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://www.npmjs.com/package/react-copy-to-clipboard&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-46"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Clip board にコピーしてくれるさん&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-47"&gt;&lt;/a&gt;yarn add react-copy-to-clipboard
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-48"&gt;&lt;/a&gt;yarn add --dev @types/react-copy-to-clipboard
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-49"&gt;&lt;/a&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-50"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Axios をインストール&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-51"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://github.com/axios/axios&lt;/span&gt;
&lt;a name="rest_code_5b07f65163b94ae2811b233e23b2bc02-52"&gt;&lt;/a&gt;yarn add axios
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="vercel-deploy"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/how-to-start-creating-react-app-with-nextjs-typescript/#id5"&gt;Vercel へ deploy&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;&lt;p&gt;Vercel アカウントを作成し、GitHub 連携する (すでに持っている場合はスキップ)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://vercel.com/signup"&gt;https://vercel.com/signup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;やってみればわかる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub に deploy したいアプリの repository を作成して push する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub の自分のアカウントに &lt;a class="reference external" href="https://vercel.com/github"&gt;https://vercel.com/github&lt;/a&gt; (Vercel for GitHub) をインストールする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repository access を設定する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ここ &lt;a class="reference external" href="https://github.com/settings/installations"&gt;https://github.com/settings/installations&lt;/a&gt; でインストール済みの GitHub Apps が見られる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「すべての repositories にアクセスを許可する」 or 「選択した repositories のみにアクセスを許可する」が選べる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel から &lt;code class="docutils literal"&gt;Import Project&lt;/code&gt; (dashboard 画面右上の黒いボタン) する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;「Import Git Repository」を選択 &amp;gt; Continue &amp;gt; import したい Git repository の URL を入力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;手順3 で、 import したい repository にアクセスを許可をしていないと、ここで import したいプロジェクトが「ない」、と言われる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continue する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;勝手に deploy が始まって、終わったら ドメインが 3つ払い出される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;deploy 時にエラーが発生すると、 production にはデプロイしないでおいてくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>frontend</category><guid>https://32imuf.com/frontend/how-to-start-creating-react-app-with-nextjs-typescript/</guid><pubDate>Sat, 22 Aug 2020 15:00:00 GMT</pubDate></item><item><title>React: Hooks</title><link>https://32imuf.com/frontend/react/hook/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id1" id="id12"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id2" id="id13"&gt;ステートフック&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id3" id="id14"&gt;要するにフックとは？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id4" id="id15"&gt;副作用フック&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id5" id="id16"&gt;クリーンアップを必要としない副作用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id6" id="id17"&gt;クリーンアップを有する副作用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id7" id="id18"&gt;副作用のスキップによるパフォーマンス改善&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id8" id="id19"&gt;フックのルール&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id9" id="id20"&gt;ルール&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#eslint" id="id21"&gt;ESLint プラグイン&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id10" id="id22"&gt;独自フックの作成&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/react/hook/#id11" id="id23"&gt;その他のフック&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id12"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-intro.html"&gt;https://ja.reactjs.org/docs/hooks-intro.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-overview.html"&gt;https://ja.reactjs.org/docs/hooks-overview.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-state.html"&gt;https://ja.reactjs.org/docs/hooks-state.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-effect.html"&gt;https://ja.reactjs.org/docs/hooks-effect.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-rules.html"&gt;https://ja.reactjs.org/docs/hooks-rules.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-custom.html"&gt;https://ja.reactjs.org/docs/hooks-custom.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フック API リファレンス: &lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-reference.html"&gt;https://ja.reactjs.org/docs/hooks-reference.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id13"&gt;ステートフック&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Declare a new state variable, which we'll call "count"&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-5"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 現在の state の値と、それを更新するための関数とをペアにして返す&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 引数は state の初期値のみ&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-7"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state はオブジェクトでもそうでなくてもOK&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 引数として渡された state の初期値は最初のレンダー時にのみ使用される&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-9"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-11"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// count が 『state変数』&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-12"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state 変数には好きな名前をつけられる&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-13"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// useState は何を返すのか？ =&amp;gt; 現在の state と、それを更新するための関数とを、ペアにして返す&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-15"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state が「作成」されるのはコンポーネントの初回レンダー時だけ&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-16"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 通常、関数が終了すると変数は『消えて』しまうけれど、state 変数は React によって保持される&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-18"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 関数内では、`this.state.count` とかせずに、直接 count を使うことができる↓&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-19"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// setCount で、 state を更新↓&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-20"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-21"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-22"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/p&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-23"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-24"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-25"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-26"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-27"&gt;&lt;/a&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_1675bc07d7624f22a83cac7564511e68-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ExampleWithManyStates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Declare multiple state variables!&lt;/span&gt;
&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 1つのコンポーネント内で 2 回以上ステートフックを使うことができる&lt;/span&gt;
&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// React は useState を何度も呼び出す場合は、それらが全てのレンダー間で同じ順番で呼び出されるものと仮定する&lt;/span&gt;
&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-6"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFruit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'banana'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-7"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Learn Hooks'&lt;/span&gt; &lt;span class="p"&gt;}]);&lt;/span&gt;
&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_cf720ab5ba2143109d877908f22a8c2c-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id14"&gt;要するにフックとは？&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;関数コンポーネントに &lt;code class="docutils literal"&gt;state&lt;/code&gt; やライフサイクルといった React の機能を &lt;code class="docutils literal"&gt;接続する (hook into)&lt;/code&gt; ための関数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックは React をクラスなしに使うための機能なので、クラス内では機能しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React は &lt;code class="docutils literal"&gt;useState&lt;/code&gt; のような幾つかのビルトインのフックを提供する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;異なるコンポーネント間でステートフルな振る舞いを共有するために自分自身のフックを作成することもできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id15"&gt;副作用フック&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;副作用のためのフック&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;副作用 &lt;span class="pre"&gt;(side-effects)&lt;/span&gt;&lt;/code&gt;、あるいは省略して &lt;code class="docutils literal"&gt;作用 (effects)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;外部データの取得や購読 (subscription)、あるいは手動での DOM 更新&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;他のコンポーネントに影響することがあり、またレンダーの最中に実行することができない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React が DOM を更新した後で追加のコードを実行したい場合に使う&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クラスコンポーネントにおける &lt;code class="docutils literal"&gt;componentDidMount&lt;/code&gt;, &lt;code class="docutils literal"&gt;componentDidUpdate&lt;/code&gt; および &lt;code class="docutils literal"&gt;componentWillUnmount&lt;/code&gt; と同様の目的で使うもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React コンポーネントにおける副作用は 2 種類ある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クリーンアップコードを必要としない副作用&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必要とする副作用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id16"&gt;クリーンアップを必要としない副作用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ネットワークリクエストの送信、手動での DOM 改変、ログの記録、といったものがクリーンアップを必要としない&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Similar to componentDidMount and componentDidUpdate:&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-7"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// useEffect フックを使うことで、レンダー後に何かの処理をしないといけない、ということを React に伝えられる&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-8"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// Update the document title using the browser API&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// React が DOM を更新した後で、HTML ドキュメントのタイトルを設定する&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// DOM の更新後に呼び出される&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 非同期的に行われる (useEffect でスケジュールされた副作用はブラウザによる画面更新をブロックしない)&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 副作用はコンポーネント内で宣言されるので、props や state にアクセスすることが可能&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// デフォルトでは初回のレンダーも含む毎回のレンダー時にこの副作用関数が呼び出される&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-16"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`You clicked &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-17"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-19"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-20"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-21"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/p&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-22"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-23"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-24"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-25"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-26"&gt;&lt;/a&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_4851b675fcff46d5934fca5b0d2c5a2c-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;同期的に行う必要がある稀なケース（レイアウトの測定など）のために、&lt;code class="docutils literal"&gt;useEffect&lt;/code&gt; と同一の API を有する &lt;code class="docutils literal"&gt;useLayoutEffect&lt;/code&gt; という別のフックがある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id17"&gt;クリーンアップを有する副作用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;例えば何らかの外部のデータソースへの購読をセットアップしたいことがあります。そのような場合、メモリリークが発生しないようにクリーンアップが必要です！&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOnline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-6"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-7"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-8"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;setIsOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-10"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;ChatAPI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribeToFriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// Specify how to clean up after this effect:&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// すべての副作用は、それをクリーンアップするための関数を返すことができる&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 関数を返した場合、 React はクリーンアップのタイミングが来たらそれを実行してくれる、しゅごい&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// React はコンポーネントがアンマウントされるときにクリーンアップを実行する&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// ひとつ前のレンダーによる副作用を、次回の副作用を実行する前にもクリーンアップする&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-18"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;// 名前付き関数でなくともよい、アロー関数でもOK&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-19"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;ChatAPI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribeFromFriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-21"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-23"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Loading...'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-25"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-26"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'Online'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Offline'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cae759b2f5ca4e22ac13ff6cbc81d8c8-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id18"&gt;副作用のスキップによるパフォーマンス改善&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_6550283fdaea49d4834a37c18702aa9e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 再レンダー間で特定の値が変わっていない場合には副作用の適用をスキップするよう、React に伝えることができる&lt;/span&gt;
&lt;a name="rest_code_6550283fdaea49d4834a37c18702aa9e-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6550283fdaea49d4834a37c18702aa9e-3"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`You clicked &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6550283fdaea49d4834a37c18702aa9e-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Only re-run the effect if count changes&lt;/span&gt;
&lt;a name="rest_code_6550283fdaea49d4834a37c18702aa9e-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_6550283fdaea49d4834a37c18702aa9e-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// useEffect のオプションの第 2 引数として配列を渡す ↑&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id19"&gt;フックのルール&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id20"&gt;ルール&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;フックを呼び出すのはトップレベルのみ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ループや条件分岐、あるいはネストされた関数内で呼び出してはいけません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これを守ることで、コンポーネントがレンダーされる際に毎回同じ順番で呼び出されるということが保証される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックを呼び出すのは React の関数内のみ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;フックは React の関数コンポーネントの内部のみで呼び出してください。通常の JavaScript 関数内では呼び出さないでください。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="eslint"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id21"&gt;ESLint プラグイン&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;↑のルールを強制できる ESLint のプラグイン&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;linter plugin : &lt;a class="reference external" href="https://www.npmjs.com/package/eslint-plugin-react-hooks"&gt;https://www.npmjs.com/package/eslint-plugin-react-hooks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create React App ではデフォルトで含まれている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React はフックが呼ばれる順番に依存している&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;フックへの呼び出しの順番がレンダー間で変わらない限り、React はそれらのフックにローカル &lt;code class="docutils literal"&gt;state&lt;/code&gt; を割り当てることができる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id22"&gt;独自フックの作成&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;カスタムフックとは、名前が &lt;code class="docutils literal"&gt;use&lt;/code&gt; で始まり、ほかのフックを呼び出せる JavaScript の関数のことです&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;state を用いたロジックをコンポーネント間で再利用できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックは state を用いたロジックを再利用するものであって、state そのものを再利用するものではない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;カスタムフックを使う場所ごとで、内部の state や副作用は完全に分離している&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カスタムフックは、機能というよりはむしろ慣習のようなもの。関数の名前が &lt;code class="docutils literal"&gt;use&lt;/code&gt; から始まって、その関数が他のフックを呼び出している。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React のコンポーネントと違い、カスタムフックは特定のシグネチャを持つ必要はありません。
何を引数として受け取り、そして（必要なら）何を返すのか、といったことは自分で決めることができる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/react/hook/#id23"&gt;その他のフック&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;useContext&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;useReducer&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フック API リファレンス: &lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-reference.html"&gt;https://ja.reactjs.org/docs/hooks-reference.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>frontend</category><guid>https://32imuf.com/frontend/react/hook/</guid><pubDate>Sat, 01 Aug 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: TypeScript</title><link>https://32imuf.com/frontend/nextjs/learn-course/typescript/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#id1" id="id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#typescript" id="id3"&gt;TypeScript&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#how-to-set-up-next-js-with-typescript" id="id4"&gt;How to set up Next.js with TypeScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#next-js-specific-types" id="id5"&gt;Next.js Specific Types&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#static-generation-and-server-side-rendering" id="id6"&gt;Static Generation and Server-side Rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#api-routes" id="id7"&gt;API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#custom-app" id="id8"&gt;Custom App&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/excel/typescript"&gt;https://nextjs.org/learn/excel/typescript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="typescript"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#id3"&gt;TypeScript&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="how-to-set-up-next-js-with-typescript"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#id4"&gt;How to set up Next.js with TypeScript&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;プロジェクトルートディレクトリ直下に &lt;code class="docutils literal"&gt;tsconfig.json&lt;/code&gt; を作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript をインストールする&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b1c74fa115ff4eb187ef706705efe273-1"&gt;&lt;/a&gt;$ npm install --save-dev typescript @types/react @types/node
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;開発サーバーを再起動する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_aca6a987e35d45db90a2b8bb5f2fdf93-1"&gt;&lt;/a&gt;$ npm run dev
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サーバー再起動後、 Next.js は次のことをしてくれるでしょう。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;tsconfig.json&lt;/code&gt; ファイルの中身を入れてくれる。このファイルは、自分でカスタマイズしても良し。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;next-env.d.ts&lt;/span&gt;&lt;/code&gt; ファイルを作ってくれる。このファイルは、触ってはいけません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このファイルは、Next.js types が確実に TypeScript compiler にピックアップされるようにします。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで、 Next.js アプリで TypeScript が使えるようになります!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-js-specific-types"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#id5"&gt;Next.js Specific Types&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js 固有のタイプが使えるよ。&lt;/p&gt;
&lt;div class="section" id="static-generation-and-server-side-rendering"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#id6"&gt;Static Generation and Server-side Rendering&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next'&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-7"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-11"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;: &lt;span class="kt"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-12"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_1ca8b977e86346f6a0f479d5da5e65f3-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-9"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-10"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_ff5371dbe2d94a41aabe4d9711c3c55a-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="api-routes"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#id7"&gt;API Routes&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* TypeScript */&lt;/span&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next'&lt;/span&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;: &lt;span class="kt"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;: &lt;span class="kt"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-5"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-8"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* JavaScript */&lt;/span&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-9"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-10"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_a7e3c5c3ffaf4847ad246a141343f9da-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="custom-app"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend/nextjs/learn-course/typescript/#id8"&gt;Custom App&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_716155c29aa74ca3bc4e17e8934fe037-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// built-in type&lt;/span&gt;
&lt;a name="rest_code_716155c29aa74ca3bc4e17e8934fe037-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next/app'&lt;/span&gt;
&lt;a name="rest_code_716155c29aa74ca3bc4e17e8934fe037-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_716155c29aa74ca3bc4e17e8934fe037-4"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_716155c29aa74ca3bc4e17e8934fe037-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_716155c29aa74ca3bc4e17e8934fe037-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_716155c29aa74ca3bc4e17e8934fe037-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_716155c29aa74ca3bc4e17e8934fe037-8"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cc21459ed7c7420e9618efa35641868d-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cc21459ed7c7420e9618efa35641868d-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_cc21459ed7c7420e9618efa35641868d-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>frontend</category><guid>https://32imuf.com/frontend/nextjs/learn-course/typescript/</guid><pubDate>Fri, 24 Jul 2020 15:00:00 GMT</pubDate></item></channel></rss>