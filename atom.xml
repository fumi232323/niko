<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて</title><link>https://32imuf.com/</link><description>のてのて</description><atom:link href="https://32imuf.com/atom.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2020 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Wed, 08 Jan 2020 00:38:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Amazon SES でメールを送信する</title><link>https://32imuf.com/aws/ses-sending-email/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id2" id="id16"&gt;リファレンス/ガイド&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id3" id="id17"&gt;説明&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id4" id="id18"&gt;導入の流れ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id6" id="id19"&gt;1. ドメイン検証&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id7" id="id20"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id8" id="id21"&gt;2. Eメールの認証&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#spf-e" id="id22"&gt;SPF を使った E メールの認証&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id9" id="id23"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#dkim-e" id="id24"&gt;DKIM を使った E メールの認証&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id10" id="id25"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#dmarc" id="id26"&gt;3. DMARC に準拠する&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id12" id="id27"&gt;やりかた&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id13" id="id28"&gt;ドメインの DMARC ポリシーのセットアップ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#spf-dmarc" id="id29"&gt;SPF による DMARC への準拠&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#dkim-dmarc" id="id30"&gt;DKIM による DMARC への準拠&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id14" id="id31"&gt;4. 本番運用するには...&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/aws/ses-sending-email/#id15" id="id32"&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id16"&gt;リファレンス/ガイド&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES とは: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES クイック スタート: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/quick-start.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/quick-start.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id17"&gt;説明&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html"&gt;Amazon SES (Amazon Simple Email Service)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES は、ユーザー自身の E メールアドレスとドメインを使用して E メールを送受信するための、簡単で費用効率の高い方法を提供する E メールプラットフォームです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id18"&gt;導入の流れ&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;「 &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domains.html"&gt;ドメイン検証&lt;/a&gt; 」もしくは「 &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-email-addresses.html"&gt;E メールアドレス検証&lt;/a&gt; 」する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eメールを認証する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Sender Policy Framework (SPF)  を使った E メールの認証&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ドメインキーアイデンティファイドメール (DKIM) を使った E メールの認証&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DMARC (Domain-based Message Authentication, Reporting and Conformance) に準拠する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ドメインの DMARC ポリシーのセットアップ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF による DMARC への準拠&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DKIM による DMARC への準拠&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番運用するには...&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id19"&gt;1. ドメイン検証&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;「E メールアドレスの検証」 or 「ドメイン検証」 のいずれかを行う必要がある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ドメインごと検証すると、対象ドメインのすべての E メールアドレスを検証することになるため、(そのドメインの) E メールアドレスを個別に検証する必要がない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「ドメイン検証」は、AWS リージョンごとに必要&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;検証対象のドメインが Route 53 の DNS サービスを使用していて、Route 53 用の同じアカウントで AWS マネジメントコンソール にサインインしている場合、
Amazon SES コンソール内からすぐに DNS サーバーを更新できるらしい (わたしは別の DNS プロバイダーでやった)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id20"&gt;やりかた&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このガイドのとおりにやれば、とくにハマることもなくできる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES でのドメインの検証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domains.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domains.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES でのドメインの検証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domain-procedure.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-domain-procedure.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;検証が完了すると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールでのドメインのステータスが「pending verification (検証中)」から「verified (検証済み)」に変わり、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES から通知 E メールが届く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールの「Send a Test Email」からテストメールを送信できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サンドボックス内にいる場合は、TOアドレスも検証する必要あり (&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/verify-email-addresses.html"&gt;Amazon SES での E メールアドレスの検証&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;届いたメールはこんな感じ↓&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/01_test-mail.png" src="https://32imuf.com/images/aws/ses-sending-email/01_test-mail.png"&gt;
&lt;/div&gt; &lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/02_test-mail-details.png" src="https://32imuf.com/images/aws/ses-sending-email/02_test-mail-details.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id21"&gt;2. Eメールの認証&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Amazon SES での E メールの認証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/authentication.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/authentication.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES では、E メールの送信に Simple Mail Transfer Protocol（SMTP）が使用されるが、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SMTP 自体は認証を提供しないので、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;SPF&lt;/code&gt;, &lt;code class="docutils literal"&gt;DKIM&lt;/code&gt;, &lt;code class="docutils literal"&gt;DMARC への準拠&lt;/code&gt; (後述) によって「送信ドメイン認証」対応し、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ISP に対して、わたしが送信するメールが「なりすましメール」ではないことを証明しましょう (もし誰かになりすまされたら気付けるようにしましょう)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="spf-e"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id22"&gt;SPF を使った E メールの認証&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;SPF: Sender Policy Framework&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;E メールのなりすましを防ぐために設計された E メールの検証標準&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ドメイン所有者は SPF を使用して、自分のドメインからメールを送信できるサーバーをメールプロバイダーに通知する (承認済みメールサーバーのリストをドメインの DNS 設定に公開する)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E メールプロバイダーは、ドメインからメッセージを受信すると、ドメインの DNS サーバーの SPF レコードをチェックして、承認されたサーバーから E メールが送信されたことを確認する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES における SPF を使った E メールの認証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/spf.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/spf.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon SES を介して E メールを送信すると、送信するメッセージはデフォルトで SPF チェックをパスするようになっているけれども、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オプションで、独自の SPF レコードを公開できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF レコードを公開することにより、DMARC に準拠できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id23"&gt;やりかた&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="https://32imuf.com/aws/ses-sending-email/#dmarc"&gt;3. DMARC に準拠する &amp;gt; SPF による DMARC への準拠&lt;/a&gt; を参照のこと&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;どうせやるのなら、 DMARC に準拠できるのが良いと思う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dkim-e"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id24"&gt;DKIM を使った E メールの認証&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DKIM: ドメインキーアイデンティファイドメール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;E メールメッセージに署名することで、自分のメッセージが本物であることと送信中に改ざんされていないことを ISP に証明するための標準規格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;送信者が暗号化キーで E メールメッセージを署名できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E メールプロバイダーはこの署名を使用して、メッセージが転送中に第三者によって改ざんされていないことを検証する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;詳しくは、 &lt;a class="reference external" href="http://dkim.org/"&gt;http://dkim.org/&lt;/a&gt; に書いてあるそうです&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES における DKIM を使った E メールの認証: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dkim.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dkim.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;「送信元」アドレスで使用するドメインでのみ Easy DKIM 設定が必要&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リージョンごとに Easy DKIM 設定が必要&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id25"&gt;やりかた&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="https://32imuf.com/aws/ses-sending-email/#dmarc"&gt;3. DMARC に準拠する &amp;gt; DKIM による DMARC への準拠&lt;/a&gt; を参照のこと&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;どうせやるのなら、 DMARC に準拠できるのが良いと思う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dmarc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id26"&gt;3. DMARC に準拠する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;書き途中&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://dmarc.org/"&gt;DMARC&lt;/a&gt;: Domain-based Message Authentication, Reporting and Conformance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SPF (Sender Policy Framework) およびドメインキーアイデンティファイドメール (DKIM) を使用して
メールスプーフィングを検出するためのメール認証プロトコルです (出典2)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF と DKIM を合わせて活用する技術で、「送信ドメイン認証関連の技術」「レポーティング」という機能がある。 (出典3)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF や DKIM それぞれ単体の送信ドメイン認証技術と、DMARC との大きな違いは、以下が挙げられます。 (出典4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;それぞれ (SPF or DKIM) の認証結果のどちらかが pass すれば良いこと&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メール受信者が直接みることができるメールヘッダ上の送信者情報 (From:ヘッダ) を認証すること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メール送信者が認証が失敗したメールの取り扱いを示すことができること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メール送信者が認証結果をメール受信者から受け取る仕組みが用意されていること&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPF や DKIM の合わせ技 (相互補完) + レポーティング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一番詳しくはここを見よ: &lt;a class="reference external" href="https://dmarc.org/"&gt;https://dmarc.org/&lt;/a&gt; (出典1)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出典:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;DMARC: &lt;a class="reference external" href="https://dmarc.org/"&gt;https://dmarc.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES での DMARC への準拠: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dmarc.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/dmarc.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;送信ドメイン認証技術「DMARC」によるなりすましメール対策とDMARCレポートの活用: &lt;a class="reference external" href="https://www.dekyo.or.jp/info/2019/02/seminar/5684/"&gt;https://www.dekyo.or.jp/info/2019/02/seminar/5684/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;なりすまし対策ポータルナリタイ: &lt;a class="reference external" href="https://www.naritai.jp/index.html"&gt;https://www.naritai.jp/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id27"&gt;やりかた&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id28"&gt;ドメインの DMARC ポリシーのセットアップ&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spf-dmarc"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id29"&gt;SPF による DMARC への準拠&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;書き途中&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;カスタムの MAIL FROM ドメインの設定: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/mail-from.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/mail-from.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;デフォルトでは、Amazon SES から送信するメッセージには、MAIL FROM ドメインとして amazonses.com のサブドメインが使用される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デフォルトの MAIL FROM ドメインが E メールを送信したアプリケーション (この場合は Amazon SES) と一致するため、Sender Policy Framework (SPF) 認証はこれらのメッセージを正常に検証するけれども、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カスタム MAIL FROM ドメインを設定することにより、E メールはドメインベースのメッセージ認証、レポート、および適合性 (DMARC: Domain-based Message Authentication, Reporting and Conformance) に準拠できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dkim-dmarc"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id30"&gt;DKIM による DMARC への準拠&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;書き途中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このガイドのとおりにやれば、とくにハマることもなくできる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amazon SES の Easy DKIM: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ドメインにおける Easy DKIM のセットアップ: &lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim-setup-domain.html"&gt;https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/easy-dkim-setup-domain.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;検証が完了すると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールでのドメインのステータスが「pending verification (検証中)」から「verified (検証済み)」に変わり、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES から通知 E メールが届く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES コンソールの「Send a Test Email」からテストメールを送信できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;届いたメールはこんな感じ (Easy DKIM セットアップ前となんだかちょっと違う)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/03_test-mail.png" src="https://32imuf.com/images/aws/ses-sending-email/03_test-mail.png"&gt;
&lt;/div&gt; &lt;div class="figure"&gt;
&lt;img alt="/images/aws/ses-sending-email/04_test-mail-details.png" src="https://32imuf.com/images/aws/ses-sending-email/04_test-mail-details.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id31"&gt;4. 本番運用するには...&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;バウンスや苦情の処理方法の検討&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/request-production-access.html"&gt;Amazon SES サンドボックスの外への移動&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もやる&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/aws/ses-sending-email/#id32"&gt;参考&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.wikipedia.org/wiki/DNS%E3%83%AC%E3%82%B3%E3%83%BC%E3%83%89%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E4%B8%80%E8%A6%A7"&gt;https://ja.wikipedia.org/wiki/DNSレコードタイプの一覧&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主なレコードの意味&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;A(Address) レコード&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ホスト名にIPv4 IPアドレスをマッピングする (返されるのはIPアドレス)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CNAME レコード&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;正規ホスト名に対する別名を定義する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;MX レコード&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;対象ドメイン宛のメールの配送先（メールサーバ）のホスト名を定義する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;TXT レコード&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ホスト名に関連付けるテキスト情報（文字列）を定義する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;送信ドメイン認証の認証情報などを記述する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>aws</category><guid>https://32imuf.com/aws/ses-sending-email/</guid><pubDate>Sun, 22 Dec 2019 15:00:00 GMT</pubDate></item><item><title>Django: メールを送信する</title><link>https://32imuf.com/django/email/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/email/#id2" id="id5"&gt;リファレンス/参考書籍など&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/email/#id3" id="id6"&gt;説明&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/email/#amazon-ses" id="id7"&gt;Amazon SES を使ってメール送信する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/email/#id5"&gt;リファレンス/参考書籍など&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/email/"&gt;https://docs.djangoproject.com/ja/2.2/topics/email/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1030026"&gt;現場で使える Django の教科書《実践編》&lt;/a&gt; A: メール送信の設定&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/email/#id6"&gt;説明&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;メールを送信する&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0b356b22c15345a9b5c7027265a3ab43-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;
&lt;a name="rest_code_0b356b22c15345a9b5c7027265a3ab43-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_0b356b22c15345a9b5c7027265a3ab43-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_0b356b22c15345a9b5c7027265a3ab43-4"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Subject here'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c1"&gt;# 件名&lt;/span&gt;
&lt;a name="rest_code_0b356b22c15345a9b5c7027265a3ab43-5"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Here is the message.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# 本文&lt;/span&gt;
&lt;a name="rest_code_0b356b22c15345a9b5c7027265a3ab43-6"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'from@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c1"&gt;# From アドレス&lt;/span&gt;
&lt;a name="rest_code_0b356b22c15345a9b5c7027265a3ab43-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'to@example.com'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;       &lt;span class="c1"&gt;# To アドレス&lt;/span&gt;
&lt;a name="rest_code_0b356b22c15345a9b5c7027265a3ab43-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;いろんなバックエンドがある&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/email/#email-backends"&gt;https://docs.djangoproject.com/ja/2.2/topics/email/#email-backends&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;コンソールに出すとか&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メール送らないダミーとか&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;開発用にメールを設定する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/email/#configuring-email-for-development"&gt;https://docs.djangoproject.com/ja/2.2/topics/email/#configuring-email-for-development&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これ使いそう&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d39c61dc4bd7424dbc3b5a5a3ba63308-1"&gt;&lt;/a&gt;$ python -m smtpd -n -c DebuggingServer localhost:1025
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="amazon-ses"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/email/#id7"&gt;Amazon SES を使ってメール送信する&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://pypi.org/project/django-ses/"&gt;https://pypi.org/project/django-ses/&lt;/a&gt; をインストール&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8dea7e6f380b4c6eb9d924962cbd44aa-1"&gt;&lt;/a&gt;$ pip install django-ses
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;settings に設定を追加する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;EMAIL_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'django_ses.SESBackend'&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 本当は settings には書かない&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'MY-ACCESS-KEY-ID'&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'MY-SECRET-ACCESS-KEY'&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# us-east-1 以外のAWSリージョンを使用する場合はこれも必要↓&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# AWS_SES_REGION_NAME = 'us-west-2'&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# AWS_SES_REGION_ENDPOINT = 'email.us-west-2.amazonaws.com'&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# DEFAULT_FROM_EMAIL: サイト管理者からの自動送信メールに使用するデフォルトの Email アドレス&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# SERVER_EMAIL: ADMINS や MANAGERS に送信されるエラーメッセージの送信元 Email アドレス&lt;/span&gt;
&lt;a name="rest_code_87e985fdbac849b793c4125bf2727189-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SERVER_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'no-reply &amp;lt;XXXXX@example.com&amp;gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SES を設定する&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://32imuf.com/aws/madanai/"&gt;Amazon SES でメールを送信する 書き途中&lt;/a&gt; を参照のこと&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django</category><guid>https://32imuf.com/django/email/</guid><pubDate>Sat, 07 Dec 2019 15:00:00 GMT</pubDate></item><item><title>django-allauth</title><link>https://32imuf.com/django/allauth/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id2" id="id10"&gt;リファレンスなど&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id3" id="id11"&gt;概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id4" id="id12"&gt;主な機能&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#github" id="id13"&gt;GitHub とソーシャル連携認証してみる&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id5" id="id14"&gt;ガイド&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id6" id="id15"&gt;手順&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id7" id="id16"&gt;できあがるレコード&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#settings" id="id17"&gt;settings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/allauth/#id8" id="id18"&gt;メールを設定した&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id10"&gt;リファレンスなど&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://django-allauth.readthedocs.io/en/latest/"&gt;https://django-allauth.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1030026"&gt;現場で使える Django の教科書《実践編》&lt;/a&gt; 2章&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id11"&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Integrated set of Django applications addressing authentication, registration, account management as well as 3rd party (social) account authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id12"&gt;主な機能&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ログイン&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ログアウト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;パスワード変更&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;パスワード再設定&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ユーザー登録&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ユーザー登録時にメールを送信して登録確認&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メールアドレスとパスワードでログイン&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ログイン失敗回数制限&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ソーシャル連携認証&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://python-social-auth-docs.readthedocs.io/en/latest/"&gt;https://python-social-auth-docs.readthedocs.io/en/latest/&lt;/a&gt; こういうのもある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;テンプレートも用意してくれている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="github"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id13"&gt;GitHub とソーシャル連携認証してみる&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id14"&gt;ガイド&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://django-allauth.readthedocs.io/en/latest/providers.html#github"&gt;https://django-allauth.readthedocs.io/en/latest/providers.html#github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id15"&gt;手順&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;GitHub に OAuth アプリケーションを登録する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/settings/developers"&gt;https://github.com/settings/developers&lt;/a&gt; &amp;gt; &lt;code class="docutils literal"&gt;OAuth Apps&lt;/code&gt;  &amp;gt; &lt;code class="docutils literal"&gt;Register a new OAuth application&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/00_register-oauth-application.png" src="https://32imuf.com/images/django/allauth/00_register-oauth-application.png"&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Authorization callback URL&lt;/code&gt;: サービスプロバイダが認可コードを返した後に Web アプリ側にリダイレクトするための URL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;django-allauth を使う場合はサービスプロバイダによって異なる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サービスプロバイダごとに異なるビュー関数が用意されているため&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定値は後から Update できるよ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Admin サイトで GitHub とソーシャル連携するために初期データを登録する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# django-allauth をインストールする&lt;/span&gt;
&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-2"&gt;&lt;/a&gt;$ pip3 install django-allauth
&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# マイグレーション&lt;/span&gt;
&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-5"&gt;&lt;/a&gt;$ python3 manage.py migrate
&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# スーパーユーザー作成&lt;/span&gt;
&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-7"&gt;&lt;/a&gt;$ python3 manage.py createsuperuser
&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Django アプリを起動&lt;/span&gt;
&lt;a name="rest_code_c2be8010d90b4af1869b0e9c02f5d0b0-9"&gt;&lt;/a&gt;$ python3 manage.py runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8181
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/admin/"&gt;http://localhost:8181/admin/&lt;/a&gt; へログインする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/admin/sites/site/"&gt;http://localhost:8181/admin/sites/site/&lt;/a&gt; にレコードが1件あることを確認する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/admin/socialaccount/socialapp/"&gt;http://localhost:8181/admin/socialaccount/socialapp/&lt;/a&gt; に GitHub に登録した OAuth アプリケーションの &lt;code class="docutils literal"&gt;Client ID&lt;/code&gt; と &lt;code class="docutils literal"&gt;Client Secret&lt;/code&gt; を登録する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;動作確認する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;admin サイトからログアウト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub からもログアウト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/accounts/login/"&gt;http://localhost:8181/accounts/login/&lt;/a&gt; へアクセス&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub リンク押下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/01_login.png" src="https://32imuf.com/images/django/allauth/01_login.png"&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/02_sign-in-to-github.png" src="https://32imuf.com/images/django/allauth/02_sign-in-to-github.png"&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/03_authorize-fuminote.png" src="https://32imuf.com/images/django/allauth/03_authorize-fuminote.png"&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;今いま callback URL がエラーになる =&amp;gt; メールを設定していないからかもしれない =&amp;gt; あとでやってみる&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/06_social-login-error.png" src="https://32imuf.com/images/django/allauth/06_social-login-error.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ログインできた!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/04_home.png" src="https://32imuf.com/images/django/allauth/04_home.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ソーシャル連携解除&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/accounts/social/connections/"&gt;http://localhost:8181/accounts/social/connections/&lt;/a&gt; でソーシャル連携解除できる&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/05_social-connections.png" src="https://32imuf.com/images/django/allauth/05_social-connections.png"&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id16"&gt;できあがるレコード&lt;/a&gt;&lt;/h3&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;auth_user&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Django サイトのユーザー&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;account_emailaddress&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Django サイトのユーザーと Email&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;socialaccount_socialtoken&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;サービスプロバイダから払いだされたトークン&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;socialaccount_socialaccount&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Django サイトのユーザーとサービスプロバイダから払いだされたトークンとを関連付けるソーシャルアカウント&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;サービスプロバイダから連携されたユーザー情報を保持&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;socialaccount_socialapp&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8181/admin/socialaccount/socialapp/"&gt;http://localhost:8181/admin/socialaccount/socialapp/&lt;/a&gt; で登録したサービスプロパイダ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;今回の場合だと GitHub に登録した OAuth アプリケーションの &lt;code class="docutils literal"&gt;Client ID&lt;/code&gt; と &lt;code class="docutils literal"&gt;Client Secret&lt;/code&gt; を保持&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;socialaccount_socialapp_sites&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;サービスプロパイダとサイトの紐付け&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id17"&gt;settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;settings.py&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Django settings for fufu project.&lt;/span&gt;

&lt;span class="sd"&gt;Generated by 'django-admin startproject' using Django 2.2.7.&lt;/span&gt;

&lt;span class="sd"&gt;For more information on this file, see&lt;/span&gt;
&lt;span class="sd"&gt;https://docs.djangoproject.com/en/2.2/topics/settings/&lt;/span&gt;

&lt;span class="sd"&gt;For the full list of settings and their values, see&lt;/span&gt;
&lt;span class="sd"&gt;https://docs.djangoproject.com/en/2.2/ref/settings/&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;


&lt;span class="c1"&gt;# Quick-start development settings - unsuitable for production&lt;/span&gt;
&lt;span class="c1"&gt;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&lt;/span&gt;

&lt;span class="c1"&gt;# SECURITY WARNING: keep the secret key used in production secret!&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'o=uce-pwytvkyjsg8vv12#5zvh765-w!ph==vxs#_(^nw(in$='&lt;/span&gt;

&lt;span class="c1"&gt;# SECURITY WARNING: don't run with debug turned on in production!&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Application definition&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# django-allauth ######&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.sites'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# django-allauth では sites フレームワーク必須&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth.account'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth.socialaccount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth.socialaccount.providers.github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# GitHub とソーシャル連携&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'django.middleware.security.SecurityMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.middleware.common.CommonMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.auth.middleware.AuthenticationMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.messages.middleware.MessageMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'django.middleware.clickjacking.XFrameOptionsMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'fufu.urls'&lt;/span&gt;

&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'BACKEND'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.template.backends.django.DjangoTemplates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'templates'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'APP_DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'OPTIONS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'context_processors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'django.template.context_processors.debug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'django.template.context_processors.request'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'django.contrib.auth.context_processors.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'django.contrib.messages.context_processors.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'fufu.wsgi.application'&lt;/span&gt;


&lt;span class="c1"&gt;# Database&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.db.backends.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'db.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;# Password validation&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&lt;/span&gt;

&lt;span class="n"&gt;AUTH_PASSWORD_VALIDATORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.contrib.auth.password_validation.MinimumLengthValidator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.contrib.auth.password_validation.CommonPasswordValidator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.contrib.auth.password_validation.NumericPasswordValidator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# Internationalization&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.2/topics/i18n/&lt;/span&gt;

&lt;span class="c1"&gt;# 日本語にするとテンプレートも勝手に日本語で表示される&lt;/span&gt;
&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ja'&lt;/span&gt;
&lt;span class="c1"&gt;# 英語にするとテンプレートも勝手に英語で表示される&lt;/span&gt;
&lt;span class="c1"&gt;# LANGUAGE_CODE = 'en-us'&lt;/span&gt;

&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Asia/Tokyo'&lt;/span&gt;

&lt;span class="n"&gt;USE_I18N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;USE_L10N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="c1"&gt;# Static files (CSS, JavaScript, Images)&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.2/howto/static-files/&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/static/'&lt;/span&gt;

&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# Authentication #&lt;/span&gt;
&lt;span class="c1"&gt;##################&lt;/span&gt;

&lt;span class="c1"&gt;# メールアドレスとパスワードで認証&lt;/span&gt;
&lt;span class="n"&gt;AUTHENTICATION_BACKENDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# デフォルト: これを残しておくと管理画面はユーザー名/パスワードで認証できる&lt;/span&gt;
    &lt;span class="s1"&gt;'django.contrib.auth.backends.ModelBackend'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'allauth.account.auth_backends.AuthenticationBackend'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# django-allauth を追加&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 認証⽅式を 「メールアドレスとパスワード」 に変更&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_AUTHENTICATION_METHOD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'email'&lt;/span&gt;
&lt;span class="c1"&gt;# ユーザー名は使⽤しない&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_USERNAME_REQUIRED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# django-allauth にはこれが必要&lt;/span&gt;
&lt;span class="n"&gt;SITE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;LOGIN_REDIRECT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'home'&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_LOGOUT_REDIRECT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/accounts/login/'&lt;/span&gt;

&lt;span class="c1"&gt;# ログアウトリンクログアウトさせたい場合 True&lt;/span&gt;
&lt;span class="c1"&gt;# (デフォルトはログアウト画面経由で POST リクエスト)&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_LOGOUT_ON_GET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# ユーザー登録時にメールアドレス確認を行う&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_EMAIL_VARIFICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'mandatory'&lt;/span&gt;
&lt;span class="c1"&gt;# ユーザー登録時にメールアドレス確認を行わない&lt;/span&gt;
&lt;span class="c1"&gt;# ACCOUNT_EMAIL_VARIFICATION = 'none'&lt;/span&gt;
&lt;span class="c1"&gt;# ユーザー登録画面でにEmailを必須項目にする&lt;/span&gt;
&lt;span class="n"&gt;ACCOUNT_EMAIL_REQUIRED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# AWS settings   #&lt;/span&gt;
&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# 本当は settings には書かない&lt;/span&gt;
&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'MY-ACCESS-KEY-ID'&lt;/span&gt;
&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'MY-SECRET-ACCESS-KEY'&lt;/span&gt;

&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# Email settings #&lt;/span&gt;
&lt;span class="c1"&gt;##################&lt;/span&gt;
&lt;span class="c1"&gt;# Amazon SES を使う場合&lt;/span&gt;
&lt;span class="c1"&gt;# https://pypi.org/project/django-ses/&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'django_ses.SESBackend'&lt;/span&gt;
&lt;span class="c1"&gt;# us-east-1 以外のAWSリージョンを使用する場合はこれも必要↓&lt;/span&gt;
&lt;span class="c1"&gt;# AWS_SES_REGION_NAME = 'us-west-2'&lt;/span&gt;
&lt;span class="c1"&gt;# AWS_SES_REGION_ENDPOINT = 'email.us-west-2.amazonaws.com'&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SERVER_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'no-reply &amp;lt;XXXXX@example.com&amp;gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/allauth/#id18"&gt;メールを設定した&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;callback URL はエラーにならず、 &lt;code class="docutils literal"&gt;Confirm &lt;span class="pre"&gt;E-mail&lt;/span&gt; Address&lt;/code&gt; メール が送られてくるようになった。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Confirm E-mail Address メールが送られてくるのは、 settings に &lt;code class="docutils literal"&gt;ユーザー登録時にメールアドレス確認を行う&lt;/code&gt; と設定しているためです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メールの設定は &lt;a class="reference external" href="https://32imuf.com/django/email/"&gt;Django: メールを送信する&lt;/a&gt; を参照のこと&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流れ&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;ログイン画面で &lt;code class="docutils literal"&gt;GitHub&lt;/code&gt; リンク押下する&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/11_sign_in.png" src="https://32imuf.com/images/django/allauth/11_sign_in.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub 側のサインイン画面へ遷移する&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/12_continue_to_fuminote.png" src="https://32imuf.com/images/django/allauth/12_continue_to_fuminote.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub でサインインすると、自分のアプリのホーム画面へ遷移する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同時に、 GitHub に登録してある Email address に &lt;code class="docutils literal"&gt;Confirm &lt;span class="pre"&gt;E-mail&lt;/span&gt; Address&lt;/code&gt; メールが届く。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/13_confirm_email.png" src="https://32imuf.com/images/django/allauth/13_confirm_email.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Confirm &lt;span class="pre"&gt;E-mail&lt;/span&gt; Address&lt;/code&gt; メールに記載のリンクを押下すると、 E-mail Address 確認画面へ遷移する。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/14_confirm_email_screen.png" src="https://32imuf.com/images/django/allauth/14_confirm_email_screen.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm ボタンを押下するとホーム画面が表示される。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/django/allauth/15_home.png" src="https://32imuf.com/images/django/allauth/15_home.png"&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django</category><guid>https://32imuf.com/django/allauth/</guid><pubDate>Mon, 02 Dec 2019 15:00:00 GMT</pubDate></item><item><title>Django: 認証システム django.contrib.auth</title><link>https://32imuf.com/django/auth/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/auth/#id2" id="id4"&gt;リファレンスなど&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/auth/#id3" id="id5"&gt;説明&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/auth/#id4"&gt;リファレンスなど&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/auth/"&gt;https://docs.djangoproject.com/ja/2.2/topics/auth/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1030026"&gt;現場で使える Django の教科書《実践編》&lt;/a&gt; 2章&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/auth/#id5"&gt;説明&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Djangoの認証は、認証機能と権限機能の両方を共に提供しています。そして、一般的に、これらの機能を合わせて認証システムと呼びます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ユーザー登録/ユーザー情報変更とかはない感じ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;テンプレートは用意されていないので、使用したいビューのテンプレートを自分で作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定ディレクトリの &lt;code class="docutils literal"&gt;urls.py&lt;/code&gt; に &lt;code class="docutils literal"&gt;django.contrib.auth.urls&lt;/code&gt; の include を追加すると、 以下の URL パターンが設定される&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/auth/default/#module-django.contrib.auth.views"&gt;https://docs.djangoproject.com/ja/2.2/topics/auth/default/#module-django.contrib.auth.views&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_109f21d4a0394486839da806613899cf-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これを追加すると、↓が全部使える!! しゅごい!&lt;/span&gt;
&lt;a name="rest_code_109f21d4a0394486839da806613899cf-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_109f21d4a0394486839da806613899cf-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'accounts/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'django.contrib.auth.urls'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;a name="rest_code_109f21d4a0394486839da806613899cf-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;table class="colwidths-auto"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;機能&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;URL パターン&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;ビュー&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;フォーム&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;ログイン&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;accounts/login/ [name='login']&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;LoginView&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;AuthenticationForm&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;ログアウト&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;accounts/logout/ [name='logout']&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;LogoutView&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;パスワード変更&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;accounts/password_change/ [name='password_change']&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PasswordChangeView&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PasswordChangeForm&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;パスワード変更完了&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;accounts/password_change/done/ [name='password_change_done']&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PasswordChangeDoneView&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;パスワード再設定 メール送信&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;accounts/password_reset/ [name='password_reset']&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PasswordResetView&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PasswordResetForm&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;パスワード再設定 メール送信完了&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;accounts/password_reset/done/ [name='password_reset_done']&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PasswordResetDoneView&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;パスワード再設定&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;accounts/reset/&amp;lt;uidb64&amp;gt;/&amp;lt;token&amp;gt;/ [name='password_reset_confirm']&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PasswordResetConfirmView&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;SetPasswordForm&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;パスワード再設定 完了&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;accounts/reset/done/ [name='password_reset_complete']&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PasswordResetCompleteView&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django</category><guid>https://32imuf.com/django/auth/</guid><pubDate>Sat, 30 Nov 2019 15:00:00 GMT</pubDate></item><item><title>Django: settings.py</title><link>https://32imuf.com/django/settings/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id2" id="id17"&gt;書籍/リファレンス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id3" id="id18"&gt;概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id4" id="id19"&gt;インストールするアプリケーション一覧&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id5" id="id20"&gt;デバッグ設定&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id6" id="id21"&gt;静的ファイル/メディアファイル&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id7" id="id22"&gt;静的ファイル関連の設定&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id8" id="id23"&gt;メディアファイル関連設定&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#runserver" id="id24"&gt;runserver でメディアファイルを配信してくれる仕組みがある&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id9" id="id25"&gt;データベース設定&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id10" id="id26"&gt;組み込みでサポートしているデータベースエンジン:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id11" id="id27"&gt;設定できる項目一覧:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#mysql" id="id28"&gt;MySQL で注意する点:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id12" id="id29"&gt;ロギングの設定&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#logging" id="id30"&gt;本番稼働時の LOGGING 設定例&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id13" id="id31"&gt;開発時の LOGGING 設定例&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id14" id="id32"&gt;ロガーを取得する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id15" id="id33"&gt;その他の重要な設定&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/settings/#id16" id="id34"&gt;ベストプラクティス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id17"&gt;書籍/リファレンス&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Djangoの設定: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/settings/"&gt;https://docs.djangoproject.com/ja/2.2/topics/settings/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1059917"&gt;現場で使える Django の教科書&lt;/a&gt; 第10章&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id18"&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;設定オブジェクト: &lt;code class="docutils literal"&gt;django.conf.settings&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Django 起動時に次のようにインスタンス化されるシングルトンなグローバルオブジェクト&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c53e1abd029c4355a62f448e83b97afd-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# django/conf/__init__.py&lt;/span&gt;
&lt;a name="rest_code_c53e1abd029c4355a62f448e83b97afd-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LazySettings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;↑ は、Django のデフォルト設定ファイル ( &lt;code class="docutils literal"&gt;django.conf.global__settings.py&lt;/code&gt; ) を読み込んだ後&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プロジェクト作成時に生成される設定ファイル ( &lt;code class="docutils literal"&gt;settings.py&lt;/code&gt; ) を読み込んで設定を上書きされる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定ファイル: プロジェクト生成時に生成される &lt;code class="docutils literal"&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Django のデフォルト設定とは異なるプロジェクト固有の設定値や&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自作のアプリケーションで利用する独自の変数を記述しておく&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Django で利用できる設定変数とそのデフォルト値の一覧 =&amp;gt; &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;View や models からアクセスするときは、オブジェクトなので、&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b07b59142b3d444cafcdadeba25e3775-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# こんな風に参照しましょう&lt;/span&gt;
&lt;a name="rest_code_b07b59142b3d444cafcdadeba25e3775-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;a name="rest_code_b07b59142b3d444cafcdadeba25e3775-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOGIN_URL&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LazySettings ??&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;その設定値にアクセスされてから初めてその属性が読み込まれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最初にその属性値にアクセスされるまでは設定を変え放題&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;settings の属性に一度でもアクセスされてしまうと、変更しようとしてもエラーになるので、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本的には、設定ファイルの中で初期設定を済ませよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id19"&gt;インストールするアプリケーション一覧&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_bdd0ec8ad9ef4da29abac05098799338-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_bdd0ec8ad9ef4da29abac05098799338-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 略&lt;/span&gt;
&lt;a name="rest_code_bdd0ec8ad9ef4da29abac05098799338-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Install するアプリケーションをリスト形式で列挙&lt;/span&gt;
&lt;a name="rest_code_bdd0ec8ad9ef4da29abac05098799338-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 各アプリディレクトリ.apps.py の AppConfig クラスのサブクラスを指定する&lt;/span&gt;
&lt;a name="rest_code_bdd0ec8ad9ef4da29abac05098799338-5"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'accounts.apps.AccountsConfig'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_bdd0ec8ad9ef4da29abac05098799338-6"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'shop.apps.ShopConfig'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_bdd0ec8ad9ef4da29abac05098799338-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;パッケージ名を書くのは少し古い書き方&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上に書いた方が優先順位が高い&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id20"&gt;デバッグ設定&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a6893ec182f841acbcf9262af96d5a37-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;開発時は True にしておくと、いろいろ便利&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;エラー発生時に画面にデバッグ情報が出力される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;django-debug-toolbar, SQL 文のロギングは True じゃないと使えない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id21"&gt;静的ファイル/メディアファイル&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The staticfiles app: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/contrib/staticfiles/"&gt;https://docs.djangoproject.com/ja/2.2/ref/contrib/staticfiles/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静的ファイルのデプロイ: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/howto/static-files/deployment/"&gt;https://docs.djangoproject.com/ja/2.2/howto/static-files/deployment/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ファイルのアップロード: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/http/file-uploads/"&gt;https://docs.djangoproject.com/ja/2.2/topics/http/file-uploads/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Djangoで静的ファイルとうまくやる: &lt;a class="reference external" href="https://tell-k.github.io/djangocongressjp2019/#1"&gt;https://tell-k.github.io/djangocongressjp2019/#1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id22"&gt;静的ファイル関連の設定&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;静的ファイル (static ファイル)&lt;/code&gt;: リクエストに応じて中身を変更せずそのまま配信するファイル&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CSS ファイル&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript ファイル&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;画像ファイルに&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;単に静的ファイルをブラウザへ返すだけの処理をアプリケーションサーバーで捌くと、無駄が多くなってしまう&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; アプリケーションサーバーの前段に Nginx に代表される &lt;code class="docutils literal"&gt;リバースプロキシ&lt;/code&gt; と呼ばれるサーバーを配置し、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; 静的ファイルを返すだけの処理はリバースプロキシが担当し、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; Web application の処理が必要なリクエストだけをアプリケーションサーバーへ振り分けることで、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; 効率よくリクエストを捌けるようにする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;セキュリティの観点から、↓は別々にするケースが多い&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;静的ファイルの配信元&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プロジェクトで静的ファイルをバージョン管理する際のプロジェクト内での置き場所&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最低限↓の３つの設定必要&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これしておくと便利&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 静的ファイル配信用のディレクトリ、URL の一部になる&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 設定値はデフォルトの `/static/` のままでよい&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/static/'&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリケーションに紐づかない静的ファイルの置き場&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 静的ファイルの配信元&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# collectstatic コマンドで静的ファイルを集約する際のコピー先でもある&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# `STATICFILES_DIRS` とは別のディレクトリを指定する必要がある&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-15"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# DEBUG = False のときに必要&lt;/span&gt;
&lt;a name="rest_code_bf232b3b044348f58469c32e33875481-16"&gt;&lt;/a&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/var/www/{}/static'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静的ファイル集約のための管理コマンド: &lt;code class="docutils literal"&gt;collectstatic&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c8112ca2d680451ba907fd6c92908469-1"&gt;&lt;/a&gt;$ python3 manage.py collectstatic
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;DEBUG = True&lt;/code&gt; のときは、 runserver がやってくれるので自分で &lt;code class="docutils literal"&gt;collectstatic&lt;/code&gt; する必要ない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;STATIC_URL&lt;/code&gt; を使って画像を表示するテンプレート実装例&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_5d4dc909d86549f8b2233a0f2c61cdeb-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_5d4dc909d86549f8b2233a0f2c61cdeb-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="si"&gt;% s&lt;/span&gt;&lt;span class="s2"&gt;tatic 'shop/images/no-image.png' %}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5d4dc909d86549f8b2233a0f2c61cdeb-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="si"&gt;% s&lt;/span&gt;&lt;span class="s2"&gt;tatic 'images/logo.png' %}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id23"&gt;メディアファイル関連設定&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;メディアファイル&lt;/code&gt;: 静的ファイルのうち、 (システム管理者を含めた) ユーザーがサイトを利用してアップロードするファイル&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番環境では、メディアファイルもAPサーバーで裁かずにリバースプロキシなどで捌くことで負荷を減らす&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_37d2aa207801466282ee703d3be3f9e4-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# メディアファイルの設定例 (config/settings.py)&lt;/span&gt;
&lt;a name="rest_code_37d2aa207801466282ee703d3be3f9e4-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# DEBUG =  False 時&lt;/span&gt;
&lt;a name="rest_code_37d2aa207801466282ee703d3be3f9e4-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/media/'&lt;/span&gt;
&lt;a name="rest_code_37d2aa207801466282ee703d3be3f9e4-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/var/www/{}/media'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_37d2aa207801466282ee703d3be3f9e4-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_37d2aa207801466282ee703d3be3f9e4-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ユニットテスト時 or PaaS ? WhiteNoise 時&lt;/span&gt;
&lt;a name="rest_code_37d2aa207801466282ee703d3be3f9e4-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'media_root'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;アップロードを実装するときのコツは P.114 付近に詳しく書いてあるので、実装するときはよく見ること&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="runserver"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id24"&gt;runserver でメディアファイルを配信してくれる仕組みがある&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;動作確認に便利&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# config/urls.py&lt;/span&gt;
&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.static&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# static 関数の内部で DEBUG = True でないと動作しないようにチェックしているよ&lt;/span&gt;
&lt;a name="rest_code_9b199c283c294d81aaa3409a95ab4b38-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id25"&gt;データベース設定&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id26"&gt;組み込みでサポートしているデータベースエンジン:&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;django.db.backends.postgresql (PostgreSQL)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;django.db.backends.mysql (MySQL)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;django.db.backends.sqlite3 (SQLite)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;django.db.backends.oracle (Oracle)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id27"&gt;設定できる項目一覧:&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/#databases"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/#databases&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;ATOMIC_REQUESTS&lt;/code&gt;:  トランザクションの有効範囲をリクエストの開始から終了までにするかどうかを指定できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;OPTIONS&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;いろんなオプションを設定できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;トランザクションの分離レベル &lt;code class="docutils literal"&gt;isolation_level&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MySQL の SQL モード &lt;code class="docutils literal"&gt;sql_mode&lt;/code&gt; など&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デフォルトから変更したら、Django 側だけでなくデータベース側にも同じ設定をしておくのが望ましい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id28"&gt;MySQL で注意する点:&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SQLモードを「厳密モード」にしておかないと振る舞いが微妙なので、設定しておいたほうがよい&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b1098d2f79934304ab19be3ad425a1e9-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 最も厳しく設定するとこうなる&lt;/span&gt;
&lt;a name="rest_code_b1098d2f79934304ab19be3ad425a1e9-2"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'OPTIONS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1098d2f79934304ab19be3ad425a1e9-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'sql_mode'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'TRADITIONAL,NO_AUTO_VALUE_ON_ZERO'&lt;/span&gt;
&lt;a name="rest_code_b1098d2f79934304ab19be3ad425a1e9-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MySQL を利用する際はドライバーが必要: Django 推奨は &lt;code class="docutils literal"&gt;mysqlclient&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id29"&gt;ロギングの設定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/logging/"&gt;https://docs.djangoproject.com/ja/2.2/topics/logging/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;プロジェクト作成時にはロギング設定は書かれていない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Django の起動時に django.utils.log.py の &lt;code class="docutils literal"&gt;DEFAUT_LOGGING&lt;/code&gt; の設定が読み込まれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="logging"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id30"&gt;本番稼働時の LOGGING 設定例&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# バージョンは「1」固定&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 既存のログ設定を無効化しない&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-5"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'disable_existing_loggers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ログフォーマット&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-7"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'formatters'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-8"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# 本番用&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-9"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'production'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-10"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'format'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt;] &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(process)d&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(thread)d&lt;/span&gt;&lt;span class="s1"&gt; '&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-11"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(pathname)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(lineno)d&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ハンドラ&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-15"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-16"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ファイル出力用ハンドラ&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-17"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-18"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'INFO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-19"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# logging.handlers.RotatingFileHandler, logging.handlers.TimeRotatingFileHandler&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-20"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# を使うとログファイルをローテーションできて便利&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-21"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'logging.FileHandler'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-22"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'var/log/{}.log'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-23"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'formatter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'production'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-24"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-25"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-26"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ロガー&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-27"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'loggers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-28"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# 自作アプリケーション全般のログを拾うロガー&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-29"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# '' と書くと、独自に追加したアプリケーションのログを拾うことができる&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-30"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-31"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-32"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'INFO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-33"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'propagate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-34"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-35"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# Django 本体が出すログ全般を拾うロガー&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-36"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'django'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-37"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-38"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'INFO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-39"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'propagate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-40"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-41"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_94ec71a2aebc412f9e20ca5930d6e0ce-42"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id31"&gt;開発時の LOGGING 設定例&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# バージョンは「1」固定&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 既存のログ設定を無効化しない&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-5"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'disable_existing_loggers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ログフォーマット&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-7"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'formatters'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-8"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# 開発用&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-9"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'develop'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-10"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'format'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt;] &lt;/span&gt;&lt;span class="si"&gt;%(pathname)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(lineno)d&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-11"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-12"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ハンドラ&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-14"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-15"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# コンソール出力用ハンドラ&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-16"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'console'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-17"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-18"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# logging.handlers.RotatingFileHandler, logging.handlers.TimeRotatingFileHandler&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-19"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# を使うとログファイルをローテーションできて便利&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-20"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'logging.StreamHandler'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-21"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'var/log/{}.log'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-22"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'formatter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'develop'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-23"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-24"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-25"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ロガー&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-26"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'loggers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-27"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# 自作アプリケーション全般のログを拾うロガー&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-28"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-29"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'console'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-30"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-31"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'propagate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-32"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-33"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# Django 本体が出すログ全般を拾うロガー&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-34"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'django'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-35"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'console'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-36"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'INFO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-37"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'propagate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-38"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-39"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# 発行される SQL 文を出力するための設定&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-40"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# パフォーマンスの観点から DEBUG = True でないと出力されないようになっている&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-41"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'django.db.backends'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-42"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'console'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-43"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-44"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'propagate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-45"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-46"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_3503c8975d4545f292aac66bfc931ef3-47"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id32"&gt;ロガーを取得する&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_7806e96c043d4272a6cf0350c7591ec2-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id33"&gt;その他の重要な設定&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;TEMPLATES&lt;/code&gt; テンプレートに関する設定: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/#std:setting-TEMPLATES"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/#std:setting-TEMPLATES&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-3"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# テンプレートエンジン&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-4"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'BACKEND'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'django.template.backends.django.DjangoTemplates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-5"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ビューから指定されるテンプレート名に対してどのディレクトリを優先してテンプレートを探しに行くかの順番を指定する&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-6"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'templates'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-7"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# テンプートを探す際に、各アプリケーションディレクトリ直下の templates を優先する場合 True&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-8"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'APP_DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-9"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'OPTIONS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-10"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;# テンプレートから参照できる変数を渡すための context_processors&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-11"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'context_processors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-12"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'django.template.context_processors.debug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-13"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'django.template.context_processors.request'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-14"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'django.contrib.auth.context_processors.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-15"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'django.contrib.messages.context_processors.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-16"&gt;&lt;/a&gt;            &lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-17"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-18"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_9ce299dbeddb402dba2ab7c636a17a98-19"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;LANGUAGE_CODE&lt;/code&gt; 言語コード: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/#language-code"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/#language-code&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_eadaf4ea8b884889918e6a0e8e9687b0-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# デフォルトは 'en-us'&lt;/span&gt;
&lt;a name="rest_code_eadaf4ea8b884889918e6a0e8e9687b0-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 管理サイトの表示もここで指定した言語に&lt;/span&gt;
&lt;a name="rest_code_eadaf4ea8b884889918e6a0e8e9687b0-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ja'&lt;/span&gt;  &lt;span class="c1"&gt;# 日本語&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;TIME_ZONE&lt;/code&gt; タイムゾーン: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/#std:setting-TIME_ZONE"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/#std:setting-TIME_ZONE&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_14fb02e7aed34269b560e86a1564227e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 時刻を表示する際のタイムゾーンを指定&lt;/span&gt;
&lt;a name="rest_code_14fb02e7aed34269b560e86a1564227e-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# デフォルトは 'UTC'&lt;/span&gt;
&lt;a name="rest_code_14fb02e7aed34269b560e86a1564227e-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Asia/Tokyo'&lt;/span&gt;  &lt;span class="c1"&gt;# 日本&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;MIDDLEWARE&lt;/code&gt; ミドルウェアの設定: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/#middleware"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/#middleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;ALLOWED_HOSTS&lt;/code&gt; 許可するホスト : &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/#allowed-hosts"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/#allowed-hosts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;SECRET_KEY&lt;/code&gt; シークレットキー: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/#std:setting-SECRET_KEY"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/#std:setting-SECRET_KEY&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Django 内部で暗号署名やハッシュ生成に利用されるシークレットな文字列&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SECRET_KEY が設定されていない場合、Django は起動しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;django-admin startproject コマンドを実行すると、新しいプロジェクトを作成するたびに、ランダムに生成された SECRET_KEY を自動的に設定してくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;環境ごとに固有であることが望ましい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;SITE_ID&lt;/code&gt; サイトID: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/ref/settings/#sites"&gt;https://docs.djangoproject.com/ja/2.2/ref/settings/#sites&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/settings/#id34"&gt;ベストプラクティス&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;個人の開発環境の設定は &lt;code class="docutils literal"&gt;local_settings.py&lt;/code&gt; に書く&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_e2914b85233d43438e587427017680f0-1"&gt;&lt;/a&gt;$ python3 manage.py runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 --settings config.local_settings
&lt;a name="rest_code_e2914b85233d43438e587427017680f0-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_e2914b85233d43438e587427017680f0-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# もしくは&lt;/span&gt;
&lt;a name="rest_code_e2914b85233d43438e587427017680f0-4"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;config.local_settings
&lt;a name="rest_code_e2914b85233d43438e587427017680f0-5"&gt;&lt;/a&gt;$ python3 manage.py runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;シークレットな変数は &lt;code class="docutils literal"&gt;.env&lt;/code&gt; に書く&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;バージョン管理下に置かない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;settings.py には書かない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;django-environ 便利&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django</category><guid>https://32imuf.com/django/settings/</guid><pubDate>Sat, 23 Nov 2019 15:00:00 GMT</pubDate></item><item><title>エキスパートPythonプログラミング改訂2版 気になったことメモ</title><link>https://32imuf.com/python/expert-python-programming-2/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#id2" id="id5"&gt;第4章 良い名前を選ぶ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-154" id="id6"&gt;定数: P.154&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-155" id="id7"&gt;命名規則と使用例: P.155&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-162" id="id8"&gt;辞書型に明示的な名前をつける: P.162&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-163" id="id9"&gt;汎用性の高い名前を避ける: P.163&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#args-kwargs-p-167" id="id10"&gt;魔法の引数である*args と**kwargs は注意して使用する: P.167&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-169" id="id11"&gt;クラス名: P.169&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-170" id="id12"&gt;モジュール名とパッケージ名: P.170&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#id3" id="id13"&gt;第2章 構文ベストプラクティス — クラス以外&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#pythonic-p-64" id="id14"&gt;Pythonic なパターン: P.64&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-67" id="id15"&gt;文字列の結合について: P.67&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#python-p-69" id="id16"&gt;Pythonのリスト: P.69&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-70" id="id17"&gt;リスト内包表記: P.70&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-73" id="id18"&gt;辞書: P.73&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-74" id="id19"&gt;辞書の実装詳細: P.74&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-77" id="id20"&gt;集合: P.77&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-78" id="id21"&gt;集合の実装詳細: P.78&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#cllections-p-78" id="id22"&gt;cllections モジュール: P.78&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-79" id="id23"&gt;イテレータ: P.79&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#yield-p-81" id="id24"&gt;yield文（ジェネレータ）: P.81&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-85" id="id25"&gt;ジェネレータ式: P.85&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#id4" id="id26"&gt;デコレータ: P.85&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-90" id="id27"&gt;デコレータの活用例: P.90&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#with-p-98" id="id28"&gt;コンテキストマネージャー --- with 構文: P.98&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-100" id="id29"&gt;クラスとしてコンテキストマネージャーを実装: P.100&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-102" id="id30"&gt;関数としてコンテキストマネージャーを実装: P.102&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#python" id="id31"&gt;第1章 現在の Python のステータス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id5"&gt;第4章 良い名前を選ぶ&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="p-154"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id6"&gt;定数: P.154&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;短くするよりも意図をわかりやすく表現するほうが大切&lt;/p&gt;
&lt;div class="section" id="p-155"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id7"&gt;命名規則と使用例: P.155&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;デフォルト値や初期値を設定するためにも使用される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ユーザーが必要な設定をすべて行わなくてもライブラリが動作する、という設計のほうが扱いやすい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定として使用する際の良いプラクティスは、パッケージ内の1つのファイルにすべての定数を集めること (Django の settings とか)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;モジュール内にグループとなる定数がある場合を除いて、定数名の先頭に共通の名前をつける必要はない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python ではモジュール名そのものが接頭辞としての役割を果たすから&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;組み込みの &lt;a class="reference external" href="https://docs.python.org/ja/3/library/enum.html#enum.Enum"&gt;https://docs.python.org/ja/3/library/enum.html#enum.Enum&lt;/a&gt; を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="p-162"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id8"&gt;辞書型に明示的な名前をつける: P.162&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 例えば dict が名前をキーにしてその人の住所を保持する場合には ``person_address``&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これずっと悩んでた!!&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;person_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-4"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Bill'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'6565 Monty Road'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-5"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Pamela'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'45 Python street'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="p-163"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id9"&gt;汎用性の高い名前を避ける: P.163&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;関数名やクラス名では避けたほうが良いでしょう&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Manager&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do, handle または perform&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="args-kwargs-p-167"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id10"&gt;魔法の引数である*args と**kwargs は注意して使用する: P.167&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可変引数である &lt;code class="docutils literal"&gt;*args&lt;/code&gt; と &lt;code class="docutils literal"&gt;**kwargs&lt;/code&gt; は、関数やメソッドの堅牢性を低下させる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メソッドの引数情報を意味のある名前つき引数に固定すべき&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;別のアプローチとしては、関連する引数をグループ化して実行コンテキストに渡すためのコンテナクラスを作る&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;内部情報を保持したり、独立して拡張できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテナを引数として使用するコードは、そのコンテナの内部構造を気にする必要がなくなる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c7b18fbeea0e49028c3b911e84403e57-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c7b18fbeea0e49028c3b911e84403e57-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'HTTP_REFERER'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'No referer'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-169"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id11"&gt;クラス名: P.169&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;名前からクラスが何をするのかが十分に理解できるように簡潔で的確な名前にする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;その型やその特性について伝える接尾辞を使用する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;SQLEngine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MineTypes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;StringWidget&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TestCase&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基底クラスのクラス名には &lt;code class="docutils literal"&gt;Base&lt;/code&gt; や &lt;code class="docutils literal"&gt;Abstract&lt;/code&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;BaseCookie&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AbstractFormatter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クラスの属性と一貫性を保つ&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_68eef781825546d0bb0696109920224a-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smtp_send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 主語が重複していて冗長!! ですよね!!&lt;/span&gt;
&lt;a name="rest_code_68eef781825546d0bb0696109920224a-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-170"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id12"&gt;モジュール名とパッケージ名: P.170&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;モジュールやパッケージの名前は、中に含まれる関数やクラスが持っている目的が伝わるような名前にする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;underscores のない lowercase 形式の短い名前にしましょう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sqlite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;postgres&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sha1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id13"&gt;第2章 構文ベストプラクティス — クラス以外&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pythonic-p-64"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id14"&gt;Pythonic なパターン: P.64&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;自分自身で真実を深く掘り下げていくことでしか、Pythonの人気のある書き方のどれが本当に正しいかを知ることはできません。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="p-67"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id15"&gt;文字列の結合について: P.67&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;場合に応じて使い分ける&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;s += substring&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;文字列の長さに比例した実行コスト&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;str.join()&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;結合したい文字列の数が多い、すでに &lt;code class="docutils literal"&gt;iterable&lt;/code&gt; に格納されている&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;str.format()&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;事前に文字列数がわかっている&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;%演算子&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;事前に文字列数がわかっている&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;リテラル文字列補完&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;事前に文字列数がわかっている&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="python-p-69"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id16"&gt;Pythonのリスト: P.69&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Javaとかの &lt;code class="docutils literal"&gt;LinkedList&lt;/code&gt; を使って実装されていると勘違いされがちだけど違うよー&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPython のリストは可変長の配列として実装されている。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python のリストは他のオブジェクトへの参照を持った、連続した配列&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リストの先頭の構造体がこの配列へのポインタと長さを格納している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;計算量&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;追加、取得&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;挿入、削除&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;サイズ変更、再割り当てが発生する操作&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要素の先頭と末尾への append と pop が O(1) の計算量のリンクリストが必要な場合は、 &lt;code class="docutils literal"&gt;collections.deque&lt;/code&gt; を使用するとよい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-70"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id17"&gt;リスト内包表記: P.70&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;for ループ内で &lt;code class="docutils literal"&gt;list.appned()&lt;/code&gt; するような場合は、リスト内包表記を使用したほうが処理が速くなる。&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これは遅くなる&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# リストを操作するコードをループごとにインタープリタ上で処理する必要がある&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# append() はリストのメソッドであるため、イテレーションごとに関数ルックアップの追加のコストが必要になる&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_460e367ac9a74317938bea00ca55807c-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これは速くなる&lt;/span&gt;
&lt;a name="rest_code_460e367ac9a74317938bea00ca55807c-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 処理の一部がインタープリタ内部で実行されるようになるので、速くなるとのこと&lt;/span&gt;
&lt;a name="rest_code_460e367ac9a74317938bea00ca55807c-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="p-73"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id18"&gt;辞書: P.73&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;辞書内包表記&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d709f82b701040df8096ff1e0648ac87-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;辞書内包表記には、リスト内包表記と同じメリットがある。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;keys()&lt;/code&gt; とか、 Python2 と Python3 では返ってくるもの違うので注意&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python2: リスト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: ビューオブジェクト&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ビューオブジェクトは辞書の内容のスナップショットではなく、現在の内容を見せるビューを提供する。辞書の内容が変化するとビューはその変化を反映した結果を返す。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python2 と Python3 とで動きが結構違う感じするので、使うとき注意だなぁ・・・&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;辞書のコピーとイテレーションにおける最悪のケースの計算量の n の数値は、現在格納されている要素数ではなく、辞書が今まで格納してきた最大数とのこと&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平均計算量&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;要素取得&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;要素追加&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;要素削除&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;コピー&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;イテレーション&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以前に大量の要素を格納し、その後要素を減らして現在の要素数がすごく少ない辞書でも、イテレーションすると極めて長い処理時間がかかる！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;何度もイテレーションされる辞書の場合は、要素を削除する代わりに新しい辞書オブジェクトを作る方が良いこともある。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;順序&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python3.7より前までは、順序を保持しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.7 以降は、辞書のキーが登録した順序で保持される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-74"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id19"&gt;辞書の実装詳細: P.74&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;hashable オブジェクトのみがキーとして使える。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オブジェクトが hashable であるということは、オブジェクトが生存する期間中ハッシュ値が変わらず、他のオブジェクトと比較が行えるということ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python の組み込み型のうち、 immutable なものはすべて hashable ですと。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型が hashable な場合には、次の2つのメソッドを持つプロトコルをサポートすべきであると決められています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__hash__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__eq__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-77"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id20"&gt;集合: P.77&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;set()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mutable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;順序がない有限集合&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要素はユニークかつ immutable かつ hashable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空の集合を作るときは &lt;code class="docutils literal"&gt;set()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;setリテラルは &lt;code class="docutils literal"&gt;{1, 2, 3}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;frozenset()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;immutable かつ hashable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;順序がない有限集合&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要素はユニークかつ immutable かつ hashable&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-78"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id21"&gt;集合の実装詳細: P.78&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CPython実装は辞書に似ている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要素の削除、追加、存在チェックは非常に高速&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;平均計算量&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;最悪計算量&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cllections-p-78"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id22"&gt;cllections モジュール: P.78&lt;/a&gt;&lt;/h3&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;namedtuple()&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;タプルのサブクラスを作成するファクトリ関数。名前つきの属性としても要素にアクセスできる。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;deque&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;スタックとキューに必要な操作を備えた両端キュー。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先頭と末尾への高速な追加、削除ができる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;ChainMap&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;辞書のようなクラス&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;複数の辞書をまとめて1つの辞書に見せるビューを作成する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;OrderedDict&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;要素が追加された順序を保証する辞書のサブクラス&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;defaultdict&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;要素が見つからなかったときに、指定された関数を呼び出して初期値を自動作成する辞書のサブクラス&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="p-79"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id23"&gt;イテレータ: P.79&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;イテレータプロトコルを実装したコンテナオブジェクト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;イテレータプロトコル&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__next__()&lt;/code&gt;: コンテナの次の要素を返す&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__iter__()&lt;/code&gt;: イテレータ自身を返す&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;シーケンスの要素をすべて取り出し終わると &lt;code class="docutils literal"&gt;StopIteration&lt;/code&gt; 例外が発生する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カスタムイテレータを作成するときは、クラス内に↑のふたつを実装する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;itertools: 使ってください、だそうです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="yield-p-81"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id24"&gt;yield文（ジェネレータ）: P.81&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;関数を一時的に停止させ、途中経過の結果を返す。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一時停止中も実行コンテキストが保存されているため、必要であれば止まった場所から再実行できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;next()&lt;/code&gt; 関数呼び出し、あるいは for ループを使って、イテレータと同じようにジェネレータから新しい値を取得できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ループ処理やシーケンスを返す関数を実装するときには、まずジェネレータの利用を検討すべき&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1つずつ要素を返すことで、その要素を使用する他の関数へ渡す場合に全体のパフォーマンスを向上させる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;複数のデータ群を使用するような、データ変換アルゴリズムの効率が向上する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;それぞれのデータ群を１つのイテレータとして実装し、高レベル関数の中にそれらを組み込むことで、巨大で読みにくい関数にになるのを防ぐことができる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一度に１つの結果を算出する複雑な関数よりも、シーケンス上で動作可能な、シンプルな関数をたくさん作る方が良い手法と言える。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;send()&lt;/code&gt;, &lt;code class="docutils literal"&gt;throw()&lt;/code&gt;, &lt;code class="docutils literal"&gt;close()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;外部のクライアントコードからジェネレータ内にデータを送ることができる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;動作を変更できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-85"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id25"&gt;ジェネレータ式: P.85&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_160a4f25b8c0474abbd8eceebd435fc9-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_160a4f25b8c0474abbd8eceebd435fc9-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_160a4f25b8c0474abbd8eceebd435fc9-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;リスト内包表記に似てる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;丸括弧をブラケットの代わりに使用するんだよ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;yield&lt;/code&gt; を使用したシンプルなループや、イテレータのように動作するリスト内包表記は、積極的にジェネレーター式に置き換えるべき&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id26"&gt;デコレータ: P.85&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;関数やメソッドのラッピング（受け取った関数を拡張して返す）処理の見た目をわかりやすくする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デコレータとして使用できるのは、一般的に、１つの引数（デコレーション対象）を受け取れる、名前付きの callable （呼び出し可能）オブジェクト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返り値として、他の callable オブジェクト（デコレーションした結果）を返す。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メソッドと関数に限定されない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__call__()&lt;/code&gt; メソッドが定義され、 callable とみなせる任意のオブジェクトをデコレータとして使用できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;実装例はP.87参照のこと&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 関数として実装する例&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mydecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 実際の関数を呼び出す前に行う処理&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 呼び出し後に行う処理&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# ラッパーをでデコレート済み関数として返す&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-9"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# クラスとして実装する例&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DecoratorAsClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-6"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-7"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 実際の関数を呼び出す前に行う処理&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 呼び出し後に行う処理&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;パラメータも受け取れる =&amp;gt; 2回ラップが行われる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メタ情報を保持するデコレータ =&amp;gt; &lt;code class="docutils literal"&gt;functools.wraps()&lt;/code&gt; デコレータを使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-90"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id27"&gt;デコレータの活用例: P.90&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;引数チェック&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;キャッシュ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プロキシ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;プロキシデコレータは関数にタグをつけたり、グローバルな仕組みへ登録したりする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;たとえば、実行中のユーザーごとにコードへのアクセスを保護するセキュリティレイヤは、呼び出し可能オブジェクトに関連づけられたアクセス許可情報を利用する、集中制御型チェッカーとして実装することができます&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテキストプロバイダ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;@synchronized&lt;/code&gt; とか&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="with-p-98"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id28"&gt;コンテキストマネージャー --- with 構文: P.98&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;try..finally&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;エラー発生時のクリーンアップ処理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ファイルを閉じる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ロックを解除する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一時的にコードにパッチを当てる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特定環境で保護されたコードを実行する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;with&lt;/code&gt; 文はコードブロックの前後で何らかの処理を呼び出すためのシンプルな方法を提供している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;try..finally&lt;/span&gt;&lt;/code&gt; 文の代わりに使用できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-100"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id29"&gt;クラスとしてコンテキストマネージャーを実装: P.100&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;コンテキストマネージャープロトコルを実装したオブジェクトはコンテキストマネージャーとして使用できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;このプロトコルを含むこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__enter__(self)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__exit__(self, exc_type, exc_value, traceback)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;with&lt;/code&gt; 構文の実行順序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__enter__()&lt;/code&gt; メソッドが実行されます。メソッドの返り値は &lt;code class="docutils literal"&gt;as&lt;/code&gt; 節で指定されたターゲットに束縛されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;with&lt;/code&gt; 文内のコードブロックが実行されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__exit__()&lt;/code&gt; メソッドが実行されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;finally&lt;/code&gt; 節のように後処理を行うために使われるべきです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;エラーが発生したときには、その例外を上げ直すべきではありません&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それは呼び出し側の責任です&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-102"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id30"&gt;関数としてコンテキストマネージャーを実装: P.102&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;contextlib&lt;/code&gt; モジュール&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテキストマネージャーと一緒に使うためにある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;contextmanager&lt;/code&gt; デコレータが便利らしい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;詳しくは P.102 を見てください（あんまりわかってない）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id31"&gt;第1章 現在の Python のステータス&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;選択したプログラミング言語を深く理解することは、エキスパートとしてその言語を利用する上でもっとも大切です。これはどの技術においても常に真です。そして、言語コミュニティ内で一般的に使われているツールやプラクティスを知らずに本当に良いソフトウェアを開発するのは困難です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;venv&lt;/code&gt;: 新しいバージョンのPythonを使用しているのであれば、virtualenvの代わりにvenvを使う方がよい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Awesome-python&lt;/span&gt;&lt;/code&gt;: 人気のパッケージ情報やフレームワーク情報をまとめたリストを提供しています&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Python Weekly&lt;/code&gt;: とても人気のあるメールマガジンです。興味深いPythonパッケージやリソースについて毎週10本以上の記事を読者に配信しています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プロフェッショナルな開発者の多くは何かしらの種類のデバッガを使うのを好みます。だって。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/expert-python-programming-2/</guid><pubDate>Sat, 23 Nov 2019 15:00:00 GMT</pubDate></item><item><title>5. Kubernetes 入門</title><link>https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id2" id="id9"&gt;書籍/リファレンス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#kubernetes" id="id10"&gt;5.1 Kubernetes とは&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id3" id="id11"&gt;クラウドプラットフォームの Kubernetes サポート&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id4" id="id12"&gt;5.2 ローカル環境で Kubernetes を実行する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id5" id="id13"&gt;5.3 Kubernetes の概念&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#kubernetes-node" id="id14"&gt;5.4 Kubernetes クラスタと Node&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#pod" id="id15"&gt;5.6 Pod を作成してデプロイする&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#replicaset" id="id16"&gt;5.7 ReplicaSet&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#deployment" id="id17"&gt;5.8  Deployment&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id6" id="id18"&gt;ReplicaSet のライフサイクル&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id7" id="id19"&gt;挙動まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#service" id="id20"&gt;5.9 Service&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id8" id="id21"&gt;Service の名前解決&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id9"&gt;書籍/リファレンス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-297-10033-9"&gt;Docker/Kubernetes 実践コンテナ開発入門&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kubernetes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id10"&gt;5.1 Kubernetes とは&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Google 社主導で開発された、コンテナの運用を自動化するためのコンテナオーケストレーションシステム&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテナオーケストレーションを実現・管理するための統合的なシステム&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;その操作のための API や CLI ツールも併せて提供する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテナを用いたアプリケーションのデプロイをはじめ、様々な運用管理の自動化を実現する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Docker ホストの管理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サーバーリソースの空き具合を考慮したコンテナ配置&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;スケーリング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;複数のコンテナ群へのアクセスを取りまとめるロードバランサー&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;死活監視&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;クーバネティス&lt;/code&gt; と読むらしい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id11"&gt;クラウドプラットフォームの Kubernetes サポート&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Google: GKE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microsoft Azure: AKS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS: Amazon EKS&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id12"&gt;5.2 ローカル環境で Kubernetes を実行する&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Docker for Mac の Kubernetes 連携を有効にする&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 2. kubectl (Kubernetes を操作するためのコマンドラインツール) をインストールする&lt;/span&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://kubernetes.io/docs/tasks/tools/install-kubectl/&lt;/span&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# けっこう長かった&lt;/span&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-4"&gt;&lt;/a&gt;$ brew install kubectl
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 3. ダッシュボードの適用 (追加)&lt;/span&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/&lt;/span&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これはすぐだった&lt;/span&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-9"&gt;&lt;/a&gt;$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta4/aio/deploy/recommended.yaml
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 4. ダッシュボードへのプロキシサーバーを立ち上げる&lt;/span&gt;
&lt;a name="rest_code_bf56554e5cc44523bed814ae6c031326-12"&gt;&lt;/a&gt;$ kubectl proxy
&lt;/pre&gt;&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"&gt;http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/&lt;/a&gt;. へアクセスする&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id13"&gt;5.3 Kubernetes の概念&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;P.173 に一覧表になっている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="kubernetes-node"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id14"&gt;5.4 Kubernetes クラスタと Node&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;大きい順: &lt;code class="docutils literal"&gt;クラスタ&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code class="docutils literal"&gt;Node&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code class="docutils literal"&gt;Pod&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code class="docutils literal"&gt;コンテナ&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クラスタ: Kubernetes の様々なリソースを管理する集合体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全体を管理するサーバーである Master が少なくとも1つは配置されている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pod"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id15"&gt;5.6 Pod を作成してデプロイする&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pod: コンテナの集合体の単位&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;少なくとも 1つのコンテナを持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kubernetes では Pod 単位でコンテナをひとくくりにしてデプロイする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pod を定義したマニフェストファイルを作成する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;kubectl だけで Pod を作成することもできるが、バージョン管理の観点から yaml ファイルとして定義することがほとんど&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kubernetes の各種リソースを定義するファイルを &lt;code class="docutils literal"&gt;マニフェストファイル&lt;/code&gt; と呼ぶ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;simple-pod.yaml&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Pod&lt;/span&gt;  &lt;span class="c1"&gt;# リソースの種類を指定&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# リソースに付与するメタデータ&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;simple-echo&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 構成するコンテナ群を定義&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
      &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/nginx-proxy:latest&lt;/span&gt;  &lt;span class="c1"&gt;# 使うコンテナイメージ&lt;/span&gt;
      &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BACKEND_HOST&lt;/span&gt;  &lt;span class="c1"&gt;# リクエストのプロキシ先&lt;/span&gt;
          &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost:8080&lt;/span&gt;
      &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# コンテナが EXPOSE するポート&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
      &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/echo:latest&lt;/span&gt;
      &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kubernetes クラスタに反映する&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# apply: 新規作成/内容に変更があったときだけ反映される&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-2"&gt;&lt;/a&gt;$ kubectl apply -f simple-pod.yaml
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-3"&gt;&lt;/a&gt;pod/simple-echo created
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Pod の状態を一覧表示&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-6"&gt;&lt;/a&gt;$ kubectl get pod
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# STATUS Running:  Pod 内のすべてのコンテナが実行状態&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# READY 2/2: 実行状態になったコンテナ数/Pod に定義されたコンテナ数&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-9"&gt;&lt;/a&gt;NAME          READY   STATUS    RESTARTS   AGE
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-10"&gt;&lt;/a&gt;simple-echo   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          2m49s
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# コンテナに入る&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-13"&gt;&lt;/a&gt;$ kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; -it simple-echo sh -c nginx
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-14"&gt;&lt;/a&gt;/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-16"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Pod 内のコンテナの標準出力を表示する&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-17"&gt;&lt;/a&gt;$ kubectl logs -f simple-echo -c &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-18"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;04&lt;/span&gt;:50:42 start server
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Pod を削除する&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-21"&gt;&lt;/a&gt;$ kubectl delete pod simple-echo
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-22"&gt;&lt;/a&gt;pod &lt;span class="s2"&gt;"simple-echo"&lt;/span&gt; deleted
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# マニフェストファイルベースで Pod を削除する&lt;/span&gt;
&lt;a name="rest_code_0ebafbc8c19b41e495ab41c79f39a104-25"&gt;&lt;/a&gt;$ kubectl delete -f simple-pod.yaml
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pod と Pod 内コンテナのアドレス&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pod にはそれぞれ固有の IPアドレスが割り振られる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pod に割り振られた仮想 IPアドレスは、その Pod に所属するすべてのコンテナと共有される =&amp;gt; 同一 Pod 内の全てのコンテナの仮想IPアドレスは同じ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="replicaset"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id16"&gt;5.7 ReplicaSet&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;同じ仕様の Pod を複数生成/管理するためのリソース&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;simple-replicaset.yaml&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicaSet&lt;/span&gt;  &lt;span class="c1"&gt;# リソースの種類を指定&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# リソースに付与するメタデータ&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 作成する Pod数&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;matchLabels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# ここから Pod 定義と同じ&lt;/span&gt;
    &lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/nginx-proxy:latest&lt;/span&gt;
          &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BACKEND_HOST&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost:8080&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/echo:latest&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-1"&gt;&lt;/a&gt;$ kubectl apply -f simple-replicaset.yaml
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-2"&gt;&lt;/a&gt;replicaset.apps/echo created
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Pod が 3つ作成されている&lt;/span&gt;
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ReplicaSet を操作して Pod の数を減らすと、減らした分の Pod は削除されて元に戻せない =&amp;gt; Stateless なものに向いてる&lt;/span&gt;
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-6"&gt;&lt;/a&gt;$ kubectl get pod
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-7"&gt;&lt;/a&gt;NAME         READY   STATUS    RESTARTS   AGE
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-8"&gt;&lt;/a&gt;echo-69gln   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          39s
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-9"&gt;&lt;/a&gt;echo-hm7ns   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          39s
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-10"&gt;&lt;/a&gt;echo-x9729   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          39s
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ReplicaSet を削除する&lt;/span&gt;
&lt;a name="rest_code_1dd756f2a5d041638787769d5e4a3d3a-13"&gt;&lt;/a&gt;$ kubectl delete -f simple-replicaset.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id17"&gt;5.8  Deployment&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;アプリケーションデプロイの基本単位となるリソース&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Deployment&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code class="docutils literal"&gt;ReplicaSet&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code class="docutils literal"&gt;Pod&lt;/code&gt; たち&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ReplicaSet を管理/操作する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deployment は ReplicaSet の世代管理できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;simple-deployment.yaml&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment&lt;/span&gt;  &lt;span class="c1"&gt;# ここが Deployment に&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;matchLabels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/nginx-proxy:latest&lt;/span&gt;
          &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BACKEND_HOST&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost:8080&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/echo:patched&lt;/span&gt;
&lt;span class="c1"&gt;#          image: gihyodocker/echo:latest&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# コマンドを記録できる ``--record`` オプションをつけて反映&lt;/span&gt;
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-2"&gt;&lt;/a&gt;$ kubectl apply -f simple-deployment.yaml --record
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-3"&gt;&lt;/a&gt;deployment.apps/echo created
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-5"&gt;&lt;/a&gt;$ kubectl get pod,replicaset,deployment --selector &lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-6"&gt;&lt;/a&gt;NAME                        READY   STATUS    RESTARTS   AGE
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-7"&gt;&lt;/a&gt;pod/echo-679c46ddf9-8rhgm   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          107s
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-8"&gt;&lt;/a&gt;pod/echo-679c46ddf9-hl22n   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          107s
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-9"&gt;&lt;/a&gt;pod/echo-679c46ddf9-kbm2g   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          107s
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-11"&gt;&lt;/a&gt;NAME                                    DESIRED   CURRENT   READY   AGE
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-12"&gt;&lt;/a&gt;replicaset.extensions/echo-679c46ddf9   &lt;span class="m"&gt;3&lt;/span&gt;         &lt;span class="m"&gt;3&lt;/span&gt;         &lt;span class="m"&gt;3&lt;/span&gt;       107s
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-14"&gt;&lt;/a&gt;NAME                         READY   UP-TO-DATE   AVAILABLE   AGE
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-15"&gt;&lt;/a&gt;deployment.extensions/echo   &lt;span class="m"&gt;3&lt;/span&gt;/3     &lt;span class="m"&gt;3&lt;/span&gt;            &lt;span class="m"&gt;3&lt;/span&gt;           107s
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Deployment のリビジョンを確認する&lt;/span&gt;
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-18"&gt;&lt;/a&gt;$ kubectl rollout &lt;span class="nb"&gt;history&lt;/span&gt; deployment &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-19"&gt;&lt;/a&gt;deployment.extensions/echo
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-20"&gt;&lt;/a&gt;REVISION  CHANGE-CAUSE
&lt;a name="rest_code_1202ef784b9945afba34dbb4f29bd495-21"&gt;&lt;/a&gt;&lt;span class="m"&gt;1&lt;/span&gt;         kubectl apply --filename&lt;span class="o"&gt;=&lt;/span&gt;simple-deployment.yaml --record&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id18"&gt;ReplicaSet のライフサイクル&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Kubernetes では Deployment を 1つの単位としてアプリケーションをデプロイする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;実運用では ReplicaSet を直接用いることはほとんどない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deployment のマニフェストファイルを扱う運用にする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ReplicaSet 大事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;指定された Pod 数の確保&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新しいバージョンの Pod への入れ替え&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以前のバージョンへの Pod のロールバック&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id7"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id19"&gt;挙動まとめ&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pod 数を変更: 新規 ReplicaSet 生まれない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテナ定義を更新: 新しいリビジョンが作成される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 特定のリビジョンの内容を確認できる&lt;/span&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-2"&gt;&lt;/a&gt;$ kubectl rollout &lt;span class="nb"&gt;history&lt;/span&gt; deployment &lt;span class="nb"&gt;echo&lt;/span&gt;  --revision&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-3"&gt;&lt;/a&gt;deployment.extensions/echo with revision &lt;span class="c1"&gt;#1&lt;/span&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-4"&gt;&lt;/a&gt;Pod Template:
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-5"&gt;&lt;/a&gt;  Labels:     &lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-6"&gt;&lt;/a&gt;  pod-template-hash&lt;span class="o"&gt;=&lt;/span&gt;679c46ddf9
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-7"&gt;&lt;/a&gt;  Annotations:        kubernetes.io/change-cause: kubectl apply --filename&lt;span class="o"&gt;=&lt;/span&gt;simple-deployment.yaml --record&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-8"&gt;&lt;/a&gt;  Containers:
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-9"&gt;&lt;/a&gt;   nginx:
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-10"&gt;&lt;/a&gt;    Image:    gihyodocker/nginx-proxy:latest
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-11"&gt;&lt;/a&gt;    Port:     &lt;span class="m"&gt;80&lt;/span&gt;/TCP
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-12"&gt;&lt;/a&gt;    Host Port:        &lt;span class="m"&gt;0&lt;/span&gt;/TCP
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-13"&gt;&lt;/a&gt;    Environment:
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-14"&gt;&lt;/a&gt;      BACKEND_HOST:   localhost:8080
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-15"&gt;&lt;/a&gt;    Mounts:   &amp;lt;none&amp;gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-16"&gt;&lt;/a&gt;   echo:
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-17"&gt;&lt;/a&gt;    Image:    gihyodocker/echo:latest
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-18"&gt;&lt;/a&gt;    Port:     &lt;span class="m"&gt;8080&lt;/span&gt;/TCP
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-19"&gt;&lt;/a&gt;    Host Port:        &lt;span class="m"&gt;0&lt;/span&gt;/TCP
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-20"&gt;&lt;/a&gt;    Environment:      &amp;lt;none&amp;gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-21"&gt;&lt;/a&gt;    Mounts:   &amp;lt;none&amp;gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-22"&gt;&lt;/a&gt;  Volumes:    &amp;lt;none&amp;gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 直前の操作のリビジョンに Deployment をロールバックできる&lt;/span&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-25"&gt;&lt;/a&gt;$ kubectl rollout undo deployment &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-26"&gt;&lt;/a&gt;deployment.extensions/echo rolled back
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-28"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 削除: 関連する ReplicaSet と Pod もいっしょに削除される&lt;/span&gt;
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-29"&gt;&lt;/a&gt;$ kubectl delete -f simple-deployment.yaml
&lt;a name="rest_code_e03a780d7d7c466da5645299ef0cc655-30"&gt;&lt;/a&gt;deployment.apps &lt;span class="s2"&gt;"echo"&lt;/span&gt; deleted
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id20"&gt;5.9 Service&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Kubernetes クラスタ内において、 Pod の集合 (主に ReplicaSet) に対する経路やサービスディスカバリを提供するためのリソース&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Service のターゲットとなる一連の Pod は、 Service で定義するラベルセレクタによって決定される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;simple-replicaset-with-label.yaml&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 例として、 release ラベル spring/summer をつけて ReplicaSet を二つ定義する&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicaSet&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo-spring&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
    &lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spring&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;matchLabels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
      &lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spring&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
        &lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spring&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/nginx-proxy:latest&lt;/span&gt;
          &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BACKEND_HOST&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost:8080&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/echo:latest&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;

&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicaSet&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo-summer&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
    &lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summer&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;matchLabels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
      &lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summer&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
        &lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summer&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/nginx-proxy:latest&lt;/span&gt;
          &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BACKEND_HOST&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost:8080&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gihyodocker/echo:latest&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# apply&lt;/span&gt;
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-2"&gt;&lt;/a&gt;$ kubectl apply -f simple-replicaset-with-label.yaml
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-3"&gt;&lt;/a&gt;replicaset.apps/echo-spring created
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-4"&gt;&lt;/a&gt;replicaset.apps/echo-summer created
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# release ラベルに spring/summer を持つ Pod がそれぞれつくられる&lt;/span&gt;
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# release ラベルに spring を持つ Pod&lt;/span&gt;
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-8"&gt;&lt;/a&gt;$ kubectl get pod -l &lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -l &lt;span class="nv"&gt;release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;spring
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-9"&gt;&lt;/a&gt;NAME                READY   STATUS    RESTARTS   AGE
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-10"&gt;&lt;/a&gt;echo-spring-67s58   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          92s
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# release ラベルに summer を持つ Pod&lt;/span&gt;
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-13"&gt;&lt;/a&gt;$ kubectl get pod -l &lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -l &lt;span class="nv"&gt;release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;summer
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-14"&gt;&lt;/a&gt;NAME                READY   STATUS    RESTARTS   AGE
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-15"&gt;&lt;/a&gt;echo-summer-tnwb9   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          110s
&lt;a name="rest_code_a28356767391463d979a1c988ddab9dd-16"&gt;&lt;/a&gt;echo-summer-vb44t   &lt;span class="m"&gt;2&lt;/span&gt;/2     Running   &lt;span class="m"&gt;0&lt;/span&gt;          110s
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;simple-service.yaml&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# release=summer を持つ Pod だけにアクセスできる Service をつくる&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo&lt;/span&gt;
    &lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summer&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
      &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# apply して Service を作成する&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-2"&gt;&lt;/a&gt;$ kubectl apply -f simple-service.yaml
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-3"&gt;&lt;/a&gt;service/echo created
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-5"&gt;&lt;/a&gt;$ kubectl get svc &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-6"&gt;&lt;/a&gt;NAME   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;   AGE
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;   ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.106.145.240   &amp;lt;none&amp;gt;        &lt;span class="m"&gt;80&lt;/span&gt;/TCP    51s
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 基本的に Service は Kubernetes クラスタの中からしかアクセスできないので、&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Kubernetes クラスタ内に一時的なデバッグコンテナをデプロイ&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-11"&gt;&lt;/a&gt;$ kubectl run -i --rm --tty debug --image&lt;span class="o"&gt;=&lt;/span&gt;gihyodocker/fundamental:0.1.0 --restart&lt;span class="o"&gt;=&lt;/span&gt;Never -- bash -il
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-12"&gt;&lt;/a&gt;If you don&lt;span class="err"&gt;'&lt;/span&gt;t see a &lt;span class="nb"&gt;command&lt;/span&gt; prompt, try pressing enter.
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# curl で HTTP リクエストを送信してみる&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-15"&gt;&lt;/a&gt;debug:/# curl http://echo/
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-16"&gt;&lt;/a&gt;Hello Docker!!debug:/# curl http://echo/
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-17"&gt;&lt;/a&gt;Hello Docker!!debug:/# curl http://echo/
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-18"&gt;&lt;/a&gt;Hello Docker!!debug:/# curl http://echo/
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-19"&gt;&lt;/a&gt;Hello Docker!!debug:/# curl http://echo/
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-20"&gt;&lt;/a&gt;Hello Docker!!debug:/#
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-22"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# summer にはリクエストが来ている&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-23"&gt;&lt;/a&gt;$ kubectl logs -f echo-summer-vb44t -c &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-24"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;06&lt;/span&gt;:56:15 start server
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-25"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;07&lt;/span&gt;:23:53 received request
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-26"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;07&lt;/span&gt;:23:54 received request
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-27"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;07&lt;/span&gt;:23:56 received request
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-29"&gt;&lt;/a&gt;$ kubectl logs -f echo-summer-tnwb9 -c &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-30"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;06&lt;/span&gt;:56:12 start server
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-31"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;07&lt;/span&gt;:18:24 received request
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-32"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;07&lt;/span&gt;:23:45 received request
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-34"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# spring にはリクエストが来ていない&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-35"&gt;&lt;/a&gt;$ kubectl logs -f echo-spring-67s58 -c &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_724f7c1460104015b4e19dfc54848f90-36"&gt;&lt;/a&gt;&lt;span class="m"&gt;2019&lt;/span&gt;/11/17 &lt;span class="m"&gt;06&lt;/span&gt;:56:09 start server
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Service による名前解決は欠かせません&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/#id21"&gt;Service の名前解決&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Kubernetes クラスタ内の DNS では、 Service を &lt;code class="docutils literal"&gt;Service名.Namespace名.svc.local&lt;/code&gt; で名前解決できるようになっている&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# echo は default の Namespace に配置しているので、&lt;/span&gt;
&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-2"&gt;&lt;/a&gt;$ curl http://echo.default.svc.local
&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# .svc.local は省略可能&lt;/span&gt;
&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 異なる Namespace の Service の名前解決は↓が最短&lt;/span&gt;
&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-6"&gt;&lt;/a&gt;$ curl http://echo.default
&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 同一の Namespace だと Service 名だけで名前解決できる&lt;/span&gt;
&lt;a name="rest_code_cb041c6e9b3f4b3c9a3a4be8796b17a4-9"&gt;&lt;/a&gt;$ curl http://echo
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>docker</category><guid>https://32imuf.com/docker/introduction-to-practice-container-development/5-kubernetes-getting-started/</guid><pubDate>Fri, 15 Nov 2019 15:00:00 GMT</pubDate></item><item><title>Django: Middleware</title><link>https://32imuf.com/django/middleware/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#id2" id="id8"&gt;書籍/リファレンス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#id3" id="id9"&gt;概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#id4" id="id10"&gt;主なミドルウェア&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#securitymiddleware" id="id11"&gt;SecurityMiddleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#sessionmiddleware" id="id12"&gt;SessionMiddleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#commonmiddleware" id="id13"&gt;CommonMiddleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#csrfviewmiddleware" id="id14"&gt;CsrfViewMiddleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#authenticationmiddleware" id="id15"&gt;AuthenticationMiddleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#messagemiddleware" id="id16"&gt;MessageMiddleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#xframeoptionsmiddleware" id="id17"&gt;XFrameOptionsMiddleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django/middleware/#id6" id="id18"&gt;ミドルウェアの書き方&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id8"&gt;書籍/リファレンス&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/http/middleware/"&gt;https://docs.djangoproject.com/ja/2.2/topics/http/middleware/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1059917"&gt;現場で使える Django の教科書&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id9"&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Django の主要な機能 (モデル・テンプレート・ビュー) と Web サーバー/アプリケーションの中間に位置&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ビューを出入りするすべてのリクエストとレスポンスをフックできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;さまざまなミドルウェアが組み込みで用意されている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自作して追加することも可能&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必要なものを settings に加えると利用できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サイト全体にリクエストやレスポンスを使用して一律に何らかの機能を加えたい場合などに利用する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;settings の &lt;code class="docutils literal"&gt;MIDDLEWARE&lt;/code&gt; にリスト形式で列挙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;書いた順番に実行される。順番大事。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;書いたミドルウェアはリクエストの度に全部実行されるので、あまり重い処理は書かないようにすること。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;できるかぎりデータベースアクセスしない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必要なら &lt;code class="docutils literal"&gt;django.utils.functional.SimpleLazyObject&lt;/code&gt; を使うようにする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id10"&gt;主なミドルウェア&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;以下は、 Django プロジェクト作成時にデフォルトで設定される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デフォルトで設定されるミドルウェアはとりあえずそのまま使うのが吉とのこと&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="securitymiddleware"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id11"&gt;SecurityMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;リクエスト/レスポンスのセキュリティ強化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTP =&amp;gt; HTTPS リダイレクト (デフォルトはOFF)&lt;/p&gt;
&lt;pre class="code Python"&gt;&lt;a name="rest_code_81bdd53098364b4f89af2ad6d2110370-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;SECURE_SSL_REDIRECT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;入れておいて損はないので何も考えずに入れておくとよい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sessionmiddleware"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id12"&gt;SessionMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;セッションを有効にする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有効にする場合は、 &lt;code class="docutils literal"&gt;INSTALLED_APPS&lt;/code&gt; に &lt;code class="docutils literal"&gt;django.contrib.sessions&lt;/code&gt; を入れるのを忘れずに&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使い方はここを見よ: &lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/http/sessions/"&gt;https://docs.djangoproject.com/ja/2.2/topics/http/sessions/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;迷ったら有効化しておく&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commonmiddleware"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id13"&gt;CommonMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ユーザーエージェントによるアクセス制限&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URL リライティング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;公式でも使用を強くお勧め&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必須では&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;APPEND_SLASH&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;PREPEND_WWW&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="csrfviewmiddleware"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id14"&gt;CsrfViewMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CSRF トークン検証&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="authenticationmiddleware"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id15"&gt;AuthenticationMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;リクエストの度に、リクエストオブジェクトの &lt;code class="docutils literal"&gt;user&lt;/code&gt; 属性にユーザー情報をセットしてくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ログイン済みの場合: セッション.Userインスタンス&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;未ログインの場合: AnonymousUser (匿名ユーザー)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;セッションが必要なので、 SessionMiddleware より後ろに書く&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="messagemiddleware"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id16"&gt;MessageMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;フラッシュメッセージ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メッセージフレームワーク&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1059917"&gt;現場で使える Django の教科書&lt;/a&gt; P.103&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="xframeoptionsmiddleware"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id17"&gt;XFrameOptionsMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;クリックジャッキング対策&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;X-Frame-Options&lt;/span&gt;&lt;/code&gt; ヘッダーを全てのレスポンスに設定&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django/middleware/#id18"&gt;ミドルウェアの書き方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここを見よ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/ja/2.2/topics/http/middleware/#writing-your-own-middleware"&gt;https://docs.djangoproject.com/ja/2.2/topics/http/middleware/#writing-your-own-middleware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://booth.pm/ja/items/1059917"&gt;現場で使える Django の教科書&lt;/a&gt; P.101&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django</category><guid>https://32imuf.com/django/middleware/</guid><pubDate>Sun, 13 Oct 2019 15:00:00 GMT</pubDate></item><item><title>Pycharm の Tox support を使う</title><link>https://32imuf.com/pycharm/tox-support/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/pycharm/tox-support/#id2" id="id6"&gt;ガイド/リファレンスなど&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/pycharm/tox-support/#id3" id="id7"&gt;設定&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/pycharm/tox-support/#id4" id="id8"&gt;良いところ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/pycharm/tox-support/#id5" id="id9"&gt;イマイチなところ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/pycharm/tox-support/#pytest" id="id10"&gt;注意: pytest のバージョンは以下なら動く&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/pycharm/tox-support/#id6"&gt;ガイド/リファレンスなど&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://pleiades.io/help/pycharm/tox-support.html"&gt;https://pleiades.io/help/pycharm/tox-support.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/19236745/pycharm-pytestrunner-pluginmanager-unexpected-keyword-argument"&gt;https://stackoverflow.com/questions/19236745/pycharm-pytestrunner-pluginmanager-unexpected-keyword-argument&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/pycharm/tox-support/#id7"&gt;設定&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Run/Debug Configurations&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;+&lt;/code&gt; ボタン&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Templates から &lt;code class="docutils literal"&gt;tox&lt;/code&gt; を選ぶ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必要事項を記入して &lt;code class="docutils literal"&gt;Apply&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal"&gt;OK&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Name: 好きな名前&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Argument: tox に渡す引数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例) &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--&lt;/span&gt; &lt;span class="pre"&gt;--reuse-db&lt;/span&gt; &lt;span class="pre"&gt;tests/test_views/test_entries.py::TestEntries::test_it&lt;/span&gt; &lt;span class="pre"&gt;-x&lt;/span&gt; &lt;span class="pre"&gt;-vv&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run only environment: 実行したい環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例) py37, flake8&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python interpreter: Project Innterpreter を選択&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例) &lt;code class="docutils literal"&gt;Remote Python 3.7.3 Docker Compose (app at &lt;span class="pre"&gt;[/Users/fumi23/docker-work/fufufu/docker-compose.yml])&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Workinng directory: なしでもローカルpathでもリモートpathでも動いた&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Path mapping: 設定してもしなくても動いた =&amp;gt; 設定したほうが良さそう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/pycharm/tox-support/RunDebugConfigTox.png" src="https://32imuf.com/images/pycharm/tox-support/RunDebugConfigTox.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/pycharm/tox-support/#id8"&gt;良いところ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;各テストケースのログにパッとアクセスできる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;テストメソッド名を押すと、横にそのテストケースだけのログが出る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;たくさんスクロールしなくて良い&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;失敗したテストケースだけサクッと再実行できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;左側の▶︎丸びっくりボタンを押すだけ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="figure"&gt;
&lt;img alt="/images/pycharm/tox-support/Run.png" src="https://32imuf.com/images/pycharm/tox-support/Run.png"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/pycharm/tox-support/#id9"&gt;イマイチなところ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;BreakPoint で止まらない (いろいろ試したけれど解消できなかった)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ほかにもできないひとがいるみたい? &lt;a class="reference external" href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000140764-Pycharm-debugger-doesn-t-stop-at-any-breakpoint"&gt;https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000140764-Pycharm-debugger-doesn-t-stop-at-any-breakpoint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;たぶん、本来はできるんだと思う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/pycharm/tox-support/#id10"&gt;注意: pytest のバージョンは以下なら動く&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;pytest 5.0.1 (2019-07-04)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;これより新しいバージョンは動かなかった&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PyCharm 2019.2.3 (Professional Edition)
Build #PY-192.6817.19, built on September 25, 2019&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>pycharm</category><guid>https://32imuf.com/pycharm/tox-support/</guid><pubDate>Sun, 13 Oct 2019 15:00:00 GMT</pubDate></item><item><title>SQL アンチパターンまとめ</title><link>https://32imuf.com/sql/sql-antipatterns/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;書籍&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.oreilly.co.jp/books/9784873115894/"&gt;SQL アンチパターン SQL Antipatterns (2013年, オライリー・ジャパン)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Bill Karwin 著&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和田 卓人, 和田 省二 監訳&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小島 修 訳&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="i"&gt;
&lt;h2&gt;I部 データベース論理設計のアンチパターン&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;1章 ジェイウォーク (信号無視)&lt;/h3&gt;
&lt;p&gt;１つの製品に複数ユーザーを連絡先として登録できるようにしたい&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;複数の値を持つ属性を格納する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;カンマ区切りフォーマットのリストを格納する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;交差テーブルを作成する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ひとつひとつの値は個別の行と列に格納しましょう&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;多対多は交差テーブルだな&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;2章 ナイーブツリー (素朴な木)&lt;/h3&gt;
&lt;p&gt;スレッド形式のコメント欄&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;階層構造を格納し、クエリを実行する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;常に親のみに依存する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;代替ツリーモデルを使用する (各設計の比較はP.30を見よ)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;経路列挙 (Path Enumeration)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;入れ子集合 (Nested Set)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;閉包テーブル (Closure Table)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再帰クエリ ※&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;階層構造はエントリと関連 (リレーションシップ) から成り立ちます。これを念頭に、行う作業に合わせて最適な設計手法を選択しましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;再帰クエリめちゃくちゃ便利だな&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;pre class="code mysql"&gt;&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;-- ※ 再帰クエリの例&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;RECURSIVE&lt;/span&gt; &lt;span class="nf"&gt;CommentTree&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-3"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bug_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Comments&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;parent_id&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-7"&gt;&lt;/a&gt;  &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CommentTree&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;Comments&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comment_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_736682a07cfa4f5b8ab9da95d5f48329-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CommentTree&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;bug_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;MySQL 8.0 ~ , PostgreSQL 8.4 ~ ... はサポートしている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id-id"&gt;
&lt;h3&gt;3章 ID リクワイアド (とりあえずID)&lt;/h3&gt;
&lt;p&gt;「行の重複を避けるにはどうすればよいか」と質問された&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;主キーの規約を確立する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;すべてのテーブルに「id」列を用いる&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;状況に応じて適切に調整する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;わかりやすい列名にしよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;規約に縛られない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自然キーと複合キーの活用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;規約は、役立つと思える場合のみ従いましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ずっと気になっていたので腹落ち&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;4章 キーレスエントリー (外部キー嫌い)&lt;/h3&gt;
&lt;p&gt;研究所の設備がダブルブッキングされた&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;データベースのアーキテクチャを単純化する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;外部キー制約を使用しない&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;外部キー制約を宣言する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;複数テーブルの変更をサポートする (カスケード更新)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オーバーヘッド、……にはなりません&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;データベースでのミスの発生を未然に防ぐために、外部キー制約を用いましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;やっぱりつけたほうが良かったんだな!&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="eav"&gt;
&lt;h3&gt;5章 EAV (エンティティ・アトリビュート・バリュー)&lt;/h3&gt;
&lt;p&gt;Issue と Bug と FeatureRequest (機能要望) のはなし&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;可変属性をサポートする&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;汎用的な属性テーブルを使用する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;サブタイプのモデリングを行う&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;シングルテーブル継承 (Single Table Inheritance)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bug と FeatureRequest を同じテーブル (Issues) に入れる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;issue_type 列を持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bug のみが使う列/FeatureRequest のみが使う列、がある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具象テーブル継承 (Concrete Table Inheritance)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bugs テーブルと FeatureRequests テーブルを作る (サブタイプごとにテーブル作成)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;issue_type 列不要&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サブタイプに存在しない属性列を格納せずにすむ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クラステーブル継承 (Class Table Inheritance)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サブタイプに共通する属性を含む基底型のテーブル (Issues) を１つ作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サブタイプごとに追加のテーブルを作る (Bugs/FeatureRequests)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Issues.id を外部キーに持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それぞれに固有の属性のみを持つ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;半構造化データ (シリアライズLOB: Serialized LOB)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;issue_type 列を持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サブタイプに固有の属性は LOB列に持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サブタイプの数が多い、頻繁に新しい属性を追加しなければならない、場合など&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;メタデータは、メタデータのために用いましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ありそう。ある。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;6章 ポリモーフィック関連&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ユーザーがバグについてのコメントを書き込める =&amp;gt; Bugs と Comments が １対多&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ユーザーが機能要望についてのコメントを書き込める =&amp;gt; FeatureRequests と Comments が １対多&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バグについてのコメントも、機能要望についてのコメントも、同じ Comments テーブルに格納したい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;複数の親テーブルを参照する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;二重目的の外部キーを使用する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;関連 (リレーションシップ) を単純化する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;参照を逆にする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交差テーブルの作成 (Bugs/FeatureRequests が具象テーブル継承)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;共通の親テーブルの作成 (Bugs/FeatureRequests がクラステーブル継承)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;テーブル間の関連 (リレーションシップ) には、参照元テーブルと参照先テーブルが常にそれぞれ１つしかないことを忘れないようにしましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;5章と関連してる。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;7章 マルチカラムアトリビュート (複数列属性)&lt;/h3&gt;
&lt;p&gt;バグデータベースに、バグを分類するための「タグ付機能」を追加したい&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;複数の値を持つ属性を格納する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;複数の列を定義する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;従属テーブル (Tags テーブル) を作成する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;同じ意味を持つ値は、１つの列に格納するようにしましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;すんなり。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>sql</category><guid>https://32imuf.com/sql/sql-antipatterns/</guid><pubDate>Sat, 05 Oct 2019 15:00:00 GMT</pubDate></item></channel></rss>