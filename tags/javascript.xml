<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて (Posts about javascript)</title><link>https://32imuf.com/</link><description></description><atom:link href="https://32imuf.com/tags/javascript.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Sun, 19 Jul 2020 15:21:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Next.js: Tutorial deploying</title><link>https://32imuf.com/javascript/nextjs/learn-course/fourth/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#deploying-your-next-js-app" id="id4"&gt;Deploying Your Next.js App&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#deploy-to-vercel" id="id5"&gt;Deploy to Vercel&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id2" id="id6"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#next-js-and-vercel" id="id7"&gt;Next.js and Vercel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#preview-deployment-for-every-push" id="id8"&gt;Preview Deployment for Every Push&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#develop-preview-ship" id="id9"&gt;Develop, Preview, Ship&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#other-hosting-options" id="id10"&gt;Other Hosting Options&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/deploying-nextjs-app"&gt;https://nextjs.org/learn/basics/deploying-nextjs-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-your-next-js-app"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id4"&gt;Deploying Your Next.js App&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="deploy-to-vercel"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id5"&gt;Deploy to Vercel&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js を本番環境にデプロイする一番簡単な方法は、
Next.jsの作成者が開発した Vercel プラットフォームを使用することです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel は all-in-one プラットフォーム&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;with Global CDN supporting static &amp;amp; JAMstack deployment and Serverless Functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;無料で使い始められる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id6"&gt;やりかた&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Vercel アカウントを作る: &lt;a class="reference external" href="https://vercel.com/signup"&gt;https://vercel.com/signup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub と連携する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel for GitHub をインストールする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デプロイしたい Next.js アプリをインポートする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;しばらく待つと、ビルド &amp;amp; デプロイされて deployment URLs が払い出される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これだけ!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-js-and-vercel"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id7"&gt;Next.js and Vercel&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Vercel に Next.js app をデプロイすると、デフォルトで以下がサポートされる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Generation を使っている page と assets  (JS, CSS, images, fonts, etc) は、
自動的に、めちゃくちゃ速い Vercel Edge Network から serve される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server-Side Rendering と API routes を使っている page は、
自動的に、分離された Serverless Functions になる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel には以下ようなたくさんの特徴がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Custom Domains: Next.js アプリにカスタムドメインを割り当ててくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment Variables: 環境変数を設定することもできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatic HTTPS: HTTPS がデフォルトで有効、SSL証明書は自動更新してくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preview-deployment-for-every-push"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id8"&gt;Preview Deployment for Every Push&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;アプリを変更して GitHub で PR すると、 push の度ごとに、
自動的に preview deployment を作成してくれる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitHub の PR に vercel bot が preview URL を表示してくれるので、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;その URL へアクセスすると、最新の preview deployment を見られる。しゅごい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;master へ merge すると、自動的に production deplyment してくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="develop-preview-ship"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id9"&gt;Develop, Preview, Ship&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js アプリを開発するときは &lt;code class="docutils literal"&gt;DPS&lt;/code&gt; workflow を使いましょう&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-hosting-options"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/fourth/#id10"&gt;Other Hosting Options&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js は、 Node.js をサポートするどのホスティングプロバイダーにもデプロイできる。&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;package.json&lt;/code&gt; がこうなっているとするでしょ。&lt;/p&gt;
&lt;pre class="code json"&gt;&lt;a name="rest_code_39dbee3f2f5e41d5b82ab69502b0dc8d-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_39dbee3f2f5e41d5b82ab69502b0dc8d-2"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_39dbee3f2f5e41d5b82ab69502b0dc8d-3"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_39dbee3f2f5e41d5b82ab69502b0dc8d-4"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_39dbee3f2f5e41d5b82ab69502b0dc8d-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next start"&lt;/span&gt;
&lt;a name="rest_code_39dbee3f2f5e41d5b82ab69502b0dc8d-6"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_39dbee3f2f5e41d5b82ab69502b0dc8d-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;するとこう。&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_26231b098f474349896c68106948fb5b-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 自分のホスティングプロバイダー上で ``build`` スクリプトを1回実行すると、&lt;/span&gt;
&lt;a name="rest_code_26231b098f474349896c68106948fb5b-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ``.next`` フォルダーに本番アプリケーションがビルドされる。&lt;/span&gt;
&lt;a name="rest_code_26231b098f474349896c68106948fb5b-3"&gt;&lt;/a&gt;$ npm run build
&lt;a name="rest_code_26231b098f474349896c68106948fb5b-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_26231b098f474349896c68106948fb5b-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ビルドしたらに ``start`` スクリプトでハイブリッドページをサポートする Node.js server を起動し、&lt;/span&gt;
&lt;a name="rest_code_26231b098f474349896c68106948fb5b-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 静的生成されたページとサーバーサイドレンダリングされたページの両方を提供する&lt;/span&gt;
&lt;a name="rest_code_26231b098f474349896c68106948fb5b-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# API Routes もまたサポートしているよ&lt;/span&gt;
&lt;a name="rest_code_26231b098f474349896c68106948fb5b-8"&gt;&lt;/a&gt;$ npm run start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/fourth/</guid><pubDate>Sun, 19 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Tutorial 下</title><link>https://32imuf.com/javascript/nextjs/learn-course/third/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id1" id="id5"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-routes" id="id6"&gt;Dynamic Routes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#how-to-statically-generate-pages-with-dynamic-routes" id="id7"&gt;How to Statically Generate Pages with Dynamic Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id2" id="id8"&gt;実行の順番&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id3" id="id9"&gt;他のページからリンクするとき&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#getstaticpaths" id="id10"&gt;getStaticPaths が実行されるタイミング&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#fallback" id="id11"&gt;Fallback&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#catch-all-routes" id="id12"&gt;Catch-all Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#router" id="id13"&gt;Router&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#pages" id="id14"&gt;404 Pages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-routes-details" id="id15"&gt;Dynamic Routes Details&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id4" id="id16"&gt;ライブラリ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#api-routes" id="id17"&gt;API Routes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#creating-api-routes" id="id18"&gt;Creating API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-api-routes" id="id19"&gt;Dynamic API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id5"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/dynamic-routes"&gt;https://nextjs.org/learn/basics/dynamic-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/api-routes"&gt;https://nextjs.org/learn/basics/api-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-routes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id6"&gt;Dynamic Routes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js は、外部データに依存するパスを持つページを静的に生成できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これは、 Next.js において &lt;code class="docutils literal"&gt;dynamic URLs&lt;/code&gt; を可能にする。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="how-to-statically-generate-pages-with-dynamic-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id7"&gt;How to Statically Generate Pages with Dynamic Routes&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;page&lt;/code&gt; ディレクトリ配下に、 &lt;code class="docutils literal"&gt;[&lt;/code&gt; で始まり &lt;code class="docutils literal"&gt;]&lt;/code&gt; で終わるファイルを作る&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ファイル名: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[id].js&lt;/span&gt;&lt;/code&gt;  =&amp;gt; パス: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/posts/{id}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;[&lt;/code&gt; で始まり &lt;code class="docutils literal"&gt;]&lt;/code&gt; で終わるのが動的 page&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[id].js&lt;/span&gt;&lt;/code&gt; の中に、 &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt; という非同期関数を export する。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;pages/posts/[id].js&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../../components/layout"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllPostIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../../lib/posts"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"next/head"&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'../../components//date'&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;utilStyles&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'../../styles/utils.module.css'&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* page を返す */&lt;/span&gt;
  &lt;span class="c1"&gt;// 受け取った `postData` を使って page を生成&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Head&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;utilStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headingXl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;utilStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;dateString&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;__html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentHtml&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Layout&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ブログIDの一覧を返す&lt;/span&gt;
&lt;span class="cm"&gt;  *&lt;/span&gt;
&lt;span class="cm"&gt;  * `/posts/{id}.js` というパスで page を返すべき ID の一覧を返すよ。&lt;/span&gt;
&lt;span class="cm"&gt;  * 取得するのは単なる文字列の配列ではなく、オブジェクトの配列である必要がある。&lt;/span&gt;
&lt;span class="cm"&gt;  * 各オブジェクトには `params` キーが必要、かつ、 `id` キーを持つオブジェクトが含まれている必要がある。&lt;/span&gt;
&lt;span class="cm"&gt;  * (`[id]` をファイル名に使用しているため。でないと `getStaticPaths` がこけちゃうよ。)&lt;/span&gt;
&lt;span class="cm"&gt;  */&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAllPostIds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="c1"&gt;// fallback: true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ブログID に紐づく、ページの生成に必要なデータを返す&lt;/span&gt;
&lt;span class="cm"&gt;  *&lt;/span&gt;
&lt;span class="cm"&gt;  * 引数の `params` の中に `id` が入ってる&lt;/span&gt;
&lt;span class="cm"&gt;  * (この page は `/posts/{id}.js` というパスでアクセスされる)&lt;/span&gt;
&lt;span class="cm"&gt;  */&lt;/span&gt;
  &lt;span class="c1"&gt;// どこぞから id をキーにブログのデータを取得している&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPostData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// The value of the `props` key will be&lt;/span&gt;
  &lt;span class="c1"&gt;//  passed to the `Post` component&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// `props` key の inside で結果を返す&lt;/span&gt;
      &lt;span class="nx"&gt;postData&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id8"&gt;実行の順番&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticPaths()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticProps()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Post()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id9"&gt;他のページからリンクするとき&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_55e95825a91c4601b2c9058c21eb6d51-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// href に `[]` を使い、 `as` prop に実際のパス (id) を入れてあげる&lt;/span&gt;
&lt;a name="rest_code_55e95825a91c4601b2c9058c21eb6d51-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/posts/[id]"&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/posts/ssg-ssr"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_55e95825a91c4601b2c9058c21eb6d51-3"&gt;&lt;/a&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/a&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_55e95825a91c4601b2c9058c21eb6d51-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="getstaticpaths"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id10"&gt;getStaticPaths が実行されるタイミング&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;開発時: リクエスト毎&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番時: ビルド時&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="fallback"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id11"&gt;Fallback&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;fallback: false&lt;/code&gt;: &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt; から返されるどのページにも合致しないパスがリクエストされた場合、404 page を返す&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;fallback: true&lt;/code&gt;: 404 page を返さない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;のはわかったけれどあとは良くわからないので、ここを読んでください: &lt;a class="reference external" href="https://nextjs.org/docs/basic-features/data-fetching#fallback-pageshttps://nextjs.org/docs/basic-features/data"&gt;https://nextjs.org/docs/basic-features/data-fetching#fallback-pageshttps://nextjs.org/docs/basic-features/data&lt;/a&gt;-fetching#fallback-pages&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="catch-all-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id12"&gt;Catch-all Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;[]&lt;/code&gt; の中に &lt;code class="docutils literal"&gt;...&lt;/code&gt; (three dots) を入れるとすべてのパスをキャッチできるようになる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[...id].js&lt;/span&gt;&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal"&gt;/posts/a&lt;/code&gt; も &lt;code class="docutils literal"&gt;/posts/a/b&lt;/code&gt; も &lt;code class="docutils literal"&gt;/posts/a/b/c&lt;/code&gt; もマッチする。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="router"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id13"&gt;Router&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js router にアクセスしたい場合は、 &lt;code class="docutils literal"&gt;next/router&lt;/code&gt; から &lt;code class="docutils literal"&gt;useRouter&lt;/code&gt; hook を import する&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pages"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id14"&gt;404 Pages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;カスタム 404 Page を作成できる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;pages/404.js&lt;/code&gt; というファイルを作れば良い&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ビルド時に静的生成される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/advanced-features/custom-error-page#404-page"&gt;https://nextjs.org/docs/advanced-features/custom-error-page#404-page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-routes-details"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id15"&gt;Dynamic Routes Details&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Data Fetching: &lt;a class="reference external" href="https://nextjs.org/docs/basic-features/data-fetching"&gt;https://nextjs.org/docs/basic-features/data-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamic Routes: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id16"&gt;ライブラリ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;remark&lt;/code&gt;: Markdown コンテンツのレンダリング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;date-fns&lt;/span&gt;&lt;/code&gt;: 日付フォーマット&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="api-routes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id17"&gt;API Routes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js は API Routes をサポートしている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js 関数として APIエンドポイントを簡単に作成できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="creating-api-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id18"&gt;Creating API Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;pages/api&lt;/code&gt; 配下にこんな関数を作る&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;pages/api/hello.js&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// req = request data, res = response data&lt;/span&gt;
&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// http://localhost:3000/api/hello でアクセスできる&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Serverless Functions (also known as Lambdas) としてデプロイできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do Not Fetch an API Route from &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; or &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;良い Use Case は、入力フォームのハンドリングです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;page にフォームを作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; API Route に POSTリクエストする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; API Route で直接 DBに保存する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API Route のコードはクライアントバンドルされないので、安全にサーバーサイドコードが記述できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-api-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id19"&gt;Dynamic API Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;API Routes は、通常の page と同様に動的にできる&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/api-routes/dynamic-api-routes"&gt;https://nextjs.org/docs/api-routes/dynamic-api-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/third/</guid><pubDate>Sat, 18 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Tutorial 中</title><link>https://32imuf.com/javascript/nextjs/learn-course/second/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id1" id="id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#pre-rendering-and-data-fetching" id="id3"&gt;Pre-rendering and Data Fetching&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#pre-rendering" id="id4"&gt;Pre-rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#two-forms-of-pre-rendering" id="id5"&gt;Two Forms of Pre-rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#per-page-basis" id="id6"&gt;Per-page Basis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#when-to-use-static-generation-v-s-server-side-rendering" id="id7"&gt;When to Use Static Generation v.s. Server-side Rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#static-generation-with-and-without-data" id="id8"&gt;Static Generation with and without Data&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#static-generation-with-data-using-getstaticprops" id="id9"&gt;Static Generation with Data using &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#fetching-data-at-request-time" id="id10"&gt;Fetching Data at Request Time&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#using-getserversideprops" id="id11"&gt;Using &lt;code class="docutils literal"&gt;getServerSideProps&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#client-side-rendering" id="id12"&gt;Client-side Rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#swr" id="id13"&gt;SWR&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/data-fetching"&gt;https://nextjs.org/learn/basics/data-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pre-rendering-and-data-fetching"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id3"&gt;Pre-rendering and Data Fetching&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pre-rendering"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id4"&gt;Pre-rendering&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;デフォルトでは、Next.js はすべてのページを事前にレンダリングする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クライアントサイドの JavaScript で HTML を生成しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事前にレンダリングしておくと、パフォーマンスとSEO が向上する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js によって生成された HTML は、そのページに必要最小限の JavaScript コードと関連づけられている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブラウザによってページが読み込まれると、その JavaScript コードが実行されてページが完全に interactive になる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プレーンな React.jsアプリ（Next.js なし）の場合、事前レンダリングは行われない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="two-forms-of-pre-rendering"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id5"&gt;Two Forms of Pre-rendering&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js の Pre-rendering には、以下の 2つの形式がある。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Static Generation: build 時に HTML を生成する。各リクエストで再利用される。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server-side Rendering: リクエストごとに HTMLを生成する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;開発モードでは、すべてのページがリクエストごとに事前レンダリングされる&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="per-page-basis"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id6"&gt;Per-page Basis&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.jsでは、ページごとに使用する Pre-rendering 形式を選択できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ひとつのアプリケーション内で、2つの形式を混在させることができる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="when-to-use-static-generation-v-s-server-side-rendering"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id7"&gt;When to Use Static Generation v.s. Server-side Rendering&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;可能な限り &lt;code class="docutils literal"&gt;Static Generation&lt;/code&gt; を使うのがおすすめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一度ページを build すれば CDN で提供できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リクエストごとにサーバーでページをレンダリングするよりもずっと高速&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;頻繁にデータが更新されたり、リクエストごとに content が変わるような page には &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Server-side&lt;/span&gt; Rendering&lt;/code&gt; を使う&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;速度は遅くなるが常に最新の状態&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="static-generation-with-and-without-data"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id8"&gt;Static Generation with and without Data&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;Static Generation&lt;/code&gt; はデータの有無にかかわらずできる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;外部データを取得する必要のない page: アプリが本番用に build されるときに自動的に  &lt;code class="docutils literal"&gt;Static Generation&lt;/code&gt; される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外部データを取得しないと HTML レンダリングできない page: このケースも Next.js は out of the box で サポートしている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="static-generation-with-data-using-getstaticprops"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id9"&gt;Static Generation with Data using &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;外部データを取得して page の props として渡すには、 &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; を使う&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; は、サーバーサイドのみで実行される&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クライアント側では実行されない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JS のバンドルにも含まれない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; が実行されるタイミング:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開発時 ( &lt;code class="docutils literal"&gt;npm run dev&lt;/code&gt; or &lt;code class="docutils literal"&gt;yarn dev&lt;/code&gt;): リクエストの度&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番時: ビルド時&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ビルド時に実行されることを想定しているため、クエリパラメータや HTTPヘッダーなど、リクエスト時にのみ利用可能なデータを使用することはできない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;page ファイルからのみ export できる (非 page ファイルからは export できない)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;詳しくは =&amp;gt; &lt;a class="reference external" href="https://nextjs.org/docs/basic-features/data-fetching"&gt;https://nextjs.org/docs/basic-features/data-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リクエスト時にデータ取得したい場合は Static Generation は良いアイデアではない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;そういうときは、 &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Server-side&lt;/span&gt; Rendering&lt;/code&gt; するか pre-rendering をスキップしよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="fetching-data-at-request-time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id10"&gt;Fetching Data at Request Time&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="using-getserversideprops"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id11"&gt;Using &lt;code class="docutils literal"&gt;getServerSideProps&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ビルド時ではなく、リクエスト時にデータ取得が必要ならば、 &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Server-side&lt;/span&gt; Rendering&lt;/code&gt; してみよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Server-side Rendering するには、 &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; のかわりに &lt;code class="docutils literal"&gt;getServerSideProps&lt;/code&gt; を
page から export する&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// `getServerSideProps` はリクエスト時に呼び出されるものなので、&lt;/span&gt;
&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;//  context にはリクエストパラメーターが含まれている&lt;/span&gt;
&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-4"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-5"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-6"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;// props for your component&lt;/span&gt;
&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-8"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_a5df498427464c01a6a057934654ab40-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time to first byte (TTFB) は &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; より遅くなる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;追加設定なしに CDN に 生成結果をキャッシュすることはできない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="client-side-rendering"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id12"&gt;Client-side Rendering&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;データを事前レンダリングする必要がないならば、 &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Client-side&lt;/span&gt; Rendering&lt;/code&gt; できます&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;page のうち、外部データが不要な部分は静的に生成 (事前レンダリング) して、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;page ロード時に、クライアントから JavaScript で外部データを取得して、
残りの部分を入れ込みます&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;user dashboard pages などに使うと良い&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="swr"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id13"&gt;SWR&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;データ取得のための React hook&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クライアントサイドからデータ取得するならとってもおすすめ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;いろいろできるらしい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;詳細はこちら =&amp;gt; &lt;a class="reference external" href="https://swr.now.sh/"&gt;https://swr.now.sh/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/second/</guid><pubDate>Sat, 11 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Tutorial 上</title><link>https://32imuf.com/javascript/nextjs/learn-course/first/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#create-a-next-js-app" id="id4"&gt;Create a Next.js App&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#navigate-between-pages" id="id5"&gt;Navigate Between Pages&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#pages-in-next-js" id="id6"&gt;Pages in Next.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#link-component" id="id7"&gt;Link Component&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#client-side-navigation" id="id8"&gt;Client-Side Navigation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#assets-metadata-and-css" id="id9"&gt;Assets, Metadata, and CSS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#assets" id="id10"&gt;Assets&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#metadata" id="id11"&gt;Metadata&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#css-styling" id="id12"&gt;CSS Styling&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#writing-and-importing-css" id="id13"&gt;Writing and Importing CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#layout-component" id="id14"&gt;Layout Component&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#adding-css" id="id15"&gt;Adding CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#global-styles" id="id16"&gt;Global Styles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#adding-global-css" id="id17"&gt;Adding Global CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id2" id="id18"&gt;まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;https://nextjs.org/learn/basics/create-nextjs-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/navigate-between-pages"&gt;https://nextjs.org/learn/basics/navigate-between-pages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/assets-metadata-css"&gt;https://nextjs.org/learn/basics/assets-metadata-css&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-next-js-app"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id4"&gt;Create a Next.js App&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Node.js がインストールされていること&lt;/span&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-2"&gt;&lt;/a&gt;$ node -v
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリを作成するディレクトリを作成&lt;/span&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-5"&gt;&lt;/a&gt;$ mkdir learn-course
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-6"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; learn-course
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Next.jsアプリを作成する&lt;/span&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 内部では `create-next-app` というツールを使っている&lt;/span&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-10"&gt;&lt;/a&gt;$ npm init next-app nextjs-blog --example &lt;span class="s2"&gt;"https://github.com/vercel/next-learn-starter/tree/master/learn-starter"&lt;/span&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 開発サーバーの起動&lt;/span&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-13"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; nextjs-blog
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# port 3000 で起動する (http://localhost:3000/)&lt;/span&gt;
&lt;a name="rest_code_49bf0976e2ca4d7993d39ee6d69e31c4-15"&gt;&lt;/a&gt;$ npm run dev
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="navigate-between-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id5"&gt;Navigate Between Pages&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pages-in-next-js"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id6"&gt;Pages in Next.js&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js では、ページは &lt;code class="docutils literal"&gt;pages&lt;/code&gt; ディレクトリ配下のファイルから export された React Component です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ファイル名とパスが関連付いている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;pages/index.js&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal"&gt;/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/first-post.js&lt;/span&gt;&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/posts/first-post&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="link-component"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id7"&gt;Link Component&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ページ間のリンクは &lt;code class="docutils literal"&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; React Component を使う&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_514fb375268345fda4f7a3541ac63e67-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next/link'&lt;/span&gt;
&lt;a name="rest_code_514fb375268345fda4f7a3541ac63e67-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_514fb375268345fda4f7a3541ac63e67-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 中に a tag が入る&lt;/span&gt;
&lt;a name="rest_code_514fb375268345fda4f7a3541ac63e67-4"&gt;&lt;/a&gt;&lt;span class="nx"&gt;Read&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/posts/first-post"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/a&amp;gt;&amp;lt;/Link&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="client-side-navigation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id8"&gt;Client-Side Navigation&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Link&lt;/code&gt; Component は &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;client-side&lt;/span&gt; navigation&lt;/code&gt; なるものを可能にする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ページ遷移が JavaScript を使用して行われる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブラウザによって行われるデフォルトのナビゲーションより速い&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は、自動的に code splitting するので、それぞれのページはそのページに必要な部分だけロードする。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;さらに production ビルドでは、 &lt;code class="docutils literal"&gt;Link&lt;/code&gt; Component がブラウザの viewport に現れるたびに、
Next.js があらかじめ自動的にバックグラウンドでリンク先ページのコードを読み込むので、
いざユーザーがリンクをクリックした暁には、ささっとページ遷移できちゃう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="assets-metadata-and-css"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id9"&gt;Assets, Metadata, and CSS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next.js は CSS 及び Sass を built-in サポートしている&lt;/p&gt;
&lt;div class="section" id="assets"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id10"&gt;Assets&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Next.js は画像のような静的ファイルを serve できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静的ファイルは、アプリケーションのトップレベルの &lt;code class="docutils literal"&gt;public&lt;/code&gt; ディレクトリに配置する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;public&lt;/code&gt; ディレクトリ配下の静的ファイルは、 &lt;code class="docutils literal"&gt;pages&lt;/code&gt; と同様に、アプリケーションルートから参照できる&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_82cf68c5d1d3497fa888c1135fb8af51-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// app_root/public/vercel.svg を参照する場合&lt;/span&gt;
&lt;a name="rest_code_82cf68c5d1d3497fa888c1135fb8af51-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/vercel.svg"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Vercel Logo"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"logo"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;public&lt;/code&gt; ディレクトリには、そのほかにも &lt;code class="docutils literal"&gt;robots.txt&lt;/code&gt; など静的な aseets を置くとよい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="metadata"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id11"&gt;Metadata&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&amp;lt;title&amp;gt;&lt;/code&gt; など、ページのメタデータを変更したい場合は &lt;code class="docutils literal"&gt;&amp;lt;Head&amp;gt;&lt;/code&gt; React Component を使う&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_c629f8604bc744aaacb374840e7df083-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next/head'&lt;/span&gt;
&lt;a name="rest_code_c629f8604bc744aaacb374840e7df083-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_c629f8604bc744aaacb374840e7df083-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Head の H は大文字&lt;/span&gt;
&lt;a name="rest_code_c629f8604bc744aaacb374840e7df083-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_c629f8604bc744aaacb374840e7df083-5"&gt;&lt;/a&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_c629f8604bc744aaacb374840e7df083-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="css-styling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id12"&gt;CSS Styling&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSS-in-JS ライブラリ:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React Component 内で CSS を記述できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS スタイルがスコープされる（他の Component は影響を受けない）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_f941008d1f994185944aa362f28ecc78-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// e.g. styled-jsx を使ってページ内で有効な CSS をあてる&lt;/span&gt;
&lt;a name="rest_code_f941008d1f994185944aa362f28ecc78-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;a name="rest_code_f941008d1f994185944aa362f28ecc78-3"&gt;&lt;/a&gt;&lt;span class="sb"&gt;  …&lt;/span&gt;
&lt;a name="rest_code_f941008d1f994185944aa362f28ecc78-4"&gt;&lt;/a&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;styled-jsx&lt;/span&gt;&lt;/code&gt; ライブラリを built-in support しているが、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;styled-components&lt;/span&gt;&lt;/code&gt; や &lt;code class="docutils literal"&gt;emotion&lt;/code&gt; など他のポピュラーな CSS-in-JS ライブラリを使うこともできる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;使っているひとのはなしだと「&lt;code class="docutils literal"&gt;antdesign&lt;/code&gt; と &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;styled-components&lt;/span&gt;&lt;/code&gt; は使わないと損なレベルで完成度高い。」&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使おう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-and-importing-css"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id13"&gt;Writing and Importing CSS&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js は CSS 及び Sass を built-in サポートしているので、 &lt;code class="docutils literal"&gt;.css&lt;/code&gt; や &lt;code class="docutils literal"&gt;.scss&lt;/code&gt; ファイルを import できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;popular CSS ライブラリーの &lt;code class="docutils literal"&gt;Tailwind CSS&lt;/code&gt; もサポートしているよ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="layout-component"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id14"&gt;Layout Component&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;すべてのページに共通の &lt;code class="docutils literal"&gt;Layout&lt;/code&gt; Component を、 &lt;code class="docutils literal"&gt;components&lt;/code&gt; top-level ディレクトリに作る&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_b6116d8dca2c4bb389acaa44172d505e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// components/layout.js&lt;/span&gt;
&lt;a name="rest_code_b6116d8dca2c4bb389acaa44172d505e-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b6116d8dca2c4bb389acaa44172d505e-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b6116d8dca2c4bb389acaa44172d505e-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b6116d8dca2c4bb389acaa44172d505e-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_b6116d8dca2c4bb389acaa44172d505e-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それを、各 page から import して利用できる&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// pages/posts/first-post.js&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../../components/layout"&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FirstPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-6"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-7"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-8"&gt;&lt;/a&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-9"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Head&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-10"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-11"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-12"&gt;&lt;/a&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-13"&gt;&lt;/a&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Back&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/a&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-14"&gt;&lt;/a&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-15"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h2&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-16"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Layout&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-17"&gt;&lt;/a&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f49a3b67cdb04d40b25de423a39acd90-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-css"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id15"&gt;Adding CSS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CSS Modules を使うと、 React Component に CSSファイルをインポートできる&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code css"&gt;&lt;a name="rest_code_e3cf5325c34b4d858d76b1f90e3fef5c-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;/* components/layout.module.css */&lt;/span&gt;
&lt;a name="rest_code_e3cf5325c34b4d858d76b1f90e3fef5c-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e3cf5325c34b4d858d76b1f90e3fef5c-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_e3cf5325c34b4d858d76b1f90e3fef5c-4"&gt;&lt;/a&gt;  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_e3cf5325c34b4d858d76b1f90e3fef5c-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_e3cf5325c34b4d858d76b1f90e3fef5c-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code javascript"&gt;&lt;a name="rest_code_898cff602a32492f9b6f7be02c647092-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// components/layout.js&lt;/span&gt;
&lt;a name="rest_code_898cff602a32492f9b6f7be02c647092-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"./layout.module.css"&lt;/span&gt;
&lt;a name="rest_code_898cff602a32492f9b6f7be02c647092-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_898cff602a32492f9b6f7be02c647092-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_898cff602a32492f9b6f7be02c647092-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_898cff602a32492f9b6f7be02c647092-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CSS Modules のファイル名は &lt;code class="docutils literal"&gt;.module.css&lt;/code&gt; で終わる名前にすること!!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS Modules により、一意の CSSクラス名が自動的に生成されるので、クラス名の衝突を心配する必要がない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;layout_container__2t4v2&lt;/code&gt; こんなクラス名が自動生成される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js の code splittin 機能が CSSモジュールでも機能するので、各ページに読み込まれる CSS量は最小限になる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS Modules は、ビルド時に JavaScriptバンドルから抽出され、
Next.js によって自動的にロードされる &lt;code class="docutils literal"&gt;.css&lt;/code&gt; ファイルを生成する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="global-styles"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id16"&gt;Global Styles&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;すべてのページにスタイルを適用したいときは &lt;code class="docutils literal"&gt;App&lt;/code&gt; Compnent を使う&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;pages&lt;/code&gt; ディレクトリに &lt;code class="docutils literal"&gt;_app.js&lt;/code&gt; を作成し、↓のような感じで書く&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_564c9d26e9e64e8eb73f3361717dba6c-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// pages/_app.js&lt;/span&gt;
&lt;a name="rest_code_564c9d26e9e64e8eb73f3361717dba6c-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_564c9d26e9e64e8eb73f3361717dba6c-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_564c9d26e9e64e8eb73f3361717dba6c-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;App&lt;/code&gt; Compnent はすべてのページに共通する top-level Component です&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;この Compnent を使用して、ページ間を移動するときに状態を維持できます&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;_app.js&lt;/code&gt; を追加した際は、 dev server の再起動が必要&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-global-css"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id17"&gt;Adding Global CSS&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Next.js では、 global CSS files を追加できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;global CSS files は、 &lt;code class="docutils literal"&gt;_app.js&lt;/code&gt; からのみ import できる。ほかのところからは import できない (page 上のすべてのエレメントに影響するため) 。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;global CSS files は、配置先と名前はなんでもよい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;styles/global.css&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/* アプリケーション全体に適用する基本スタイルを書く感じ */&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Segoe&lt;/span&gt; &lt;span class="n"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Oxygen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Cantarell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fira&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Droid&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt; &lt;span class="n"&gt;Neue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#0070f3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;pages/_app.js&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;"../styles/global.css"&lt;/span&gt;

&lt;span class="nt"&gt;export&lt;/span&gt; &lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt; &lt;span class="nt"&gt;App&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;Component,&lt;/span&gt; &lt;span class="err"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;Component&lt;/span&gt; &lt;span class="err"&gt;{...pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id18"&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;To use CSS Modules, import a CSS file named &lt;code class="docutils literal"&gt;*.module.css&lt;/code&gt; from any component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To use global CSS, import a CSS file in &lt;code class="docutils literal"&gt;pages/_app.js&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/first/</guid><pubDate>Sat, 04 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js TypeScript チュートリアル</title><link>https://32imuf.com/javascript/nextjs/tutorial/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/tutorial/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/tutorial/#next-js-note" id="id4"&gt;Next.js の note&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/tutorial/#note" id="id5"&gt;その他 note&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/tutorial/#id2" id="id6"&gt;コマンド書き留め&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/tutorial/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://programmagick.com/sections/nextjs_tutorial/sample"&gt;https://programmagick.com/sections/nextjs_tutorial/sample&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/docs/"&gt;https://nextjs.org/docs/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="next-js-note"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/tutorial/#id4"&gt;Next.js の note&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js 公式のサンプル集: &lt;a class="reference external" href="https://github.com/vercel/next.js/tree/master/examples"&gt;https://github.com/vercel/next.js/tree/master/examples&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;.babelrc&lt;/code&gt; ファイル: ビルド設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Next.jsでは &lt;code class="docutils literal"&gt;.babelrc&lt;/code&gt; を作成・編集してビルド設定を変更できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;next.config.js&lt;/code&gt; ファイル: Next.js 全般の設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript を使うよ、もここに書く&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom App:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/docs/advanced-features/custom-app"&gt;https://nextjs.org/docs/advanced-features/custom-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/docs/basic-features/typescript#custom-app"&gt;https://nextjs.org/docs/basic-features/typescript#custom-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ファイル名と配置先は決まっているもよう =&amp;gt; こう &lt;code class="docutils literal"&gt;./pages/_app.tsx&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は App コンポーネントを使用してページを初期化する。そいつをオーバーライドしてページの初期化をコントロールできる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;すべてのページで共有するコンポーネント （メニューやツールバーなど） が必要な場合は、App を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom Document: &lt;a class="reference external" href="https://nextjs.org/docs/advanced-features/custom-document"&gt;https://nextjs.org/docs/advanced-features/custom-document&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ファイル名と配置先は決まっているもよう =&amp;gt; こう &lt;code class="docutils literal"&gt;./pages/_document.tsx&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自分のアプリケーションの &lt;code class="docutils literal"&gt;&amp;lt;html&amp;gt;&lt;/code&gt; や &lt;code class="docutils literal"&gt;&amp;lt;body&amp;gt;&lt;/code&gt; タグを拡張するために使う感じ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&amp;lt;Html&amp;gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&amp;lt;Head /&amp;gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&amp;lt;Main /&amp;gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&amp;lt;NextScript /&amp;gt;&lt;/code&gt; は必ず必要のもよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Document はサーバーサイドのみでレンダリングされる。 &lt;code class="docutils literal"&gt;onClick&lt;/code&gt; とかは働かない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;static&lt;/code&gt; ディレクトリ: 配下に画像などの静的ファイルを置くと、
Node.js 経由で静的ファイルを配信できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本番では Node.js (Next.js) をアプリケーション処理に特化させ、
Nginx や各種CDN などに静的ファイル配信を任せる構成が一般的とのこと&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getInitialProps&lt;/code&gt;: &lt;a class="reference external" href="https://nextjs.org/docs/api-reference/data-fetching/getInitialProps"&gt;https://nextjs.org/docs/api-reference/data-fetching/getInitialProps&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サーバーサイドレンダリングを可能にし、初期データ設定できる (SEO に役立つらしい)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非同期でデータを取得し、 Props に初期値を設定できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static メソッドとして任意の Page にくっつけられる非同期関数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引数に &lt;code class="docutils literal"&gt;context&lt;/code&gt; オブジェクトを受け取る (いろいろ properties が入っている)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js 9.3 以降を使っている場合は &lt;code class="docutils literal"&gt;getInitialProps&lt;/code&gt; のかわりに &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; や &lt;code class="docutils literal"&gt;getServerSideProps&lt;/code&gt; がオススメとのこと。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;# TODO: Next.js の Getting Started もやると良さそう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="note"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/tutorial/#id5"&gt;その他 note&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;export&lt;/code&gt; : export するとほかのモジュールから import できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;...initialProps&lt;/span&gt;&lt;/code&gt; : 可変長引数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「antdesign と styled-components は使わないと損なレベルで完成度高い。」との情報を得た。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/tutorial/#id6"&gt;コマンド書き留め&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-1"&gt;&lt;/a&gt;$ mkdir curry
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-2"&gt;&lt;/a&gt;$ npm init -y
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-3"&gt;&lt;/a&gt;$ npm install next react react-dom styled-components
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# TypeScript で Next.js を動作させるため、 Zeit社が提供する公式プラグインをインストールする&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-6"&gt;&lt;/a&gt;$ npm install --save-dev @zeit/next-typescript
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# React等の型定義ファイルをインストールする&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-9"&gt;&lt;/a&gt;$ npm install --save-dev @types/react
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-10"&gt;&lt;/a&gt;$ npm install --save-dev @types/react-dom
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-11"&gt;&lt;/a&gt;$ npm install --save-dev @types/next
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-12"&gt;&lt;/a&gt;$ npm install --save-dev @types/styled-components
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これもいるっぽい&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-15"&gt;&lt;/a&gt;$ npm install --save-dev typescript @types/node
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ビルド &amp;amp; アプリ起動&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# http://localhost:3000 でアクセスできる&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-19"&gt;&lt;/a&gt;$ npm run dev
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/tutorial/</guid><pubDate>Sun, 21 Jun 2020 15:00:00 GMT</pubDate></item><item><title>React チュートリアル</title><link>https://32imuf.com/javascript/react/tutorial/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#id2" id="id4"&gt;ふむ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#memo" id="id5"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/tutorial/tutorial.html"&gt;https://ja.reactjs.org/tutorial/tutorial.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hello-world.html"&gt;https://ja.reactjs.org/docs/hello-world.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id4"&gt;ふむ&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;インタラクティブな三目並べゲーム (tic-tac-toe) を作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Create React App&lt;/code&gt;: &lt;a class="reference external" href="https://ja.reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;https://ja.reactjs.org/docs/create-a-new-react-app.html#create-react-app&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;フロントエンドのビルドパイプラインを構築する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バックエンドのロジックやデータベース接続は扱わない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部では Babel と webpack を利用している&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンポーネントは &lt;code class="docutils literal"&gt;props&lt;/code&gt; （“&lt;code class="docutils literal"&gt;properties&lt;/code&gt;” の略）と呼ばれるパラメータを受け取り、&lt;code class="docutils literal"&gt;render&lt;/code&gt; メソッドを通じて、表示するビューの階層構造を返します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;this.state&lt;/code&gt; はそれが定義されているコンポーネント内でプライベートと見なすべきものです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript のクラスでは、サブクラスのコンストラクタを定義する際は常に &lt;code class="docutils literal"&gt;super&lt;/code&gt; を呼ぶ必要があります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;constructor&lt;/code&gt; を持つ React のクラスコンポーネントでは、すべてコンストラクタを &lt;code class="docutils literal"&gt;super(props)&lt;/code&gt; の呼び出しから始めるべきです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;state&lt;/code&gt; を親コンポーネントにリフトアップ (lift up) することは React コンポーネントのリファクタリングでよくあることです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では、イベントを表す &lt;code class="docutils literal"&gt;props&lt;/code&gt; には &lt;code class="docutils literal"&gt;on[Event]&lt;/code&gt; という名前、イベントを処理するメソッドには &lt;code class="docutils literal"&gt;handle[Event]&lt;/code&gt; という名前を付けるのが慣習となっています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React における関数コンポーネントとは、&lt;code class="docutils literal"&gt;render&lt;/code&gt; メソッドだけを有して自分の &lt;code class="docutils literal"&gt;state&lt;/code&gt; を持たないコンポーネントを、よりシンプルに書くための方法です。React.Component を継承するクラスを定義する代わりに、&lt;code class="docutils literal"&gt;props&lt;/code&gt; を入力として受け取り表示すべき内容を返す関数を定義します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リストには &lt;code class="docutils literal"&gt;key&lt;/code&gt; が必要です&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「実を言うと class コンポーネントはもうあんまり使わないから state も使わないんだよなぁ。関数コンポーネントで書いて、状態はフックで管理するのが今どきのやり方らしい。」という情報を得た&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id5"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_79a621258ce947d89711ee938532c019-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://nodejs.org/en/&lt;/span&gt;
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Node.js のバージョンを確認する&lt;/span&gt;
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-3"&gt;&lt;/a&gt;$ node --version
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Create React App で新しいプロジェクトを作成する&lt;/span&gt;
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npx: npm 5.2 から利用できるパッケージランナーツール&lt;/span&gt;
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-7"&gt;&lt;/a&gt;$ npx create-react-app tic-tac-toe
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリを起動&lt;/span&gt;
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-10"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; tic-tac-toe
&lt;a name="rest_code_79a621258ce947d89711ee938532c019-11"&gt;&lt;/a&gt;$ npm start
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/tutorial/</guid><pubDate>Sat, 20 Jun 2020 15:00:00 GMT</pubDate></item><item><title>React そのに</title><link>https://32imuf.com/javascript/react/part2/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#id2" id="id4"&gt;ほむほむ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#memo" id="id5"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://reactjs.org/"&gt;https://reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/"&gt;https://ja.reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id4"&gt;ほむほむ&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;react-router: Routing 機能を提供するサードパーティパッケージ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;semantic-ui-react: UIツールキット Semantic UI に実装された UI に関する機能を React Component として利用できるようにしたもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios: Promise をベースとした HTTP クライアント。サーバーサイドアプリケーションにリクエストを送信する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RESTful API のクライアントとしてよく利用する機能や設定があらかじめ用意されている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;.tsx&lt;/code&gt;: TypeScriptで記述し、かつJSXを利用するもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;.ts&lt;/code&gt;: TypeScriptでJSXを利用しないもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小さい中身も Component だし、まわりの外側も Component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;props として渡せるのは値だけではない。オブジェクトや関数などあらゆるものを受け渡せる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では、データは親Component から子Component へ流れるというデータフローの原則がある。親子関係にない Component間で情報を直接やりとりすることはできない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;そういうときは、 親Component を経由して props で受け渡す&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;スピナー: &lt;code class="docutils literal"&gt;import {Dimmer, Loader} from &lt;span class="pre"&gt;'semantic-ui-react'&lt;/span&gt;&lt;/code&gt; とか&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component のアンマウントと HTTPリクエストのキャンセル: Axios の場合、 CancelToken のしくみを利用して処理の中断を実現できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id5"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# プロジェクト作成&lt;/span&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-2"&gt;&lt;/a&gt;$ mkdir react-sample-app
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-3"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; react-sample-app
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-4"&gt;&lt;/a&gt;$ npm init -y
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 依存パッケージのインストール&lt;/span&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-7"&gt;&lt;/a&gt;$ npm i react@ react-dom@
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-8"&gt;&lt;/a&gt;$ npm i react-router@ react-router-dom@
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-9"&gt;&lt;/a&gt;$ npm i semantic-ui-react@
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-10"&gt;&lt;/a&gt;$ npm i axios@
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 依存パッケージのインストール (開発環境用)&lt;/span&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-13"&gt;&lt;/a&gt;$ npm i -D @types/react@ @types/react-dom@
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-14"&gt;&lt;/a&gt;$ npm i -D @types/react-router@ @types/react-router-dom@
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-15"&gt;&lt;/a&gt;$ npm i -D typescript@ ts-loader@
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-16"&gt;&lt;/a&gt;$ npm i -D webpack webpack-cli webpack-dev-server
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# tslint (2019年から非推奨) のインストール&lt;/span&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-19"&gt;&lt;/a&gt;$ npm i -D tslint
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-20"&gt;&lt;/a&gt;$ npm i tslint-config-typings
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# eslint のインストール&lt;/span&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-22"&gt;&lt;/a&gt;$ npm i -D eslint
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# しばしアプリを実装...&lt;/span&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリケーションの起動&lt;/span&gt;
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-27"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; react-sample-app
&lt;a name="rest_code_12cb972877254bc2acf3f49a044baf4f-28"&gt;&lt;/a&gt;$ npm run start
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/part2/</guid><pubDate>Mon, 15 Jun 2020 15:00:00 GMT</pubDate></item><item><title>React そのいち</title><link>https://32imuf.com/javascript/react/part1/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#id1" id="id5"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#id2" id="id6"&gt;これが大事&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#component" id="id7"&gt;Component の構成要素&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#props-state" id="id8"&gt;props と state&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#id3" id="id9"&gt;Component ライフサイクル&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part1/#id4" id="id10"&gt;その他&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id5"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://reactjs.org/"&gt;https://reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/"&gt;https://ja.reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id6"&gt;これが大事&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;props と state の役割と利用方法&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component ライフサイクルの管理&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="component"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id7"&gt;Component の構成要素&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;constructor()&lt;/code&gt;: ECMAScript 2015 から利用できるようになったクラスのコンストラクタ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React の Component としては主に state の初期状態をセットするのに利用する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;state: Component のレンダリングに結びつく値を管理する状態&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;handleInputChange()&lt;/code&gt; ※名前は任意: ユーザの操作を Component の state に反映させる役割&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentDidMount()&lt;/code&gt;: Component ライフサイクルに関するメソッド&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;render()&lt;/code&gt;: VirtualDOM（VDOM）のレンダリングに関する処理を行うメソッド。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reactは、標準では HTML のレンダリングのために JSX を使用する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Preview も Component のひとつ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class Component: React.Component を継承して定義する Component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functional Component: 関数として定義される Component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React は Component を入れ子にしてアプリケーションを組み立てます&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="props-state"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id8"&gt;props と state&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;props:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Component に対する入力、親 Component から子 Component に渡される(降ろされる) もの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;props は読み込み専用、変更してはいけない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Component 自体が持つ「状態」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ユーザが入力中のテキストや、チェックボックスがチェックされているかどうかの判定、データの読み込みが完了したかどうかの情報などが「状態」に該当する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;props とは異なり、 state は変更可能。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では state を変更することで、外部データやユーザの入力内容を Component に反映して行く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state を変更する場合は、必ず &lt;code class="docutils literal"&gt;this.setState()&lt;/code&gt; を利用する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では、classのプロパティを自由に追加できることになっている。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プロパティとして管理するか state にするかは、 &lt;code class="docutils literal"&gt;render()&lt;/code&gt; の中で利用するかどうかで判断する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;render()&lt;/code&gt; の中で利用する場合: state  &amp;lt;= fumi23: 外に出ていくやつ?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;そうでない場合: はプロパティとして管理する &amp;lt;= fumi23: 中だけで使うやつ?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id9"&gt;Component ライフサイクル&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ライフサイクル: 「 Component がマウントされたとき」や「 Component が props (読み取り専用のやつ) を受け取るとき」といった Component の状態の推移のこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ライフサイクルのわかりやすい図: &lt;a class="reference external" href="https://reactjs.org/docs/react-component.html#the-component-lifecycle"&gt;https://reactjs.org/docs/react-component.html#the-component-lifecycle&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentDidMount()&lt;/code&gt;: Component がマウントされたときに一度だけ実行される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DOM が存在していることを前提とする処理を記述する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bootstrap のような CSSフレームワークを利用する場合にしばしば必要となるHTML要素に対する初期化処理はここでやると良い&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;イベントリスナーの定義&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外部から HTTP リクエストでデータを取得する処理の呼び出し&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentWillUnmount()&lt;/code&gt;: Component がアンマウントされるときに実行される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;アンマウントはたとえば SPA においてページ遷移が発生した際に、レンダリング中の Component がレンダリング対象から外れた場合に発生する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;タイマーの解除&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非同期通信のキャンセル処理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;イベントリスナーの解除&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentWillReceiveProps()&lt;/code&gt;: Component が props を受け取るとき&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;マウントされた Component が新しい props を受け取るときに実行される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「新しく受け取る」 props を引数に取る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;現在の props の内容と、新しく受け取る props の内容を比較して処理を分岐できる&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_ff641e53764f4200a6fa66093d096039-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 例&lt;/span&gt;
&lt;a name="rest_code_ff641e53764f4200a6fa66093d096039-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;componentWillReceiveProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff641e53764f4200a6fa66093d096039-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff641e53764f4200a6fa66093d096039-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;//props.hogeが変更された場合の処理&lt;/span&gt;
&lt;a name="rest_code_ff641e53764f4200a6fa66093d096039-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ff641e53764f4200a6fa66093d096039-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentDidUpdate()&lt;/code&gt;: Component がアップデートされたとき (props や state が変化した場合) に実行される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;変更前の props と state を引数に取る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentWillReceiveProps()&lt;/code&gt; と同様、変更前と変更後の値を比較して処理を分岐できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初回マウント時には実行されない (初回は &lt;code class="docutils literal"&gt;componentDidMount()&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;shouldComponentUpdate()&lt;/code&gt;: Component のパフォーマンス改善に&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;更新後の props と 更新後の state を引数に取る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React の Component では、 props や state が変更された場合、再レンダリング = &lt;code class="docutils literal"&gt;render()&lt;/code&gt; の再実行が発生する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;shouldComponentUpdate()&lt;/code&gt; を利用すると、再レンダリングの有無を制御できます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;shouldComponentUpdate()&lt;/code&gt; が true を戻した場合は再レンダリングが行われ、 false を戻した場合は再レンダリングが行われない。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不必要な再レンダリングを抑制できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;componentDidCatch()&lt;/code&gt;: 子（あるいは子以下の） Component で発生した例外を catch した場合に実行される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Componentのいずれかの場所で例外が発生した場合にログを送信したり、エラーメッセージをレンダリングするといった共通処理を行うのに適したメソッド。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;公式例: &lt;a class="reference external" href="https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html"&gt;https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part1/#id10"&gt;その他&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;スターターキット (ボイラテンプレートツール)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create-react-app&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;react-starter-kit&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;react-firebase-starter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フルスタックフレームワークではないので、本格的なアプリケーションを実装する際はサードパーティパッケージと組み合わせて利用する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/enaqx/awesome-react"&gt;https://github.com/enaqx/awesome-react&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/brillout/awesome-react-components"&gt;https://github.com/brillout/awesome-react-components&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/part1/</guid><pubDate>Sat, 23 May 2020 15:00:00 GMT</pubDate></item><item><title>Firebase</title><link>https://32imuf.com/javascript/firebase/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#id1" id="id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#note" id="id3"&gt;note&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/firebase/#memo" id="id4"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://firebase.google.com/docs"&gt;https://firebase.google.com/docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id3"&gt;note&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Firebase: Google社が提供するモバイルプラットフォーム。iOS、Android、Webなどでアプリケーションを構築し、モバイルサービスを提供する際に必要な機能を備えている。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Cloud Functions: Firebase の機能のイベントや HTTPSリクエストによるトリガに応じて関数を実行する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.js 環境&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Realtime Database: NoSQL データベース。 JSON データを保存・同期する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Hosting: SPAを簡単に公開できる。 CDN や HTTPS にも対応している。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase Authentication: ユーザ認証システムを簡単に構築できる。ログインプロバイダとして、メールアドレス、電話認証、Google、Twitter、Facebook、GitHubおよび匿名がある。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://console.firebase.google.com"&gt;https://console.firebase.google.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Express: Express パッケージのルーティングを使ってAPIのエンドポイントを実装する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cors: cors パッケージを使ってクロスドメイン通信の許可をする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サーバーに Firebase Admin SDK を追加する: &lt;a class="reference external" href="https://firebase.google.com/docs/admin/setup"&gt;https://firebase.google.com/docs/admin/setup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/firebase/#id4"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase CLI のインストール&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-2"&gt;&lt;/a&gt;$ sudo npm i -g firebase-tools
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Admin SDK のインストール&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-4"&gt;&lt;/a&gt;$ npm install firebase-admin --save
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Express, cors のインストール&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-6"&gt;&lt;/a&gt;$ npm i express cors
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase へログイン&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-9"&gt;&lt;/a&gt;$ firebase login
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase からログアウト&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-11"&gt;&lt;/a&gt;$ firebase &lt;span class="nb"&gt;logout&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Hosting の設定&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-14"&gt;&lt;/a&gt;$ firebase init hosting
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-15"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Firebase Functions の設定&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-16"&gt;&lt;/a&gt;$ firebase init functions
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 作成したAPIのテスト&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 事前に環境変数 GOOGLE_APPLICATION_CREDENTIALS に、サービス アカウント キーが含まれる JSON ファイルのファイルパスを設定する。&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Path は絶対パスでないといけない模様&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-21"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/path/to/fumi23-chat-app-firebase-adminsdk-e09li-560aa95e27.json"&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-23"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# テスト用サーバーの起動&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-24"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;firebase.json のあるディレクトリ&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-25"&gt;&lt;/a&gt;$ firebase serve --only functions
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# チャンネル作成&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-27"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# http://localhost:5000/fumi23-chat-app/us-central1/v1&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-28"&gt;&lt;/a&gt;$ curl -H &lt;span class="s1"&gt;'Content-Type:application/json'&lt;/span&gt; -d &lt;span class="s1"&gt;'{"cname": "general"}'&lt;/span&gt; http://localhost:5000/fumi23-chat-app/us-central1/v1/channels
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-29"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# チャンネル一覧&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-30"&gt;&lt;/a&gt;$ curl http://localhost:5000/fumi23-chat-app/uscentral1/v1/channels
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-32"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 作成した Functions を公開する&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-33"&gt;&lt;/a&gt;$ firebase deploy --only functions
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-34"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 初期状態に戻す&lt;/span&gt;
&lt;a name="rest_code_b2d076e8f80a4f18ab7065ba7d5bf4bf-35"&gt;&lt;/a&gt;$ curl -H &lt;span class="s1"&gt;'ContentType:application/json'&lt;/span&gt; -d &lt;span class="s1"&gt;'{}'&lt;/span&gt; https://us-central1-fumi23-chat-app.cloudfunctions.net/v1/reset
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/firebase/</guid><pubDate>Tue, 12 May 2020 15:00:00 GMT</pubDate></item><item><title>JavaScript</title><link>https://32imuf.com/javascript/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#id1" id="id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#note" id="id3"&gt;note&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#ecmascript2015" id="id4"&gt;ECMAScript2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#typescript" id="id5"&gt;TypeScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#memo" id="id6"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/note/#vscode-memo" id="id7"&gt;VSCode memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://developer.mozilla.org/ja/docs/Web/JavaScript"&gt;https://developer.mozilla.org/ja/docs/Web/JavaScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.typescriptlang.org/docs/home.html"&gt;https://www.typescriptlang.org/docs/home.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.npmjs.com/"&gt;https://docs.npmjs.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://reactjs.org/docs/getting-started.html"&gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id3"&gt;note&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;TypeScript は言語 (JavaScript のスーパーセット)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vue, React, Angular はフレームワーク&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は React を使ったフレームワーク。 Nuxt.js は Vue を使ったフレームワーク。 Next のほうが先輩。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js はサーバーサイドで動く JavaScript 環境&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm (Node Package Manager): Node.js で作られたパッケージを管理するためのツール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;npm を使うとパッケージの共有やインストール、アップデートを簡単にできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package.json: ローカル開発環境にインストールする npm パッケージを管理するのに利用する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;package.json を利用すると npm パッケージの依存関係やバージョン管理、開発環境のセットアップが簡単にできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package.json から npm i できる、package.json を更新したら npm up でパッケージ更新もできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package-lock.json: npm インストールしたパッケージ名や明確なバージョン情報が記載される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;webpack: フロントエンドビルドツール, モジュールバンドラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;複数の JavaScript ファイルや CSS などあらゆる static ファイルの依存関係を解決し１つのファイルにまとめてくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リクエスト数を減らせるなどのメリットがある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Entry: webpack がモジュールの依存関係を解析するためのエントリポイント、複数指定することもできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Output: バンドルされたファイルの出力先、絶対パスを指定する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loader: JavaScript 以外の static ファイルも同時にバンドルできる、トランスパイルできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: いろいろ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Babel: トランスコンパイラー (ECMAScript2015 以降のコードを ECMAScript5 に変換する)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;トランスパイル: あるプログラミング言語で書かれたコードをほかのプログラミング言語のコードに変換すること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;extract-text-webpack-plugin: スタイルシートを CSS ファイルに出力する Plugin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ESLint: Linter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;require&lt;/code&gt;: CommonJS の仕様、Node.js 環境で動作する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;import&lt;/code&gt;:  ES2015 (ES6) の仕様、古いブラウザでは動かない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="ecmascript2015"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id4"&gt;ECMAScript2015&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript は ECMA International という標準化団体が仕様を策定している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ECMAScript2015 == ECMAScript6&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;2015年に策定された6番目の仕様&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;変数宣言: &lt;code class="docutils literal"&gt;let&lt;/code&gt; と &lt;code class="docutils literal"&gt;const&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブロックスコープ, テンプレートリテラル, デフォルト引数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;アロー関数: アロー関数の場合は定義した場所の &lt;code class="docutils literal"&gt;this&lt;/code&gt; が参照される&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_64a14626d61247c08152943ae322d74c-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// アロー関数その１&lt;/span&gt;
&lt;a name="rest_code_64a14626d61247c08152943ae322d74c-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_64a14626d61247c08152943ae322d74c-3"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;returna&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_64a14626d61247c08152943ae322d74c-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code javascript"&gt;&lt;a name="rest_code_5c2547b9198b4a818e4e71c34d44f4fd-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// アロー関数その２&lt;/span&gt;
&lt;a name="rest_code_5c2547b9198b4a818e4e71c34d44f4fd-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;class 定義, class の継承&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Promise: 非同期処理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;モジュール: モジュールとしてファイル分割できる。 &lt;code class="docutils literal"&gt;export&lt;/code&gt; 文。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="typescript"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id5"&gt;TypeScript&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript: JavaScript のスーパーセット, 上位互換&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Microsoft によって開発された OSS の JavaScript ベースのプログラミング言語&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静的型付け, クラスベースのオブジェクト指向&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tsc: TypeScript 付属のコンパイラツール, ECMAScript5 へ変換できるよ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript の拡張子は &lt;code class="docutils literal"&gt;.ts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型注釈（type annotation）&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;型推論できるところは型推論に任せる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;?&lt;/code&gt;: オプショナル&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コールバック関数の型注釈と、アロー関数の定義が紛らわしい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型変換&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;JSX を使用することが確定している場合には、「変数 as 変換後の型」を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;interface&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;アクセス修飾子 (&lt;code class="docutils literal"&gt;public&lt;/code&gt;、&lt;code class="docutils literal"&gt;private&lt;/code&gt;、&lt;code class="docutils literal"&gt;protected&lt;/code&gt;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;デフォルトは &lt;code class="docutils literal"&gt;public&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ジェネリクス&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_14b2a9d7be6b4c958deeaba443e2d79e-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;: &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_14b2a9d7be6b4c958deeaba443e2d79e-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_14b2a9d7be6b4c958deeaba443e2d79e-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_14b2a9d7be6b4c958deeaba443e2d79e-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_14b2a9d7be6b4c958deeaba443e2d79e-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// こうとか&lt;/span&gt;
&lt;a name="rest_code_14b2a9d7be6b4c958deeaba443e2d79e-6"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"taro"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_14b2a9d7be6b4c958deeaba443e2d79e-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// こうとか&lt;/span&gt;
&lt;a name="rest_code_14b2a9d7be6b4c958deeaba443e2d79e-8"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型定義ファイル: 型の定義を別ファイルにまとめておける&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;拡張子は &lt;code class="docutils literal"&gt;.d.ts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デコレータ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;クラス、メソッド、アクセサ、プロパティやパラメータに付与できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 使う時&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;@sealed&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-4"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;greeting&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-7"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-8"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;greet() {&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Hello, "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-10"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-13"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// デコレーターの実体&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-14"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sealed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-15"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-16"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_3869a5e2f0fc4ced8c6f92d176bae98f-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSX: JavaScript 中に埋め込み可能な XML ライクな文法&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// React.createElement() は DOM を作成する関数&lt;/span&gt;
&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"div"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"class"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nickname"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;nickname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// JSXではこのように書けるとのこと&lt;/span&gt;
&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-7"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-8"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nickname"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nickname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b92b503331884b63aac6b571ae3dde81-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id6"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json ファイルが生成される&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-2"&gt;&lt;/a&gt;$ npm init -y
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# パッケージをインストール&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# node_modules ディレクトリに指定したパッケージがインストールされる&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json &amp;gt; dependencies/devDependencies にインストールしたパッケージとバージョンが追記される&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-7"&gt;&lt;/a&gt;$ npm i react react-dom
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -g : グローバルインストール (すべてのプロジェクトで利用できる)&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-9"&gt;&lt;/a&gt;$ npm i -g react react-dom
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ビルドなど開発時だけに必要なパッケージは -D を利用してインストール&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-11"&gt;&lt;/a&gt;npm i -D webpack webpack-cli
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アンインストール&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-13"&gt;&lt;/a&gt;$ npm un react react-dom
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -D の省略しない形は --save-dev&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-15"&gt;&lt;/a&gt;$ npm uninstall babel-preset-env --save-dev
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# webpack をインストール, CLI もインストール&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-18"&gt;&lt;/a&gt;$ npm i -D webpack webpack-cli
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# webpack でバンドラする&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npx: ローカルにインストールした npm パッケージをパッケージ名を指定して実行できる&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# --mode development: 開発モード. ビルドが速く watch がサポートされている&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-22"&gt;&lt;/a&gt;$ npx webpack --mode development
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npm scripts コマンドのエイリアスが作れる&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-25"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json の "scripts" フィールドにスクリプトを書いておく&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-26"&gt;&lt;/a&gt;$ npm run build:dev
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-28"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 今はこの書き方&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-29"&gt;&lt;/a&gt;$ npm i -D babel-loader style-loader css-loader @babel/core @babel/preset-env @babel/preset-react
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# スタイルシートを CSS ファイルに出力する Plugin をインストール&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-32"&gt;&lt;/a&gt;$ npm i -D extract-text-webpack-plugin@4.0.0beta.0
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-34"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 開発用サーバーを立てる&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-35"&gt;&lt;/a&gt;$ npm i -D webpack-dev-server@3.1.1
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 開発用サーバーを起動&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-37"&gt;&lt;/a&gt;$ npx webpack-dev-server --mode development --hot --inline --open
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-38"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npm scripts 作っておくと、こう&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-39"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Ctrl + C で停止&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-40"&gt;&lt;/a&gt;$ npm start
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-41"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-42"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ESLint をインストール&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-43"&gt;&lt;/a&gt;$ npm i -D eslint@4.19.1
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-44"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-45"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# TypeScript をインストール&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-46"&gt;&lt;/a&gt;$ sudo npm i -g typescript
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-47"&gt;&lt;/a&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-48"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# tsc コマンドで ECMAScript5 に変換&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-49"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -t: 変換する対象バージョン&lt;/span&gt;
&lt;a name="rest_code_1d12480fe04c4dad94098ffe148d5ac6-50"&gt;&lt;/a&gt;$ tsc -t ES5 hello.ts
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="vscode-memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/note/#id7"&gt;VSCode memo&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;F12&lt;/code&gt;: 定義へ移動&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;option&lt;/code&gt; + &lt;code class="docutils literal"&gt;F12&lt;/code&gt;: Peek ウィンドウ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debugger for Chrome: VSCode の Chrome 拡張機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VSCode上でブレークポイントを使ってデバッグできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React Developer Tools: Chrome 拡張機能&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/note/</guid><pubDate>Tue, 05 May 2020 15:00:00 GMT</pubDate></item></channel></rss>