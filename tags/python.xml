<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて (pythonについての文書)</title><link>https://32imuf.com/</link><description></description><atom:link href="https://32imuf.com/tags/python.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2019 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Sun, 01 Dec 2019 17:10:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>エキスパートPythonプログラミング改訂2版 気になったことメモ</title><link>https://32imuf.com/python/expert-python-programming-2/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#id2" id="id5"&gt;第4章 良い名前を選ぶ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-154" id="id6"&gt;定数: P.154&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-155" id="id7"&gt;命名規則と使用例: P.155&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-162" id="id8"&gt;辞書型に明示的な名前をつける: P.162&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-163" id="id9"&gt;汎用性の高い名前を避ける: P.163&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#args-kwargs-p-167" id="id10"&gt;魔法の引数である*args と**kwargs は注意して使用する: P.167&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-169" id="id11"&gt;クラス名: P.169&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-170" id="id12"&gt;モジュール名とパッケージ名: P.170&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#id3" id="id13"&gt;第2章 構文ベストプラクティス — クラス以外&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#pythonic-p-64" id="id14"&gt;Pythonic なパターン: P.64&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-67" id="id15"&gt;文字列の結合について: P.67&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#python-p-69" id="id16"&gt;Pythonのリスト: P.69&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-70" id="id17"&gt;リスト内包表記: P.70&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-73" id="id18"&gt;辞書: P.73&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-74" id="id19"&gt;辞書の実装詳細: P.74&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-77" id="id20"&gt;集合: P.77&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-78" id="id21"&gt;集合の実装詳細: P.78&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#cllections-p-78" id="id22"&gt;cllections モジュール: P.78&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-79" id="id23"&gt;イテレータ: P.79&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#yield-p-81" id="id24"&gt;yield文（ジェネレータ）: P.81&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-85" id="id25"&gt;ジェネレータ式: P.85&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#id4" id="id26"&gt;デコレータ: P.85&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-90" id="id27"&gt;デコレータの活用例: P.90&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#with-p-98" id="id28"&gt;コンテキストマネージャー --- with 構文: P.98&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-100" id="id29"&gt;クラスとしてコンテキストマネージャーを実装: P.100&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#p-102" id="id30"&gt;関数としてコンテキストマネージャーを実装: P.102&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/expert-python-programming-2/#python" id="id31"&gt;第1章 現在の Python のステータス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id5"&gt;第4章 良い名前を選ぶ&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="p-154"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id6"&gt;定数: P.154&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;短くするよりも意図をわかりやすく表現するほうが大切&lt;/p&gt;
&lt;div class="section" id="p-155"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id7"&gt;命名規則と使用例: P.155&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;デフォルト値や初期値を設定するためにも使用される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ユーザーが必要な設定をすべて行わなくてもライブラリが動作する、という設計のほうが扱いやすい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定として使用する際の良いプラクティスは、パッケージ内の1つのファイルにすべての定数を集めること (Django の settings とか)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;モジュール内にグループとなる定数がある場合を除いて、定数名の先頭に共通の名前をつける必要はない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python ではモジュール名そのものが接頭辞としての役割を果たすから&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;組み込みの &lt;a class="reference external" href="https://docs.python.org/ja/3/library/enum.html#enum.Enum"&gt;https://docs.python.org/ja/3/library/enum.html#enum.Enum&lt;/a&gt; を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="p-162"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id8"&gt;辞書型に明示的な名前をつける: P.162&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 例えば dict が名前をキーにしてその人の住所を保持する場合には ``person_address``&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これずっと悩んでた!!&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;person_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-4"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Bill'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'6565 Monty Road'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-5"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Pamela'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'45 Python street'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_77e6727ac58441be8d09f6a7eec70a53-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="p-163"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id9"&gt;汎用性の高い名前を避ける: P.163&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;関数名やクラス名では避けたほうが良いでしょう&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Manager&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do, handle または perform&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="args-kwargs-p-167"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id10"&gt;魔法の引数である*args と**kwargs は注意して使用する: P.167&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可変引数である &lt;code class="docutils literal"&gt;*args&lt;/code&gt; と &lt;code class="docutils literal"&gt;**kwargs&lt;/code&gt; は、関数やメソッドの堅牢性を低下させる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メソッドの引数情報を意味のある名前つき引数に固定すべき&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;別のアプローチとしては、関連する引数をグループ化して実行コンテキストに渡すためのコンテナクラスを作る&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;内部情報を保持したり、独立して拡張できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテナを引数として使用するコードは、そのコンテナの内部構造を気にする必要がなくなる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c7b18fbeea0e49028c3b911e84403e57-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c7b18fbeea0e49028c3b911e84403e57-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'HTTP_REFERER'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'No referer'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-169"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id11"&gt;クラス名: P.169&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;名前からクラスが何をするのかが十分に理解できるように簡潔で的確な名前にする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;その型やその特性について伝える接尾辞を使用する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;SQLEngine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MineTypes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;StringWidget&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TestCase&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基底クラスのクラス名には &lt;code class="docutils literal"&gt;Base&lt;/code&gt; や &lt;code class="docutils literal"&gt;Abstract&lt;/code&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;BaseCookie&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AbstractFormatter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クラスの属性と一貫性を保つ&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_68eef781825546d0bb0696109920224a-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smtp_send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 主語が重複していて冗長!! ですよね!!&lt;/span&gt;
&lt;a name="rest_code_68eef781825546d0bb0696109920224a-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-170"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id12"&gt;モジュール名とパッケージ名: P.170&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;モジュールやパッケージの名前は、中に含まれる関数やクラスが持っている目的が伝わるような名前にする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;underscores のない lowercase 形式の短い名前にしましょう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sqlite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;postgres&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sha1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id13"&gt;第2章 構文ベストプラクティス — クラス以外&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pythonic-p-64"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id14"&gt;Pythonic なパターン: P.64&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;自分自身で真実を深く掘り下げていくことでしか、Pythonの人気のある書き方のどれが本当に正しいかを知ることはできません。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="p-67"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id15"&gt;文字列の結合について: P.67&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;場合に応じて使い分ける&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;s += substring&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;文字列の長さに比例した実行コスト&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;str.join()&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;結合したい文字列の数が多い、すでに &lt;code class="docutils literal"&gt;iterable&lt;/code&gt; に格納されている&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;str.format()&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;事前に文字列数がわかっている&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;%演算子&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;事前に文字列数がわかっている&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;リテラル文字列補完&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;事前に文字列数がわかっている&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="python-p-69"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id16"&gt;Pythonのリスト: P.69&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Javaとかの &lt;code class="docutils literal"&gt;LinkedList&lt;/code&gt; を使って実装されていると勘違いされがちだけど違うよー&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPython のリストは可変長の配列として実装されている。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python のリストは他のオブジェクトへの参照を持った、連続した配列&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リストの先頭の構造体がこの配列へのポインタと長さを格納している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;計算量&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;追加、取得&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;挿入、削除&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;サイズ変更、再割り当てが発生する操作&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要素の先頭と末尾への append と pop が O(1) の計算量のリンクリストが必要な場合は、 &lt;code class="docutils literal"&gt;collections.deque&lt;/code&gt; を使用するとよい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-70"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id17"&gt;リスト内包表記: P.70&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;for ループ内で &lt;code class="docutils literal"&gt;list.appned()&lt;/code&gt; するような場合は、リスト内包表記を使用したほうが処理が速くなる。&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これは遅くなる&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# リストを操作するコードをループごとにインタープリタ上で処理する必要がある&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# append() はリストのメソッドであるため、イテレーションごとに関数ルックアップの追加のコストが必要になる&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_929aa6e722d046ca97e44e3eff94c244-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_460e367ac9a74317938bea00ca55807c-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これは速くなる&lt;/span&gt;
&lt;a name="rest_code_460e367ac9a74317938bea00ca55807c-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 処理の一部がインタープリタ内部で実行されるようになるので、速くなるとのこと&lt;/span&gt;
&lt;a name="rest_code_460e367ac9a74317938bea00ca55807c-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="p-73"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id18"&gt;辞書: P.73&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;辞書内包表記&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d709f82b701040df8096ff1e0648ac87-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;辞書内包表記には、リスト内包表記と同じメリットがある。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;keys()&lt;/code&gt; とか、 Python2 と Python3 では返ってくるもの違うので注意&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python2: リスト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: ビューオブジェクト&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ビューオブジェクトは辞書の内容のスナップショットではなく、現在の内容を見せるビューを提供する。辞書の内容が変化するとビューはその変化を反映した結果を返す。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python2 と Python3 とで動きが結構違う感じするので、使うとき注意だなぁ・・・&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;辞書のコピーとイテレーションにおける最悪のケースの計算量の n の数値は、現在格納されている要素数ではなく、辞書が今まで格納してきた最大数とのこと&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平均計算量&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;要素取得&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;要素追加&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;要素削除&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;コピー&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;イテレーション&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以前に大量の要素を格納し、その後要素を減らして現在の要素数がすごく少ない辞書でも、イテレーションすると極めて長い処理時間がかかる！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;何度もイテレーションされる辞書の場合は、要素を削除する代わりに新しい辞書オブジェクトを作る方が良いこともある。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;順序&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python3.7より前までは、順序を保持しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.7 以降は、辞書のキーが登録した順序で保持される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-74"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id19"&gt;辞書の実装詳細: P.74&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;hashable オブジェクトのみがキーとして使える。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オブジェクトが hashable であるということは、オブジェクトが生存する期間中ハッシュ値が変わらず、他のオブジェクトと比較が行えるということ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python の組み込み型のうち、 immutable なものはすべて hashable ですと。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;型が hashable な場合には、次の2つのメソッドを持つプロトコルをサポートすべきであると決められています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__hash__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__eq__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-77"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id20"&gt;集合: P.77&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;set()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mutable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;順序がない有限集合&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要素はユニークかつ immutable かつ hashable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空の集合を作るときは &lt;code class="docutils literal"&gt;set()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;setリテラルは &lt;code class="docutils literal"&gt;{1, 2, 3}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;frozenset()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;immutable かつ hashable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;順序がない有限集合&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要素はユニークかつ immutable かつ hashable&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-78"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id21"&gt;集合の実装詳細: P.78&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CPython実装は辞書に似ている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要素の削除、追加、存在チェックは非常に高速&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;平均計算量&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(1)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;最悪計算量&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cllections-p-78"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id22"&gt;cllections モジュール: P.78&lt;/a&gt;&lt;/h3&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;namedtuple()&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;タプルのサブクラスを作成するファクトリ関数。名前つきの属性としても要素にアクセスできる。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;deque&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;スタックとキューに必要な操作を備えた両端キュー。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先頭と末尾への高速な追加、削除ができる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;ChainMap&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;辞書のようなクラス&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;複数の辞書をまとめて1つの辞書に見せるビューを作成する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;OrderedDict&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;要素が追加された順序を保証する辞書のサブクラス&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;defaultdict&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;要素が見つからなかったときに、指定された関数を呼び出して初期値を自動作成する辞書のサブクラス&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="p-79"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id23"&gt;イテレータ: P.79&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;イテレータプロトコルを実装したコンテナオブジェクト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;イテレータプロトコル&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__next__()&lt;/code&gt;: コンテナの次の要素を返す&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__iter__()&lt;/code&gt;: イテレータ自身を返す&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;シーケンスの要素をすべて取り出し終わると &lt;code class="docutils literal"&gt;StopIteration&lt;/code&gt; 例外が発生する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カスタムイテレータを作成するときは、クラス内に↑のふたつを実装する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;itertools: 使ってください、だそうです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="yield-p-81"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id24"&gt;yield文（ジェネレータ）: P.81&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;関数を一時的に停止させ、途中経過の結果を返す。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一時停止中も実行コンテキストが保存されているため、必要であれば止まった場所から再実行できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;next()&lt;/code&gt; 関数呼び出し、あるいは for ループを使って、イテレータと同じようにジェネレータから新しい値を取得できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ループ処理やシーケンスを返す関数を実装するときには、まずジェネレータの利用を検討すべき&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1つずつ要素を返すことで、その要素を使用する他の関数へ渡す場合に全体のパフォーマンスを向上させる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;複数のデータ群を使用するような、データ変換アルゴリズムの効率が向上する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;それぞれのデータ群を１つのイテレータとして実装し、高レベル関数の中にそれらを組み込むことで、巨大で読みにくい関数にになるのを防ぐことができる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一度に１つの結果を算出する複雑な関数よりも、シーケンス上で動作可能な、シンプルな関数をたくさん作る方が良い手法と言える。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;send()&lt;/code&gt;, &lt;code class="docutils literal"&gt;throw()&lt;/code&gt;, &lt;code class="docutils literal"&gt;close()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;外部のクライアントコードからジェネレータ内にデータを送ることができる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;動作を変更できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-85"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id25"&gt;ジェネレータ式: P.85&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_160a4f25b8c0474abbd8eceebd435fc9-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_160a4f25b8c0474abbd8eceebd435fc9-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_160a4f25b8c0474abbd8eceebd435fc9-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;リスト内包表記に似てる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;丸括弧をブラケットの代わりに使用するんだよ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;yield&lt;/code&gt; を使用したシンプルなループや、イテレータのように動作するリスト内包表記は、積極的にジェネレーター式に置き換えるべき&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id26"&gt;デコレータ: P.85&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;関数やメソッドのラッピング（受け取った関数を拡張して返す）処理の見た目をわかりやすくする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デコレータとして使用できるのは、一般的に、１つの引数（デコレーション対象）を受け取れる、名前付きの callable （呼び出し可能）オブジェクト&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返り値として、他の callable オブジェクト（デコレーションした結果）を返す。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メソッドと関数に限定されない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__call__()&lt;/code&gt; メソッドが定義され、 callable とみなせる任意のオブジェクトをデコレータとして使用できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;実装例はP.87参照のこと&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 関数として実装する例&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mydecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 実際の関数を呼び出す前に行う処理&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 呼び出し後に行う処理&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# ラッパーをでデコレート済み関数として返す&lt;/span&gt;
&lt;a name="rest_code_d7e3e22f523d4bfe853b6fadaf0d6684-9"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# クラスとして実装する例&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DecoratorAsClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-6"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-7"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 実際の関数を呼び出す前に行う処理&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 呼び出し後に行う処理&lt;/span&gt;
&lt;a name="rest_code_f644f53d2f1743f39f1a71866c270e69-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;パラメータも受け取れる =&amp;gt; 2回ラップが行われる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メタ情報を保持するデコレータ =&amp;gt; &lt;code class="docutils literal"&gt;functools.wraps()&lt;/code&gt; デコレータを使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-90"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id27"&gt;デコレータの活用例: P.90&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;引数チェック&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;キャッシュ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プロキシ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;プロキシデコレータは関数にタグをつけたり、グローバルな仕組みへ登録したりする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;たとえば、実行中のユーザーごとにコードへのアクセスを保護するセキュリティレイヤは、呼び出し可能オブジェクトに関連づけられたアクセス許可情報を利用する、集中制御型チェッカーとして実装することができます&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテキストプロバイダ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;@synchronized&lt;/code&gt; とか&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="with-p-98"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id28"&gt;コンテキストマネージャー --- with 構文: P.98&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;try..finally&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;エラー発生時のクリーンアップ処理&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ファイルを閉じる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ロックを解除する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一時的にコードにパッチを当てる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特定環境で保護されたコードを実行する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;with&lt;/code&gt; 文はコードブロックの前後で何らかの処理を呼び出すためのシンプルな方法を提供している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;try..finally&lt;/span&gt;&lt;/code&gt; 文の代わりに使用できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-100"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id29"&gt;クラスとしてコンテキストマネージャーを実装: P.100&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;コンテキストマネージャープロトコルを実装したオブジェクトはコンテキストマネージャーとして使用できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;このプロトコルを含むこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__enter__(self)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__exit__(self, exc_type, exc_value, traceback)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;with&lt;/code&gt; 構文の実行順序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__enter__()&lt;/code&gt; メソッドが実行されます。メソッドの返り値は &lt;code class="docutils literal"&gt;as&lt;/code&gt; 節で指定されたターゲットに束縛されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;with&lt;/code&gt; 文内のコードブロックが実行されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__exit__()&lt;/code&gt; メソッドが実行されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;finally&lt;/code&gt; 節のように後処理を行うために使われるべきです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;エラーが発生したときには、その例外を上げ直すべきではありません&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それは呼び出し側の責任です&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="p-102"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id30"&gt;関数としてコンテキストマネージャーを実装: P.102&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;contextlib&lt;/code&gt; モジュール&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンテキストマネージャーと一緒に使うためにある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;contextmanager&lt;/code&gt; デコレータが便利らしい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;詳しくは P.102 を見てください（あんまりわかってない）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/expert-python-programming-2/#id31"&gt;第1章 現在の Python のステータス&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;選択したプログラミング言語を深く理解することは、エキスパートとしてその言語を利用する上でもっとも大切です。これはどの技術においても常に真です。そして、言語コミュニティ内で一般的に使われているツールやプラクティスを知らずに本当に良いソフトウェアを開発するのは困難です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;venv&lt;/code&gt;: 新しいバージョンのPythonを使用しているのであれば、virtualenvの代わりにvenvを使う方がよい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Awesome-python&lt;/span&gt;&lt;/code&gt;: 人気のパッケージ情報やフレームワーク情報をまとめたリストを提供しています&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Python Weekly&lt;/code&gt;: とても人気のあるメールマガジンです。興味深いPythonパッケージやリソースについて毎週10本以上の記事を読者に配信しています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プロフェッショナルな開発者の多くは何かしらの種類のデバッガを使うのを好みます。だって。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/expert-python-programming-2/</guid><pubDate>Sat, 23 Nov 2019 15:00:00 GMT</pubDate></item><item><title>wheel</title><link>https://32imuf.com/python/wheel/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/wheel/#wheel" id="id5"&gt;wheel&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/wheel/#id2" id="id6"&gt;インストール&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/wheel/#id3" id="id7"&gt;wheel の作り方&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/wheel/#pypi-sdist-wheel" id="id8"&gt;PyPI で sdist で配布されているパッケージを wheel 形式のパッケージに変換してローカルに保存する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/wheel/#setuptools-wheel" id="id9"&gt;setuptools ベースのプロジェクトから wheel を作成する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/wheel/#id4" id="id10"&gt;ガイド/リファレンス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="wheel"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/wheel/#id5"&gt;wheel&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;wheel: ビルド済みの C 拡張や Python パッケージのみを含み、ファイルを展開するだけでインストールが完了する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python の公式バイナリパッケージは wheel 形式 (PEP491)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pip コマンドは、 wheel 形式を優先して利用する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pip は、 PyPI にアップロードされている wheel 形式のパッケージを直接インストールできる&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_3d4ceab231e244b5bed523a5dfc41453-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install &lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11.15
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://pythonwheels.com/"&gt;https://pythonwheels.com/&lt;/a&gt; : 定番パッケージの wheel 配布状況を確認できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sdist : パッケージのソース、メタデータ、ビルド方法などをアーカイブしたソース配布形式&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;インストールのたびに各環境でアーカイブに同梱される setup スクリプトを読み込み、 C 拡張があればビルドし、必要があれば
Python パッケージを確認して、 site-packages へコピーする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/wheel/#id6"&gt;インストール&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_a7fcebe01361452a8b59515558a3fb7a-1"&gt;&lt;/a&gt;$ pip install wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/wheel/#id7"&gt;wheel の作り方&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="pypi-sdist-wheel"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/wheel/#id8"&gt;PyPI で sdist で配布されているパッケージを wheel 形式のパッケージに変換してローカルに保存する&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_06a9de4de42746b490e19bb94952dffc-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# wheelhouse ディレクトリに wheel 形式パッケージを作成する&lt;/span&gt;
&lt;a name="rest_code_06a9de4de42746b490e19bb94952dffc-2"&gt;&lt;/a&gt;$ pip wheel markupsafe -w wheelhouse
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;wheelhouse&lt;/code&gt; ディレクトリがなくても、 &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt; wheelhouse&lt;/code&gt; を指定すると勝手に作ってくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wheel 形式のパッケージの保存ディレクトリ名は何でもよいが、慣習的に &lt;code class="docutils literal"&gt;wheelhouse&lt;/code&gt; という名前を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="setuptools-wheel"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/wheel/#id9"&gt;setuptools ベースのプロジェクトから wheel を作成する&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_7bb83d5a49224ed0812b978508e9193d-1"&gt;&lt;/a&gt;$ python setup.py bdist_wheel
&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python のパッケージングには setup スクリプトが必要 (PyPro3 P.66)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;setup.py というファイル名で用意する (Python の仕様で決められている)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;setup.py には Python パッケージ情報 (メタデータ: パッケージ名やバージョン, 依存パッケージなど) を書く&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;setuptools は pip が使える環境には必ずインストールされているライブラリ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;一般的には setuptools が提供する機能拡張された setup 関数を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 詳しくは PyPro P.70 を見よ&lt;/span&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"hey"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'1.2.3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Django&amp;gt;=2.1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_ba7b06a175b647bd80de8be19d354d69-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/wheel/#id10"&gt;ガイド/リファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python プロフェッショナルプログラミング 第3版 P.66, P.70&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python プロフェッショナルプログラミング 第3版 P.256 - P.259&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://wheel.readthedocs.io/en/latest/user_guide.html"&gt;https://wheel.readthedocs.io/en/latest/user_guide.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://setuptools.readthedocs.io/en/latest/"&gt;https://setuptools.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/wheel/</guid><pubDate>Sat, 05 Oct 2019 15:00:00 GMT</pubDate></item><item><title>pip</title><link>https://32imuf.com/python/pip/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pip/#pip" id="id5"&gt;pip&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pip/#id2" id="id6"&gt;pip のリファレンス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pip/#pip-install-r" id="id7"&gt;pip install -r&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pip/#id3" id="id8"&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pip/#pip-install-u" id="id9"&gt;pip install -U&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pip/#id4" id="id10"&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pip/#pipdeptree" id="id11"&gt;pipdeptree&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="pip"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pip/#id5"&gt;pip&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pip/#id6"&gt;pip のリファレンス&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pip.pypa.io/en/stable/reference/"&gt;https://pip.pypa.io/en/stable/reference/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-install-r"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pip/#id7"&gt;pip install -r&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;requirements.txt に指定したライブラリをインストールする&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_5e4e4bb2864e4ec0af0be7c341899046-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install -r requirements.txt
&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;すでにインストール済みのものはスキップしてくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;requirements.txt にインストールオプションを書いておくことができる&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_866bfb1986ab43c7a5ced32b4957e3d1-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;--no-index           # PyPI に問い合わせない (Index サーバーを使わない)&lt;/span&gt;
&lt;a name="rest_code_866bfb1986ab43c7a5ced32b4957e3d1-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;-f wheelhouse        # ライブラリの取得元を wheelhouse に限定する&lt;/span&gt;
&lt;a name="rest_code_866bfb1986ab43c7a5ced32b4957e3d1-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;-r run-requires.txt  # インストールしたいライブラリはこっちに書いたから見てね&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-f(--find-links)&lt;/span&gt; &amp;lt;url&amp;gt;&lt;/code&gt; : 参照したいパッケージがあるページのリンクを指定する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;url に存在するパッケージは、 Index サーバーよりも優先的に使用される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;url に見つからないパッケージは、 Index サーバーからインストールする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pip/#id8"&gt;参考&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python プロフェッショナルプログラミング 第3版 P.272 - P.274, P.255&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-install-u"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pip/#id9"&gt;pip install -U&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最新のバージョンに更新する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_8a63d0ca24844a5794814c54d86cf301-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install -U requests
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;pip は、指定されたパッケージがすでにインストール済みの場合、新しいバージョンが公開されていても自動的に最新版に更新したりしない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pip/#id10"&gt;参考&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python プロフェッショナルプログラミング 第3版 P.63&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pipdeptree"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pip/#id11"&gt;pipdeptree&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ライブラリの依存関係を調べられる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/naiquevin/pipdeptree"&gt;https://github.com/naiquevin/pipdeptree&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_e43f4ef789a64fc89320eda62922ef7d-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install pipdeptree
&lt;a name="rest_code_e43f4ef789a64fc89320eda62922ef7d-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pipdeptree -p django
&lt;a name="rest_code_e43f4ef789a64fc89320eda62922ef7d-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;Django==1.11.15&lt;/span&gt;
&lt;a name="rest_code_e43f4ef789a64fc89320eda62922ef7d-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;  - pytz [required: Any, installed: 2018.3]&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code console"&gt;&lt;a name="rest_code_6d526529c1d044e6ad53c4d83a9df915-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pipdeptree -r -p django
&lt;a name="rest_code_6d526529c1d044e6ad53c4d83a9df915-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;django==1.11.15&lt;/span&gt;
&lt;a name="rest_code_6d526529c1d044e6ad53c4d83a9df915-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;  - dj-inmemorystorage==1.4.1 [requires: Django&amp;gt;=1.4]&lt;/span&gt;
&lt;a name="rest_code_6d526529c1d044e6ad53c4d83a9df915-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;  - model-mommy==1.5.1 [requires: django&amp;gt;=1.8.0]&lt;/span&gt;
&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;オプションの意味&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_36e493321c6d49e2abe2307f755d88db-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;-r, --reverse         Shows the dependency tree in the reverse fashion ie.&lt;/span&gt;
&lt;a name="rest_code_36e493321c6d49e2abe2307f755d88db-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;                      the sub-dependencies are listed with the list of&lt;/span&gt;
&lt;a name="rest_code_36e493321c6d49e2abe2307f755d88db-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;                      packages that need them under them.&lt;/span&gt;
&lt;a name="rest_code_36e493321c6d49e2abe2307f755d88db-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;-p PACKAGES, --packages PACKAGES&lt;/span&gt;
&lt;a name="rest_code_36e493321c6d49e2abe2307f755d88db-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;                      Comma separated list of select packages to show in the&lt;/span&gt;
&lt;a name="rest_code_36e493321c6d49e2abe2307f755d88db-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;                      output. If set, --all will be ignored.&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/pip/</guid><pubDate>Fri, 04 Oct 2019 15:00:00 GMT</pubDate></item><item><title>Python のメモ</title><link>https://32imuf.com/python/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id2" id="id24"&gt;リファレンス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id6" id="id25"&gt;いろいろ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#http" id="id26"&gt;ローカルに HTTP サーバーを立てる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id7" id="id27"&gt;ユーザー定義例外&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#interface" id="id28"&gt;interface 使いたい&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id9" id="id29"&gt;抽象基底クラス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#protocol" id="id30"&gt;Protocol&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#defaultdict" id="id31"&gt;defaultdict&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id12" id="id32"&gt;どんどん足してくやつ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#stringio-seek-0" id="id33"&gt;StringIO().seek(0)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#yield-dict-zip-columns-data" id="id34"&gt;yield dict(zip(columns, data))&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id13" id="id35"&gt;シーケンスのアンパッキング&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#if-name-main" id="id36"&gt;if __name__ == "__main__"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id15" id="id37"&gt;組み込み型と名前が被った場合&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id16" id="id38"&gt;組み込み関数&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#isinstance-object-classinfo" id="id39"&gt;isinstance(object, classinfo)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#all-iterable" id="id40"&gt;all(iterable)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#sorted-iterable-key-none-reverse-false" id="id41"&gt;&lt;code class="docutils literal"&gt;sorted(iterable, *, key=None, reverse=False)&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#property" id="id42"&gt;@property&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id18" id="id43"&gt;正規表現&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id19" id="id44"&gt;バックスラッシュ感染症&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id21" id="id45"&gt;正規表現のグループ化機能&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#re-matchobject-groupdict" id="id46"&gt;re.MatchObject.groupdict&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#id23" id="id47"&gt;長い正規表現を記述する方法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#python2" id="id48"&gt;Python2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#unicode-str" id="id49"&gt;unicode と str&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/note/#coding-utf-8" id="id50"&gt;coding: utf-8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id24"&gt;リファレンス&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/genindex.html"&gt;頭文字別索引:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/py-modindex.html"&gt;Pythonモジュール索引&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#built-in-functions"&gt;組み込み関数&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/index.html"&gt;Python 標準ライブラリ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id25"&gt;いろいろ&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="http"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id26"&gt;ローカルに HTTP サーバーを立てる&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/http.server.html"&gt;http.server --- HTTP サーバ&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_2341d5bd19f945d5a64e980b9343c075-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ポートを指定 (現在のディレクトリのファイルを提供)&lt;/span&gt;
&lt;a name="rest_code_2341d5bd19f945d5a64e980b9343c075-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;a name="rest_code_2341d5bd19f945d5a64e980b9343c075-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# バインドするアドレスを指定 (現在のディレクトリのファイルを提供)&lt;/span&gt;
&lt;a name="rest_code_2341d5bd19f945d5a64e980b9343c075-4"&gt;&lt;/a&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;a name="rest_code_2341d5bd19f945d5a64e980b9343c075-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ファイルを提供するディレクトリを指定&lt;/span&gt;
&lt;a name="rest_code_2341d5bd19f945d5a64e980b9343c075-6"&gt;&lt;/a&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id27"&gt;ユーザー定義例外&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3.7/tutorial/errors.html#user-defined-exceptions"&gt;8.5. ユーザー定義例外&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Exception クラスを、直接または間接的に継承する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/exceptions.html#BaseException"&gt;BaseException&lt;/a&gt; : 全ての組み込み例外の基底クラスです。ユーザ定義の例外に直接継承されることは意図されていません (継承には Exception を使ってください)。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大抵は、いくつかの属性だけを提供し、例外が発生したときにハンドラがエラーに関する情報を取り出せるようにする程度にとどめる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;だいたいは、標準の例外の名前付けと同様に、 "Error" で終わる名前で定義する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;複数の別個の例外を送出するようなモジュールを作成する際には、そのモジュールで定義されている例外の基底クラスを作成するのが一般的なプラクティス&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="interface"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id28"&gt;interface 使いたい&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id29"&gt;抽象基底クラス&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;抽象基底クラス: &lt;a class="reference external" href="https://docs.python.org/ja/3/library/abc.html"&gt;https://docs.python.org/ja/3/library/abc.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;collections.abc: &lt;a class="reference external" href="https://docs.python.org/ja/3/library/collections.abc.html#module-collections.abc"&gt;https://docs.python.org/ja/3/library/collections.abc.html#module-collections.abc&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Container&lt;/code&gt; とか &lt;code class="docutils literal"&gt;Iterable&lt;/code&gt; とか &lt;code class="docutils literal"&gt;Hashable&lt;/code&gt; とか...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;abstract base class: &lt;a class="reference external" href="https://docs.python.org/ja/3/glossary.html#term-abstract-base-class"&gt;https://docs.python.org/ja/3/glossary.html#term-abstract-base-class&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;エキスパートPythonプログラミング改訂2版:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;P.478: インターフェース&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P.483: 関数アノテーションや抽象基底クラスを使用する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P.490: collections.abc を使用する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_1c0728663c824060822f763f600988ac-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pushable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-5"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-7"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""何でも push"""&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-9"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__subclasshook__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-11"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# これを実装しておくと、暗黙的にインターフェイスを実装しているインスタンスも&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-12"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# インターフェイスのインスタンスだと確認できる&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Pushable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'push'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__mro__&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-15"&gt;&lt;/a&gt;                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-16"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;NotImplemented&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeyPushable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pushable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-21"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Hey {x} push.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-24"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HoyPushable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pushable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-25"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-26"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Hoy {x} pull.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-29"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PoyPushable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-30"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-31"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Poy {x} push.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-34"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NyaPushable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-35"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-36"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Nya {x} pull.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-37"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-39"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeyHeyPushable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pushable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-40"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-41"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# 引数違いも互換性ありとみなされる&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-42"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# (PyCharm では警告出る)&lt;/span&gt;
&lt;a name="rest_code_1c0728663c824060822f763f600988ac-43"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Hey hey {x}, {y} push.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HeyPushable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pushable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-3"&gt;&lt;/a&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'husky'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;Hey&lt;/span&gt; &lt;span class="n"&gt;husky&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-7"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hoy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HoyPushable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-9"&gt;&lt;/a&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;console&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-10"&gt;&lt;/a&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="s1"&gt;'t instantiate abstract class HoyPushable with abstract methods push&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-12"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;poy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PoyPushable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-13"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;poy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pushable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-14"&gt;&lt;/a&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-16"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nya&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NyaPushable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-17"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nya&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pushable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-18"&gt;&lt;/a&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-20"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heyhey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HeyHeyPushable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-21"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heyhey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'husky'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'shiba'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9f44755fc64c4588894a9f9b8e9e3503-22"&gt;&lt;/a&gt;&lt;span class="n"&gt;Hey&lt;/span&gt; &lt;span class="n"&gt;hey&lt;/span&gt; &lt;span class="n"&gt;husky&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shiba&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="protocol"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id30"&gt;Protocol&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Simple user-defined protocols: &lt;a class="reference external" href="https://mypy.readthedocs.io/en/latest/protocols.html#simple-user-defined-protocols"&gt;https://mypy.readthedocs.io/en/latest/protocols.html#simple-user-defined-protocols&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;class typing.Protocol: &lt;a class="reference external" href="https://docs.python.org/ja/3/library/typing.html#typing.Protocol"&gt;https://docs.python.org/ja/3/library/typing.html#typing.Protocol&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="defaultdict"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id31"&gt;defaultdict&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;リストの初期化が不要になる！&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/collections.html#defaultdict-objects"&gt;defaultdict オブジェクト&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/collections.html#defaultdict-examples"&gt;defaultdict の使用例&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id32"&gt;どんどん足してくやつ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functools.html#functools.reduce"&gt;functools.reduce&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stringio-seek-0"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id33"&gt;StringIO().seek(0)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/io.html#io.IOBase.seek"&gt;https://docs.python.org/ja/3/library/io.html#io.IOBase.seek&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;先頭にもどす、 (カーソルを先頭に戻すみたいなイメージ)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="yield-dict-zip-columns-data"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id34"&gt;yield dict(zip(columns, data))&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_4e1754c33b5f464c95d4299f4014597d-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これは、&lt;/span&gt;
&lt;a name="rest_code_4e1754c33b5f464c95d4299f4014597d-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4e1754c33b5f464c95d4299f4014597d-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;row_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;a name="rest_code_4e1754c33b5f464c95d4299f4014597d-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;row_dict&lt;/span&gt;
&lt;a name="rest_code_4e1754c33b5f464c95d4299f4014597d-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_4e1754c33b5f464c95d4299f4014597d-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# こう書ける。&lt;/span&gt;
&lt;a name="rest_code_4e1754c33b5f464c95d4299f4014597d-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;zip&lt;/code&gt; はタプルのイテレータを返す -&amp;gt; タプルから辞書を作れる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dict(iterable, **kwarg)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/stdtypes.html#dict"&gt;https://docs.python.org/ja/3/library/stdtypes.html#dict&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;それ以外の場合、位置引数は iterable オブジェクトでなければなりません。iterable のそれぞれの要素自身は、ちょうど 2 個のオブジェクトを持つイテラブルでなければなりません。それぞれの要素の最初のオブジェクトは新しい辞書のキーになり、2 番目のオブジェクトはそれに対応する値になります。同一のキーが 2 回以上現れた場合は、そのキーの最後の値が新しい辞書での対応する値になります。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id35"&gt;シーケンスのアンパッキング&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/tutorial/datastructures.html#tuples-and-sequences"&gt;タプルとシーケンス&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-name-main"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id36"&gt;if __name__ == "__main__"&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.pyq.jp/entry/Python_kaiketsu_180207"&gt;http://blog.pyq.jp/entry/Python_kaiketsu_180207&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pythonでは、インポートされたファイルの中身は実行される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id37"&gt;組み込み型と名前が被った場合&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;in&lt;/code&gt; や &lt;code class="docutils literal"&gt;int&lt;/code&gt; など、キーワード・組み込み型と同じ名前を変数名にしたい場合は、末尾に &lt;code class="docutils literal"&gt;_&lt;/code&gt; を付ける。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id38"&gt;組み込み関数&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="isinstance-object-classinfo"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id39"&gt;isinstance(object, classinfo)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#isinstance"&gt;https://docs.python.org/ja/3/library/functions.html#isinstance&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;継承を考慮してくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;classinfo には複数指定できる (タプルで)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="all-iterable"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id40"&gt;all(iterable)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#all"&gt;all(iterable)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;iterable の全ての要素が真ならば (もしくは iterable が空ならば) True を返す。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sorted-iterable-key-none-reverse-false"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id41"&gt;&lt;code class="docutils literal"&gt;sorted(iterable, *, key=None, reverse=False)&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#sorted"&gt;sorted&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/stdtypes.html#tuples"&gt;タプル型 (tuple)&lt;/a&gt; : &lt;code class="docutils literal"&gt;タプルはイミュータブルなシーケンス&lt;/code&gt; なので、 ソートできる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これは、&lt;/span&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;summary_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;summary_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sort_key'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ``sorted`` という関数を使って以下のように書ける。&lt;/span&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;summary_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sort_key'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# さらに、for文をこんなふうに書くと ``summary_list`` を作る工程が不要。&lt;/span&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
&lt;a name="rest_code_0a71bf9e99f148099348619ab44e00f0-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="property"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id42"&gt;@property&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/functions.html#property"&gt;https://docs.python.org/ja/3/library/functions.html#property&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;@property&lt;/code&gt; デコレータ を付けると、プロパティのように呼び出せる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同じ名前のまま 読み出し専用属性の &lt;code class="docutils literal"&gt;getter&lt;/code&gt; にしてくれる&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_caa3eec762434b5d92022ba3c558744a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 付けるとき&lt;/span&gt;
&lt;a name="rest_code_caa3eec762434b5d92022ba3c558744a-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;
&lt;a name="rest_code_caa3eec762434b5d92022ba3c558744a-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;husky&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_caa3eec762434b5d92022ba3c558744a-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%Y/%m/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %H'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_68cdb193104f4c9d8a5a170a0b37168f-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 呼び出すとき&lt;/span&gt;
&lt;a name="rest_code_68cdb193104f4c9d8a5a170a0b37168f-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;husky&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id43"&gt;正規表現&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id44"&gt;バックスラッシュ感染症&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3.7/howto/regex.html#the-backslash-plague"&gt;バックスラッシュ感染症&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b696099cb88440589246f95c874f6f98-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# こんなふうに書く&lt;/span&gt;
&lt;a name="rest_code_b696099cb88440589246f95c874f6f98-2"&gt;&lt;/a&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"ab*"&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;r&lt;/code&gt; を文字列リテラルの先頭に書くことでバックスラッシュは特別扱いされなくなる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多くの場合 Python コードの中の正規表現はこの raw string 記法を使って書かれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id45"&gt;正規表現のグループ化機能&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3.7/howto/regex.html#non-capturing-and-named-groups"&gt;取り出さないグループと名前つきグループ&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="re-matchobject-groupdict"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id46"&gt;re.MatchObject.groupdict&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/3/library/re.html#re.Match.groupdictgroupdict"&gt;https://docs.python.org/ja/3/library/re.html#re.Match.groupdictgroupdict&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;マッチの、すべての 名前つきの サブグループを含む、サブグループ名でキー付けされた辞書を返す&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リファレンスのサンプルコードを見ると一目瞭然なので、そちらを見てください&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id47"&gt;長い正規表現を記述する方法&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;カンマ区切り無しで文字列リテラルを複数に分ける: &lt;a class="reference external" href="http://docs.python-guide.org/en/latest/writing/style/#line-continuations"&gt;http://docs.python-guide.org/en/latest/writing/style/#line-continuations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;re.VERBOSE オプションを使う: &lt;a class="reference external" href="https://docs.python.org/ja/3/library/re.html#re.VERBOSE"&gt;https://docs.python.org/ja/3/library/re.html#re.VERBOSE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id48"&gt;Python2&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="unicode-str"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id49"&gt;unicode と str&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/ja/2.7/tutorial/introduction.html#unicode-strings"&gt;3.1.3. Unicode 文字列&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_6ab4bddd36c04a67a4778d4b194998ae-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;a name="rest_code_6ab4bddd36c04a67a4778d4b194998ae-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'ふみ'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'ふみ'&lt;/span&gt;
&lt;a name="rest_code_6ab4bddd36c04a67a4778d4b194998ae-3"&gt;&lt;/a&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_6ab4bddd36c04a67a4778d4b194998ae-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'fumi23'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'fumi23'&lt;/span&gt;
&lt;a name="rest_code_6ab4bddd36c04a67a4778d4b194998ae-5"&gt;&lt;/a&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_6ab4bddd36c04a67a4778d4b194998ae-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;python2 の場合、マルチバイトを含むと &lt;code class="docutils literal"&gt;u&lt;/code&gt; の有無で違うオブジェクトとして判定される。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;python2の文字には &lt;code class="docutils literal"&gt;unicode&lt;/code&gt; と &lt;code class="docutils literal"&gt;str&lt;/code&gt; がある。 ascii 文字しか含まない場合は 同じ値と判断されるけど基本的に別物として考えたほうがいい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="coding-utf-8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/note/#id50"&gt;coding: utf-8&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ソースコードの文字エンコーディングを指定する&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9c52e78376b849eb8451d10fdc1c0c2a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ファイルの先頭に記述する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;記述しないと、 Python2 環境かつファイルにマルチバイトが含まれていると &lt;code class="docutils literal"&gt;SyntaxError&lt;/code&gt; が発生する。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3 環境では不要&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/note/</guid><pubDate>Fri, 19 Apr 2019 15:00:00 GMT</pubDate></item><item><title>Python いろいろメモ</title><link>https://32imuf.com/python/etc/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#rundeckrun" id="id2"&gt;rundeckrun&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/etc/#autopep8" id="id3"&gt;autopep8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="rundeckrun"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id2"&gt;rundeckrun&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python コードから Rundeck を操作できる: &lt;a class="reference external" href="https://rundeckrun.readthedocs.io/en/latest/index.html"&gt;https://rundeckrun.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="autopep8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/etc/#id3"&gt;autopep8&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;autopep8 automatically formats Python code to conform to the PEP 8 style guide.&lt;/cite&gt; : &lt;a class="reference external" href="https://pypi.python.org/pypi/autopep8"&gt;https://pypi.python.org/pypi/autopep8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/etc/</guid><pubDate>Sun, 28 Oct 2018 15:00:00 GMT</pubDate></item><item><title>PyConJP 2018 で聞いた講演</title><link>https://32imuf.com/python/pyconjp2018/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id2" id="id9"&gt;9月17日&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#argentina-in-python-community-dreams-travels-and-learning" id="id10"&gt;基調講演: Argentina in Python: community, dreams, travels and learning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#ai" id="id11"&gt;招待講演: 東大松尾研流 実践的AI人材育成法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id3" id="id12"&gt;ジョブフェア&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#djangopycharm" id="id13"&gt;DjangoではじめるPyCharm実践入門&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id4" id="id14"&gt;あなたと私いますぐパッケージン&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#jupyterpython" id="id15"&gt;Jupyterで広がるPythonの可能性&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#python" id="id16"&gt;Pythonで解く大学入試数学&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id5" id="id17"&gt;9月18日&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id6" id="id18"&gt;基調講演: 「Pythonでやってみた」：広がるプログラミングの愉しみ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#migrating-from-py2-application-to-py3-first-trial-in-monotaro-python2-python3-monotaro" id="id19"&gt;Migrating from Py2 application to Py3: first trial in MonotaRO / Python2 から Python3 への移植: MonotaRO での取り組み&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#pythonista" id="id20"&gt;Pythonistaに贈るコンテナ入門&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#pythonunix" id="id21"&gt;Pythonでざっくり学ぶUnixプロセス&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#cpython-23" id="id22"&gt;C拡張と共に乗り切るPython 2→3移行術&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id7" id="id23"&gt;Pythonで始めるウェブスクレイピング実践入門&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#id8" id="id24"&gt;生では聞けなかったけど&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/python/pyconjp2018/#web-takayuki-shimizukawa" id="id25"&gt;Webアプリケーションの仕組み(Takayuki Shimizukawa)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id9"&gt;9月17日&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="argentina-in-python-community-dreams-travels-and-learning"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id10"&gt;基調講演: Argentina in Python: community, dreams, travels and learning&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=KwmF5wyY2C4"&gt;https://www.youtube.com/watch?v=KwmF5wyY2C4&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ai"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id11"&gt;招待講演: 東大松尾研流 実践的AI人材育成法&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=shaG3p8wtlQ"&gt;https://www.youtube.com/watch?v=shaG3p8wtlQ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id12"&gt;ジョブフェア&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;動画なし&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="djangopycharm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id13"&gt;DjangoではじめるPyCharm実践入門&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=sJlyZmbT2xs"&gt;https://www.youtube.com/watch?v=sJlyZmbT2xs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gitpitch.com/kashewnuts/slides?p=20180917pyconjp#/"&gt;https://gitpitch.com/kashewnuts/slides?p=20180917pyconjp#/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id14"&gt;あなたと私いますぐパッケージン&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=_5HCH51-47Y"&gt;https://www.youtube.com/watch?v=_5HCH51-47Y&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/aodag/anatatopythonjin-sugupatukezingu"&gt;https://speakerdeck.com/aodag/anatatopythonjin-sugupatukezingu&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="jupyterpython"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id15"&gt;Jupyterで広がるPythonの可能性&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;動画見当たらず&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/drillan/pyconjp2018"&gt;https://github.com/drillan/pyconjp2018&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id16"&gt;Pythonで解く大学入試数学&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=x0mIzF_VXLg"&gt;https://www.youtube.com/watch?v=x0mIzF_VXLg&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://slideship.com/users/@massa142/presentations/2018/09/56hjwyTVtpSefg2dnTfKew/"&gt;https://slideship.com/users/@massa142/presentations/2018/09/56hjwyTVtpSefg2dnTfKew/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id17"&gt;9月18日&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id18"&gt;基調講演: 「Pythonでやってみた」：広がるプログラミングの愉しみ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=kO4FNg648qE"&gt;https://www.youtube.com/watch?v=kO4FNg648qE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.slideshare.net/RansuiIso/python-115121978"&gt;https://www.slideshare.net/RansuiIso/python-115121978&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="migrating-from-py2-application-to-py3-first-trial-in-monotaro-python2-python3-monotaro"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id19"&gt;Migrating from Py2 application to Py3: first trial in MonotaRO / Python2 から Python3 への移植: MonotaRO での取り組み&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3iSs6UeeKE"&gt;https://www.youtube.com/watch?v=w3iSs6UeeKE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;スライド見当たらず&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pythonista"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id20"&gt;Pythonistaに贈るコンテナ入門&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;動画なし&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;スライド見当たらず&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pythonunix"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id21"&gt;Pythonでざっくり学ぶUnixプロセス&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pX58pvc3Fk4"&gt;https://www.youtube.com/watch?v=pX58pvc3Fk4&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://tell-k.github.io/pyconjp2018/#1"&gt;https://tell-k.github.io/pyconjp2018/#1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cpython-23"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id22"&gt;C拡張と共に乗り切るPython 2→3移行術&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Wmxr3gn8fLY"&gt;https://www.youtube.com/watch?v=Wmxr3gn8fLY&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/puhitaku/ckuo-zhang-togong-nicheng-riqie-rupython-2-nil-3yi-xing-shu"&gt;https://speakerdeck.com/puhitaku/ckuo-zhang-togong-nicheng-riqie-rupython-2-nil-3yi-xing-shu&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id23"&gt;Pythonで始めるウェブスクレイピング実践入門&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=zgTP_4-XEpw"&gt;https://www.youtube.com/watch?v=zgTP_4-XEpw&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/sin_tanaka_21/pythondeshi-meruuebusukureipingushi-jian-ru-men"&gt;https://speakerdeck.com/sin_tanaka_21/pythondeshi-meruuebusukureipingushi-jian-ru-men&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id24"&gt;生では聞けなかったけど&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="web-takayuki-shimizukawa"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/python/pyconjp2018/#id25"&gt;Webアプリケーションの仕組み(Takayuki Shimizukawa)&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=L7j2zgtpV9c"&gt;https://www.youtube.com/watch?v=L7j2zgtpV9c&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://scrapbox.io/shimizukawa/PyCon_JP_2018:_Web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF"&gt;https://scrapbox.io/shimizukawa/PyCon_JP_2018:_Web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://32imuf.com/python/pyconjp2018/</guid><pubDate>Wed, 19 Sep 2018 15:00:00 GMT</pubDate></item></channel></rss>