<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて (Posts about javascript)</title><link>https://32imuf.com/</link><description></description><atom:link href="https://32imuf.com/tags/javascript.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Thu, 24 Sep 2020 12:45:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>React * Next.js * TypeScript で何か作ろう</title><link>https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id1" id="id3"&gt;つくったもの&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id2" id="id4"&gt;アプリの種をつくる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#vercel-deploy" id="id5"&gt;Vercel へ deploy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id3"&gt;つくったもの&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fuminote-tools.vercel.app/"&gt;https://fuminote-tools.vercel.app/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id4"&gt;アプリの種をつくる&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 新しいNext.jsアプリを作成&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-2"&gt;&lt;/a&gt;npx create-next-app
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Starts the development server.&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-5"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; path/to/app
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-6"&gt;&lt;/a&gt;npm run dev
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Builds the app for production.&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-9"&gt;&lt;/a&gt;npm run build
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Runs the built app in production mode.&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-12"&gt;&lt;/a&gt;npm start
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# TypeScript の導入&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-15"&gt;&lt;/a&gt;npm install --save-dev typescript @types/react @types/node
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-16"&gt;&lt;/a&gt;touch tsconfig.json
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# dev サーバーの再起動が必要&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-18"&gt;&lt;/a&gt;npm run dev
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# React Bootstrap の導入&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://react-bootstrap.github.io/getting-started/introduction&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-22"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# _app.tsx に `import 'bootstrap/dist/css/bootstrap.min.css';`&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-23"&gt;&lt;/a&gt;npm install react-bootstrap bootstrap
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-25"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# styled components の導入&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://styled-components.com/&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-27"&gt;&lt;/a&gt;npm install --save styled-components
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-28"&gt;&lt;/a&gt;npm install @types/styled-components
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-30"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# styled components: Babel Plugin&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://styled-components.com/docs/tooling#babel-plugin&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-32"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# .babelrc も書く&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-33"&gt;&lt;/a&gt;npm install --save-dev babel-plugin-styled-components
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-35"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# yarn をインストール (こっから yarn でやってみる)&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json をそのまま使える&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-37"&gt;&lt;/a&gt;sudo npm install -g yarn
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-39"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Material-UI をインストール&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-40"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://material-ui.com/&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-41"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# React Bootstrap よりも使い方がややこしいが、 Component の種類が豊富&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-42"&gt;&lt;/a&gt;yarn add @material-ui/core @material-ui/icons
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-44"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# react-copy-to-clipboard をインストール&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-45"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://www.npmjs.com/package/react-copy-to-clipboard&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-46"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Clip board にコピーしてくれるさん&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-47"&gt;&lt;/a&gt;yarn add react-copy-to-clipboard
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-48"&gt;&lt;/a&gt;yarn add --dev @types/react-copy-to-clipboard
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-49"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-50"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Axios をインストール&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-51"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://github.com/axios/axios&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-52"&gt;&lt;/a&gt;yarn add axios
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="vercel-deploy"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id5"&gt;Vercel へ deploy&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;&lt;p&gt;Vercel アカウントを作成し、GitHub 連携する (すでに持っている場合はスキップ)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://vercel.com/signup"&gt;https://vercel.com/signup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;やってみればわかる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub に deploy したいアプリの repository を作成して push する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub の自分のアカウントに &lt;a class="reference external" href="https://vercel.com/github"&gt;https://vercel.com/github&lt;/a&gt; (Vercel for GitHub) をインストールする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repository access を設定する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ここ &lt;a class="reference external" href="https://github.com/settings/installations"&gt;https://github.com/settings/installations&lt;/a&gt; でインストール済みの GitHub Apps が見られる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「すべての repositories にアクセスを許可する」 or 「選択した repositories のみにアクセスを許可する」が選べる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel から &lt;code class="docutils literal"&gt;Import Project&lt;/code&gt; (dashboard 画面右上の黒いボタン) する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;「Import Git Repository」を選択 &amp;gt; Continue &amp;gt; import したい Git repository の URL を入力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;手順3 で、 import したい repository にアクセスを許可をしていないと、ここで import したいプロジェクトが「ない」、と言われる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continue する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;勝手に deploy が始まって、終わったら ドメインが 3つ払い出される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;deploy 時にエラーが発生すると、 production にはデプロイしないでおいてくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/</guid><pubDate>Sat, 22 Aug 2020 15:00:00 GMT</pubDate></item><item><title>React: Hooks</title><link>https://32imuf.com/javascript/react/hook/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id1" id="id12"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id2" id="id13"&gt;ステートフック&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id3" id="id14"&gt;要するにフックとは？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id4" id="id15"&gt;副作用フック&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id5" id="id16"&gt;クリーンアップを必要としない副作用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id6" id="id17"&gt;クリーンアップを有する副作用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id7" id="id18"&gt;副作用のスキップによるパフォーマンス改善&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id8" id="id19"&gt;フックのルール&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id9" id="id20"&gt;ルール&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#eslint" id="id21"&gt;ESLint プラグイン&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id10" id="id22"&gt;独自フックの作成&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id11" id="id23"&gt;その他のフック&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id12"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-intro.html"&gt;https://ja.reactjs.org/docs/hooks-intro.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-overview.html"&gt;https://ja.reactjs.org/docs/hooks-overview.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-state.html"&gt;https://ja.reactjs.org/docs/hooks-state.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-effect.html"&gt;https://ja.reactjs.org/docs/hooks-effect.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-rules.html"&gt;https://ja.reactjs.org/docs/hooks-rules.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-custom.html"&gt;https://ja.reactjs.org/docs/hooks-custom.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フック API リファレンス: &lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-reference.html"&gt;https://ja.reactjs.org/docs/hooks-reference.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id13"&gt;ステートフック&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Declare a new state variable, which we'll call "count"&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-5"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 現在の state の値と、それを更新するための関数とをペアにして返す&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 引数は state の初期値のみ&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-7"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state はオブジェクトでもそうでなくてもOK&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 引数として渡された state の初期値は最初のレンダー時にのみ使用される&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-9"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-11"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// count が 『state変数』&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-12"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state 変数には好きな名前をつけられる&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-13"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// useState は何を返すのか？ =&amp;gt; 現在の state と、それを更新するための関数とを、ペアにして返す&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-15"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state が「作成」されるのはコンポーネントの初回レンダー時だけ&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-16"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 通常、関数が終了すると変数は『消えて』しまうけれど、state 変数は React によって保持される&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-18"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 関数内では、`this.state.count` とかせずに、直接 count を使うことができる↓&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-19"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// setCount で、 state を更新↓&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-20"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-21"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-22"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/p&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-23"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-24"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-25"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-26"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-27"&gt;&lt;/a&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code javascript"&gt;&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ExampleWithManyStates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Declare multiple state variables!&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 1つのコンポーネント内で 2 回以上ステートフックを使うことができる&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// React は useState を何度も呼び出す場合は、それらが全てのレンダー間で同じ順番で呼び出されるものと仮定する&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-6"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFruit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'banana'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-7"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Learn Hooks'&lt;/span&gt; &lt;span class="p"&gt;}]);&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id14"&gt;要するにフックとは？&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;関数コンポーネントに &lt;code class="docutils literal"&gt;state&lt;/code&gt; やライフサイクルといった React の機能を &lt;code class="docutils literal"&gt;接続する (hook into)&lt;/code&gt; ための関数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックは React をクラスなしに使うための機能なので、クラス内では機能しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React は &lt;code class="docutils literal"&gt;useState&lt;/code&gt; のような幾つかのビルトインのフックを提供する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;異なるコンポーネント間でステートフルな振る舞いを共有するために自分自身のフックを作成することもできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id15"&gt;副作用フック&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;副作用のためのフック&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;副作用 &lt;span class="pre"&gt;(side-effects)&lt;/span&gt;&lt;/code&gt;、あるいは省略して &lt;code class="docutils literal"&gt;作用 (effects)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;外部データの取得や購読 (subscription)、あるいは手動での DOM 更新&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;他のコンポーネントに影響することがあり、またレンダーの最中に実行することができない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React が DOM を更新した後で追加のコードを実行したい場合に使う&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クラスコンポーネントにおける &lt;code class="docutils literal"&gt;componentDidMount&lt;/code&gt;, &lt;code class="docutils literal"&gt;componentDidUpdate&lt;/code&gt; および &lt;code class="docutils literal"&gt;componentWillUnmount&lt;/code&gt; と同様の目的で使うもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React コンポーネントにおける副作用は 2 種類ある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クリーンアップコードを必要としない副作用&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必要とする副作用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id16"&gt;クリーンアップを必要としない副作用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ネットワークリクエストの送信、手動での DOM 改変、ログの記録、といったものがクリーンアップを必要としない&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Similar to componentDidMount and componentDidUpdate:&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-7"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// useEffect フックを使うことで、レンダー後に何かの処理をしないといけない、ということを React に伝えられる&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-8"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// Update the document title using the browser API&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// React が DOM を更新した後で、HTML ドキュメントのタイトルを設定する&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// DOM の更新後に呼び出される&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 非同期的に行われる (useEffect でスケジュールされた副作用はブラウザによる画面更新をブロックしない)&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 副作用はコンポーネント内で宣言されるので、props や state にアクセスすることが可能&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// デフォルトでは初回のレンダーも含む毎回のレンダー時にこの副作用関数が呼び出される&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-16"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`You clicked &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-17"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-19"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-20"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-21"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/p&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-22"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-23"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-24"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-25"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-26"&gt;&lt;/a&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;同期的に行う必要がある稀なケース（レイアウトの測定など）のために、&lt;code class="docutils literal"&gt;useEffect&lt;/code&gt; と同一の API を有する &lt;code class="docutils literal"&gt;useLayoutEffect&lt;/code&gt; という別のフックがある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id17"&gt;クリーンアップを有する副作用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;例えば何らかの外部のデータソースへの購読をセットアップしたいことがあります。そのような場合、メモリリークが発生しないようにクリーンアップが必要です！&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOnline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-6"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-7"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-8"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;setIsOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-10"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;ChatAPI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribeToFriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// Specify how to clean up after this effect:&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// すべての副作用は、それをクリーンアップするための関数を返すことができる&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 関数を返した場合、 React はクリーンアップのタイミングが来たらそれを実行してくれる、しゅごい&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// React はコンポーネントがアンマウントされるときにクリーンアップを実行する&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// ひとつ前のレンダーによる副作用を、次回の副作用を実行する前にもクリーンアップする&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-18"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;// 名前付き関数でなくともよい、アロー関数でもOK&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-19"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;ChatAPI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribeFromFriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-21"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-23"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Loading...'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-25"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-26"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'Online'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Offline'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id18"&gt;副作用のスキップによるパフォーマンス改善&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 再レンダー間で特定の値が変わっていない場合には副作用の適用をスキップするよう、React に伝えることができる&lt;/span&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-3"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`You clicked &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Only re-run the effect if count changes&lt;/span&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// useEffect のオプションの第 2 引数として配列を渡す ↑&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id19"&gt;フックのルール&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id20"&gt;ルール&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;フックを呼び出すのはトップレベルのみ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ループや条件分岐、あるいはネストされた関数内で呼び出してはいけません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これを守ることで、コンポーネントがレンダーされる際に毎回同じ順番で呼び出されるということが保証される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックを呼び出すのは React の関数内のみ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;フックは React の関数コンポーネントの内部のみで呼び出してください。通常の JavaScript 関数内では呼び出さないでください。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="eslint"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id21"&gt;ESLint プラグイン&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;↑のルールを強制できる ESLint のプラグイン&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;linter plugin : &lt;a class="reference external" href="https://www.npmjs.com/package/eslint-plugin-react-hooks"&gt;https://www.npmjs.com/package/eslint-plugin-react-hooks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create React App ではデフォルトで含まれている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React はフックが呼ばれる順番に依存している&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;フックへの呼び出しの順番がレンダー間で変わらない限り、React はそれらのフックにローカル &lt;code class="docutils literal"&gt;state&lt;/code&gt; を割り当てることができる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id22"&gt;独自フックの作成&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;カスタムフックとは、名前が &lt;code class="docutils literal"&gt;use&lt;/code&gt; で始まり、ほかのフックを呼び出せる JavaScript の関数のことです&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;state を用いたロジックをコンポーネント間で再利用できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックは state を用いたロジックを再利用するものであって、state そのものを再利用するものではない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;カスタムフックを使う場所ごとで、内部の state や副作用は完全に分離している&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カスタムフックは、機能というよりはむしろ慣習のようなもの。関数の名前が &lt;code class="docutils literal"&gt;use&lt;/code&gt; から始まって、その関数が他のフックを呼び出している。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React のコンポーネントと違い、カスタムフックは特定のシグネチャを持つ必要はありません。
何を引数として受け取り、そして（必要なら）何を返すのか、といったことは自分で決めることができる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id23"&gt;その他のフック&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;useContext&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;useReducer&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フック API リファレンス: &lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-reference.html"&gt;https://ja.reactjs.org/docs/hooks-reference.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/hook/</guid><pubDate>Sat, 01 Aug 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: TypeScript</title><link>https://32imuf.com/javascript/nextjs/learn-course/typescript/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id1" id="id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#typescript" id="id3"&gt;TypeScript&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#how-to-set-up-next-js-with-typescript" id="id4"&gt;How to set up Next.js with TypeScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#next-js-specific-types" id="id5"&gt;Next.js Specific Types&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#static-generation-and-server-side-rendering" id="id6"&gt;Static Generation and Server-side Rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#api-routes" id="id7"&gt;API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#custom-app" id="id8"&gt;Custom App&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/excel/typescript"&gt;https://nextjs.org/learn/excel/typescript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="typescript"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id3"&gt;TypeScript&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="how-to-set-up-next-js-with-typescript"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id4"&gt;How to set up Next.js with TypeScript&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;プロジェクトルートディレクトリ直下に &lt;code class="docutils literal"&gt;tsconfig.json&lt;/code&gt; を作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript をインストールする&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_446080401b484ba687f188dd81e43449-1"&gt;&lt;/a&gt;$ npm install --save-dev typescript @types/react @types/node
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;開発サーバーを再起動する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_bf11459cdc214023a549623ed1342508-1"&gt;&lt;/a&gt;$ npm run dev
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サーバー再起動後、 Next.js は次のことをしてくれるでしょう。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;tsconfig.json&lt;/code&gt; ファイルの中身を入れてくれる。このファイルは、自分でカスタマイズしても良し。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;next-env.d.ts&lt;/span&gt;&lt;/code&gt; ファイルを作ってくれる。このファイルは、触ってはいけません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このファイルは、Next.js types が確実に TypeScript compiler にピックアップされるようにします。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで、 Next.js アプリで TypeScript が使えるようになります!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-js-specific-types"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id5"&gt;Next.js Specific Types&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js 固有のタイプが使えるよ。&lt;/p&gt;
&lt;div class="section" id="static-generation-and-server-side-rendering"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id6"&gt;Static Generation and Server-side Rendering&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next'&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-7"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-11"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;: &lt;span class="kt"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-12"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-9"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-10"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="api-routes"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id7"&gt;API Routes&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* TypeScript */&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next'&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;: &lt;span class="kt"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;: &lt;span class="kt"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-5"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-8"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* JavaScript */&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-9"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-10"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="custom-app"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id8"&gt;Custom App&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// built-in type&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next/app'&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-4"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-8"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_0f8c30d727e34ac5b051f9b4223fe313-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0f8c30d727e34ac5b051f9b4223fe313-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0f8c30d727e34ac5b051f9b4223fe313-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/typescript/</guid><pubDate>Fri, 24 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Deploying</title><link>https://32imuf.com/javascript/nextjs/learn-course/deploying/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#deploying-your-next-js-app" id="id4"&gt;Deploying Your Next.js App&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#deploy-to-vercel" id="id5"&gt;Deploy to Vercel&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id2" id="id6"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#next-js-and-vercel" id="id7"&gt;Next.js and Vercel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#preview-deployment-for-every-push" id="id8"&gt;Preview Deployment for Every Push&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#develop-preview-ship" id="id9"&gt;Develop, Preview, Ship&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#other-hosting-options" id="id10"&gt;Other Hosting Options&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/deploying-nextjs-app"&gt;https://nextjs.org/learn/basics/deploying-nextjs-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-your-next-js-app"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id4"&gt;Deploying Your Next.js App&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="deploy-to-vercel"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id5"&gt;Deploy to Vercel&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js を本番環境にデプロイする一番簡単な方法は、
Next.jsの作成者が開発した Vercel プラットフォームを使用することです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel は all-in-one プラットフォーム&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;with Global CDN supporting static &amp;amp; JAMstack deployment and Serverless Functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;無料で使い始められる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id6"&gt;やりかた&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Vercel アカウントを作る: &lt;a class="reference external" href="https://vercel.com/signup"&gt;https://vercel.com/signup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub と連携する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel for GitHub をインストールする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デプロイしたい Next.js アプリをインポートする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;しばらく待つと、ビルド &amp;amp; デプロイされて deployment URLs が払い出される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これだけ!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-js-and-vercel"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id7"&gt;Next.js and Vercel&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Vercel に Next.js app をデプロイすると、デフォルトで以下がサポートされる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Generation を使っている page と assets  (JS, CSS, images, fonts, etc) は、
自動的に、めちゃくちゃ速い Vercel Edge Network から serve される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server-Side Rendering と API routes を使っている page は、
自動的に、分離された Serverless Functions になる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel には以下ようなたくさんの特徴がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Custom Domains: Next.js アプリにカスタムドメインを割り当ててくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment Variables: 環境変数を設定することもできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatic HTTPS: HTTPS がデフォルトで有効、SSL証明書は自動更新してくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preview-deployment-for-every-push"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id8"&gt;Preview Deployment for Every Push&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;アプリを変更して GitHub で PR すると、 push の度ごとに、
自動的に preview deployment を作成してくれる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitHub の PR に vercel bot が preview URL を表示してくれるので、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;その URL へアクセスすると、最新の preview deployment を見られる。しゅごい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;master へ merge すると、自動的に production deplyment してくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="develop-preview-ship"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id9"&gt;Develop, Preview, Ship&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js アプリを開発するときは &lt;code class="docutils literal"&gt;DPS&lt;/code&gt; workflow を使いましょう&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-hosting-options"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id10"&gt;Other Hosting Options&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js は、 Node.js をサポートするどのホスティングプロバイダーにもデプロイできる。&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;package.json&lt;/code&gt; がこうなっているとするでしょ。&lt;/p&gt;
&lt;pre class="code json"&gt;&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-2"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-3"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-4"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next start"&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-6"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;するとこう。&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 自分のホスティングプロバイダー上で ``build`` スクリプトを1回実行すると、&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ``.next`` フォルダーに本番アプリケーションがビルドされる。&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-3"&gt;&lt;/a&gt;$ npm run build
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ビルドしたらに ``start`` スクリプトでハイブリッドページをサポートする Node.js server を起動し、&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 静的生成されたページとサーバーサイドレンダリングされたページの両方を提供する&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# API Routes もまたサポートしているよ&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-8"&gt;&lt;/a&gt;$ npm run start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/deploying/</guid><pubDate>Sun, 19 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Dynamic Routes, API Routes</title><link>https://32imuf.com/javascript/nextjs/learn-course/third/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id1" id="id5"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-routes" id="id6"&gt;Dynamic Routes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#how-to-statically-generate-pages-with-dynamic-routes" id="id7"&gt;How to Statically Generate Pages with Dynamic Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id2" id="id8"&gt;実行の順番&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id3" id="id9"&gt;他のページからリンクするとき&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#getstaticpaths" id="id10"&gt;getStaticPaths が実行されるタイミング&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#fallback" id="id11"&gt;Fallback&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#catch-all-routes" id="id12"&gt;Catch-all Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#router" id="id13"&gt;Router&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#pages" id="id14"&gt;404 Pages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-routes-details" id="id15"&gt;Dynamic Routes Details&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id4" id="id16"&gt;ライブラリ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#api-routes" id="id17"&gt;API Routes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#creating-api-routes" id="id18"&gt;Creating API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-api-routes" id="id19"&gt;Dynamic API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id5"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/dynamic-routes"&gt;https://nextjs.org/learn/basics/dynamic-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/api-routes"&gt;https://nextjs.org/learn/basics/api-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-routes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id6"&gt;Dynamic Routes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js は、外部データに依存するパスを持つページを静的に生成できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これは、 Next.js において &lt;code class="docutils literal"&gt;dynamic URLs&lt;/code&gt; を可能にする。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="how-to-statically-generate-pages-with-dynamic-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id7"&gt;How to Statically Generate Pages with Dynamic Routes&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;page&lt;/code&gt; ディレクトリ配下に、 &lt;code class="docutils literal"&gt;[&lt;/code&gt; で始まり &lt;code class="docutils literal"&gt;]&lt;/code&gt; で終わるファイルを作る&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ファイル名: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[id].js&lt;/span&gt;&lt;/code&gt;  =&amp;gt; パス: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/posts/{id}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;[&lt;/code&gt; で始まり &lt;code class="docutils literal"&gt;]&lt;/code&gt; で終わるのが動的 page&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[id].js&lt;/span&gt;&lt;/code&gt; の中に、 &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt; という非同期関数を export する。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;pages/posts/[id].tsx&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../../components/layout"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllPostIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../../lib/posts"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"next/head"&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'../../components//date'&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;utilStyles&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'../../styles/utils.module.css'&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;postData&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;date&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;contentHtml&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* page を返す */&lt;/span&gt;
  &lt;span class="c1"&gt;// 受け取った `postData` を使って page を生成&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Head&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;utilStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headingXl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;utilStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;dateString&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;__html&lt;/span&gt;: &lt;span class="kt"&gt;postData.contentHtml&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Layout&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ブログIDの一覧を返す&lt;/span&gt;
&lt;span class="cm"&gt;  *&lt;/span&gt;
&lt;span class="cm"&gt;  * `/posts/{id}.js` というパスで page を返すべき ID の一覧を返すよ。&lt;/span&gt;
&lt;span class="cm"&gt;  * 取得するのは単なる文字列の配列ではなく、オブジェクトの配列である必要がある。&lt;/span&gt;
&lt;span class="cm"&gt;  * 各オブジェクトには `params` キーが必要、かつ、 `id` キーを持つオブジェクトが含まれている必要がある。&lt;/span&gt;
&lt;span class="cm"&gt;  * (`[id]` をファイル名に使用しているため。でないと `getStaticPaths` がこけちゃうよ。)&lt;/span&gt;
&lt;span class="cm"&gt;  */&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAllPostIds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;fallback&lt;/span&gt;: &lt;span class="kt"&gt;false&lt;/span&gt;
    &lt;span class="c1"&gt;// fallback: true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ブログID に紐づく、ページの生成に必要なデータを返す&lt;/span&gt;
&lt;span class="cm"&gt;  *&lt;/span&gt;
&lt;span class="cm"&gt;  * 引数の `params` の中に `id` が入ってる&lt;/span&gt;
&lt;span class="cm"&gt;  * (この page は `/posts/{id}.js` というパスでアクセスされる)&lt;/span&gt;
&lt;span class="cm"&gt;  */&lt;/span&gt;
  &lt;span class="c1"&gt;// どこぞから id をキーにブログのデータを取得している&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPostData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// The value of the `props` key will be&lt;/span&gt;
  &lt;span class="c1"&gt;//  passed to the `Post` component&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// `props` key の inside で結果を返す&lt;/span&gt;
      &lt;span class="nx"&gt;postData&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id8"&gt;実行の順番&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticPaths()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticProps()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Post()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id9"&gt;他のページからリンクするとき&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_2c9ccc526cd84ce685a5206319b88e42-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// href に `[]` を使い、 `as` prop に実際のパス (id) を入れてあげる&lt;/span&gt;
&lt;a name="rest_code_2c9ccc526cd84ce685a5206319b88e42-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/posts/[id]"&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/posts/ssg-ssr"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_2c9ccc526cd84ce685a5206319b88e42-3"&gt;&lt;/a&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/a&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_2c9ccc526cd84ce685a5206319b88e42-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="getstaticpaths"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id10"&gt;getStaticPaths が実行されるタイミング&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;開発時: リクエスト毎&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番時: ビルド時&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="fallback"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id11"&gt;Fallback&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;fallback: false&lt;/code&gt;: &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt; から返されるどのページにも合致しないパスがリクエストされた場合、404 page を返す&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;fallback: true&lt;/code&gt;: 404 page を返さない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;のはわかったけれどあとは良くわからないので、ここを読んでください: &lt;a class="reference external" href="https://nextjs.org/docs/basic-features/data-fetching#fallback-pageshttps://nextjs.org/docs/basic-features/data"&gt;https://nextjs.org/docs/basic-features/data-fetching#fallback-pageshttps://nextjs.org/docs/basic-features/data&lt;/a&gt;-fetching#fallback-pages&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="catch-all-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id12"&gt;Catch-all Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;[]&lt;/code&gt; の中に &lt;code class="docutils literal"&gt;...&lt;/code&gt; (three dots) を入れるとすべてのパスをキャッチできるようになる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[...id].js&lt;/span&gt;&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal"&gt;/posts/a&lt;/code&gt; も &lt;code class="docutils literal"&gt;/posts/a/b&lt;/code&gt; も &lt;code class="docutils literal"&gt;/posts/a/b/c&lt;/code&gt; もマッチする。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="router"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id13"&gt;Router&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js router にアクセスしたい場合は、 &lt;code class="docutils literal"&gt;next/router&lt;/code&gt; から &lt;code class="docutils literal"&gt;useRouter&lt;/code&gt; hook を import する&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pages"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id14"&gt;404 Pages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;カスタム 404 Page を作成できる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;pages/404.js&lt;/code&gt; というファイルを作れば良い&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ビルド時に静的生成される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/advanced-features/custom-error-page#404-page"&gt;https://nextjs.org/docs/advanced-features/custom-error-page#404-page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-routes-details"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id15"&gt;Dynamic Routes Details&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Data Fetching: &lt;a class="reference external" href="https://nextjs.org/docs/basic-features/data-fetching"&gt;https://nextjs.org/docs/basic-features/data-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamic Routes: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id16"&gt;ライブラリ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;remark&lt;/code&gt;: Markdown コンテンツのレンダリング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;date-fns&lt;/span&gt;&lt;/code&gt;: 日付フォーマット&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="api-routes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id17"&gt;API Routes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js は API Routes をサポートしている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js 関数として APIエンドポイントを簡単に作成できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="creating-api-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id18"&gt;Creating API Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;pages/api&lt;/code&gt; 配下にこんな関数を作る&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;pages/api/hello.ts&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// req = request data, res = response data&lt;/span&gt;
&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;: &lt;span class="kt"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;: &lt;span class="kt"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// http://localhost:3000/api/hello でアクセスできる&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Serverless Functions (also known as Lambdas) としてデプロイできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do Not Fetch an API Route from &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; or &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;良い Use Case は、入力フォームのハンドリングです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;page にフォームを作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; API Route に POSTリクエストする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; API Route で直接 DBに保存する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API Route のコードはクライアントバンドルされないので、安全にサーバーサイドコードが記述できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-api-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id19"&gt;Dynamic API Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;API Routes は、通常の page と同様に動的にできる&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/api-routes/dynamic-api-routes"&gt;https://nextjs.org/docs/api-routes/dynamic-api-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/third/</guid><pubDate>Sat, 18 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Pre-rendering, Data Fetching</title><link>https://32imuf.com/javascript/nextjs/learn-course/second/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id1" id="id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#pre-rendering-and-data-fetching" id="id3"&gt;Pre-rendering and Data Fetching&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#pre-rendering" id="id4"&gt;Pre-rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#two-forms-of-pre-rendering" id="id5"&gt;Two Forms of Pre-rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#per-page-basis" id="id6"&gt;Per-page Basis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#when-to-use-static-generation-v-s-server-side-rendering" id="id7"&gt;When to Use Static Generation v.s. Server-side Rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#static-generation-with-and-without-data" id="id8"&gt;Static Generation with and without Data&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#static-generation-with-data-using-getstaticprops" id="id9"&gt;Static Generation with Data using &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#fetching-data-at-request-time" id="id10"&gt;Fetching Data at Request Time&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#using-getserversideprops" id="id11"&gt;Using &lt;code class="docutils literal"&gt;getServerSideProps&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#client-side-rendering" id="id12"&gt;Client-side Rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/second/#swr" id="id13"&gt;SWR&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/data-fetching"&gt;https://nextjs.org/learn/basics/data-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pre-rendering-and-data-fetching"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id3"&gt;Pre-rendering and Data Fetching&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pre-rendering"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id4"&gt;Pre-rendering&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;デフォルトでは、Next.js はすべてのページを事前にレンダリングする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クライアントサイドの JavaScript で HTML を生成しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事前にレンダリングしておくと、パフォーマンスとSEO が向上する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js によって生成された HTML は、そのページに必要最小限の JavaScript コードと関連づけられている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブラウザによってページが読み込まれると、その JavaScript コードが実行されてページが完全に interactive になる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;プレーンな React.jsアプリ（Next.js なし）の場合、事前レンダリングは行われない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="two-forms-of-pre-rendering"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id5"&gt;Two Forms of Pre-rendering&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js の Pre-rendering には、以下の 2つの形式がある。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Static Generation: build 時に HTML を生成する。各リクエストで再利用される。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server-side Rendering: リクエストごとに HTMLを生成する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;開発モードでは、すべてのページがリクエストごとに事前レンダリングされる&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="per-page-basis"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id6"&gt;Per-page Basis&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.jsでは、ページごとに使用する Pre-rendering 形式を選択できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ひとつのアプリケーション内で、2つの形式を混在させることができる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="when-to-use-static-generation-v-s-server-side-rendering"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id7"&gt;When to Use Static Generation v.s. Server-side Rendering&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;可能な限り &lt;code class="docutils literal"&gt;Static Generation&lt;/code&gt; を使うのがおすすめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一度ページを build すれば CDN で提供できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リクエストごとにサーバーでページをレンダリングするよりもずっと高速&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;頻繁にデータが更新されたり、リクエストごとに content が変わるような page には &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Server-side&lt;/span&gt; Rendering&lt;/code&gt; を使う&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;速度は遅くなるが常に最新の状態&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="static-generation-with-and-without-data"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id8"&gt;Static Generation with and without Data&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;Static Generation&lt;/code&gt; はデータの有無にかかわらずできる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;外部データを取得する必要のない page: アプリが本番用に build されるときに自動的に  &lt;code class="docutils literal"&gt;Static Generation&lt;/code&gt; される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外部データを取得しないと HTML レンダリングできない page: このケースも Next.js は out of the box で サポートしている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="static-generation-with-data-using-getstaticprops"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id9"&gt;Static Generation with Data using &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;外部データを取得して page の props として渡すには、 &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; を使う&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; は、サーバーサイドのみで実行される&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クライアント側では実行されない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JS のバンドルにも含まれない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; が実行されるタイミング:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開発時 ( &lt;code class="docutils literal"&gt;npm run dev&lt;/code&gt; or &lt;code class="docutils literal"&gt;yarn dev&lt;/code&gt;): リクエストの度&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番時: ビルド時&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ビルド時に実行されることを想定しているため、クエリパラメータや HTTPヘッダーなど、リクエスト時にのみ利用可能なデータを使用することはできない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;page ファイルからのみ export できる (非 page ファイルからは export できない)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;詳しくは =&amp;gt; &lt;a class="reference external" href="https://nextjs.org/docs/basic-features/data-fetching"&gt;https://nextjs.org/docs/basic-features/data-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リクエスト時にデータ取得したい場合は Static Generation は良いアイデアではない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;そういうときは、 &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Server-side&lt;/span&gt; Rendering&lt;/code&gt; するか pre-rendering をスキップしよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="fetching-data-at-request-time"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id10"&gt;Fetching Data at Request Time&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="using-getserversideprops"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id11"&gt;Using &lt;code class="docutils literal"&gt;getServerSideProps&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ビルド時ではなく、リクエスト時にデータ取得が必要ならば、 &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Server-side&lt;/span&gt; Rendering&lt;/code&gt; してみよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Server-side Rendering するには、 &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; のかわりに &lt;code class="docutils literal"&gt;getServerSideProps&lt;/code&gt; を
page から export する&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// `getServerSideProps` はリクエスト時に呼び出されるものなので、&lt;/span&gt;
&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;//  context にはリクエストパラメーターが含まれている&lt;/span&gt;
&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-4"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-5"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-6"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;// props for your component&lt;/span&gt;
&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-8"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2badd6b2e4f342ad94fdfbce7056de73-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time to first byte (TTFB) は &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; より遅くなる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;追加設定なしに CDN に 生成結果をキャッシュすることはできない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="client-side-rendering"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id12"&gt;Client-side Rendering&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;データを事前レンダリングする必要がないならば、 &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Client-side&lt;/span&gt; Rendering&lt;/code&gt; できます&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;page のうち、外部データが不要な部分は静的に生成 (事前レンダリング) して、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;page ロード時に、クライアントから JavaScript で外部データを取得して、
残りの部分を入れ込みます&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;user dashboard pages などに使うと良い&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="swr"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/second/#id13"&gt;SWR&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;データ取得のための React hook&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クライアントサイドからデータ取得するならとってもおすすめ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;いろいろできるらしい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;詳細はこちら =&amp;gt; &lt;a class="reference external" href="https://swr.now.sh/"&gt;https://swr.now.sh/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/second/</guid><pubDate>Sat, 11 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Navigation, Styling</title><link>https://32imuf.com/javascript/nextjs/learn-course/first/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#create-a-next-js-app" id="id4"&gt;Create a Next.js App&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#navigate-between-pages" id="id5"&gt;Navigate Between Pages&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#pages-in-next-js" id="id6"&gt;Pages in Next.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#link-component" id="id7"&gt;Link Component&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#client-side-navigation" id="id8"&gt;Client-Side Navigation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#assets-metadata-and-css" id="id9"&gt;Assets, Metadata, and CSS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#assets" id="id10"&gt;Assets&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#metadata" id="id11"&gt;Metadata&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#css-styling" id="id12"&gt;CSS Styling&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#writing-and-importing-css" id="id13"&gt;Writing and Importing CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#layout-component" id="id14"&gt;Layout Component&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#adding-css" id="id15"&gt;Adding CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#global-styles" id="id16"&gt;Global Styles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#adding-global-css" id="id17"&gt;Adding Global CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id2" id="id18"&gt;まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;https://nextjs.org/learn/basics/create-nextjs-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/navigate-between-pages"&gt;https://nextjs.org/learn/basics/navigate-between-pages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/assets-metadata-css"&gt;https://nextjs.org/learn/basics/assets-metadata-css&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-next-js-app"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id4"&gt;Create a Next.js App&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Node.js がインストールされていること&lt;/span&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-2"&gt;&lt;/a&gt;$ node -v
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリを作成するディレクトリを作成&lt;/span&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-5"&gt;&lt;/a&gt;$ mkdir learn-course
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-6"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; learn-course
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Next.jsアプリを作成する&lt;/span&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 内部では `create-next-app` というツールを使っている&lt;/span&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-10"&gt;&lt;/a&gt;$ npm init next-app nextjs-blog --example &lt;span class="s2"&gt;"https://github.com/vercel/next-learn-starter/tree/master/learn-starter"&lt;/span&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 開発サーバーの起動&lt;/span&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-13"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; nextjs-blog
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# port 3000 で起動する (http://localhost:3000/)&lt;/span&gt;
&lt;a name="rest_code_1b3745c855b945a7b4048b73b5dbd7a2-15"&gt;&lt;/a&gt;$ npm run dev
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="navigate-between-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id5"&gt;Navigate Between Pages&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pages-in-next-js"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id6"&gt;Pages in Next.js&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js では、ページは &lt;code class="docutils literal"&gt;pages&lt;/code&gt; ディレクトリ配下のファイルから export された React Component です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ファイル名とパスが関連付いている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;pages/index.js&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal"&gt;/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/first-post.js&lt;/span&gt;&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/posts/first-post&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="link-component"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id7"&gt;Link Component&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ページ間のリンクは &lt;code class="docutils literal"&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; React Component を使う&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_e053f34009b946478d5766eba8ddf47d-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next/link'&lt;/span&gt;
&lt;a name="rest_code_e053f34009b946478d5766eba8ddf47d-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_e053f34009b946478d5766eba8ddf47d-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 中に a tag が入る&lt;/span&gt;
&lt;a name="rest_code_e053f34009b946478d5766eba8ddf47d-4"&gt;&lt;/a&gt;&lt;span class="nx"&gt;Read&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/posts/first-post"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/a&amp;gt;&amp;lt;/Link&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="client-side-navigation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id8"&gt;Client-Side Navigation&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Link&lt;/code&gt; Component は &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;client-side&lt;/span&gt; navigation&lt;/code&gt; なるものを可能にする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ページ遷移が JavaScript を使用して行われる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブラウザによって行われるデフォルトのナビゲーションより速い&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は、自動的に code splitting するので、それぞれのページはそのページに必要な部分だけロードする。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;さらに production ビルドでは、 &lt;code class="docutils literal"&gt;Link&lt;/code&gt; Component がブラウザの viewport に現れるたびに、
Next.js があらかじめ自動的にバックグラウンドでリンク先ページのコードを読み込むので、
いざユーザーがリンクをクリックした暁には、ささっとページ遷移できちゃう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="assets-metadata-and-css"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id9"&gt;Assets, Metadata, and CSS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next.js は CSS 及び Sass を built-in サポートしている&lt;/p&gt;
&lt;div class="section" id="assets"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id10"&gt;Assets&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Next.js は画像のような静的ファイルを serve できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静的ファイルは、アプリケーションのトップレベルの &lt;code class="docutils literal"&gt;public&lt;/code&gt; ディレクトリに配置する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;public&lt;/code&gt; ディレクトリ配下の静的ファイルは、 &lt;code class="docutils literal"&gt;pages&lt;/code&gt; と同様に、アプリケーションルートから参照できる&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_632647c86f214c319077e5cdccbbfc2e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// app_root/public/vercel.svg を参照する場合&lt;/span&gt;
&lt;a name="rest_code_632647c86f214c319077e5cdccbbfc2e-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/vercel.svg"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Vercel Logo"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"logo"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;public&lt;/code&gt; ディレクトリには、そのほかにも &lt;code class="docutils literal"&gt;robots.txt&lt;/code&gt; など静的な aseets を置くとよい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="metadata"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id11"&gt;Metadata&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&amp;lt;title&amp;gt;&lt;/code&gt; など、ページのメタデータを変更したい場合は &lt;code class="docutils literal"&gt;&amp;lt;Head&amp;gt;&lt;/code&gt; React Component を使う&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_7755c663fa024865b09725cbfd605431-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next/head'&lt;/span&gt;
&lt;a name="rest_code_7755c663fa024865b09725cbfd605431-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_7755c663fa024865b09725cbfd605431-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Head の H は大文字&lt;/span&gt;
&lt;a name="rest_code_7755c663fa024865b09725cbfd605431-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_7755c663fa024865b09725cbfd605431-5"&gt;&lt;/a&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_7755c663fa024865b09725cbfd605431-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="css-styling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id12"&gt;CSS Styling&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSS-in-JS ライブラリ:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React Component 内で CSS を記述できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS スタイルがスコープされる（他の Component は影響を受けない）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_ebd44de2e58f48b5b0b787ef17b2456b-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// e.g. styled-jsx を使ってページ内で有効な CSS をあてる&lt;/span&gt;
&lt;a name="rest_code_ebd44de2e58f48b5b0b787ef17b2456b-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;a name="rest_code_ebd44de2e58f48b5b0b787ef17b2456b-3"&gt;&lt;/a&gt;&lt;span class="sb"&gt;  …&lt;/span&gt;
&lt;a name="rest_code_ebd44de2e58f48b5b0b787ef17b2456b-4"&gt;&lt;/a&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;styled-jsx&lt;/span&gt;&lt;/code&gt; ライブラリを built-in support しているが、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;styled-components&lt;/span&gt;&lt;/code&gt; や &lt;code class="docutils literal"&gt;emotion&lt;/code&gt; など他のポピュラーな CSS-in-JS ライブラリを使うこともできる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;使っているひとのはなしだと「&lt;code class="docutils literal"&gt;antdesign&lt;/code&gt; と &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;styled-components&lt;/span&gt;&lt;/code&gt; は使わないと損なレベルで完成度高い。」&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使おう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-and-importing-css"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id13"&gt;Writing and Importing CSS&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js は CSS 及び Sass を built-in サポートしているので、 &lt;code class="docutils literal"&gt;.css&lt;/code&gt; や &lt;code class="docutils literal"&gt;.scss&lt;/code&gt; ファイルを import できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;popular CSS ライブラリーの &lt;code class="docutils literal"&gt;Tailwind CSS&lt;/code&gt; もサポートしているよ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="layout-component"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id14"&gt;Layout Component&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;すべてのページに共通の &lt;code class="docutils literal"&gt;Layout&lt;/code&gt; Component を、 &lt;code class="docutils literal"&gt;components&lt;/code&gt; top-level ディレクトリに作る&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_310fbd17a2ca4717b57a883bcd9cfc0b-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// components/layout.js&lt;/span&gt;
&lt;a name="rest_code_310fbd17a2ca4717b57a883bcd9cfc0b-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_310fbd17a2ca4717b57a883bcd9cfc0b-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_310fbd17a2ca4717b57a883bcd9cfc0b-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_310fbd17a2ca4717b57a883bcd9cfc0b-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_310fbd17a2ca4717b57a883bcd9cfc0b-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それを、各 page から import して利用できる&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// pages/posts/first-post.js&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../../components/layout"&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FirstPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-6"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-7"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-8"&gt;&lt;/a&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-9"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Head&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-10"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-11"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-12"&gt;&lt;/a&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-13"&gt;&lt;/a&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Back&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/a&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-14"&gt;&lt;/a&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-15"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h2&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-16"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Layout&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-17"&gt;&lt;/a&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5ce63131437a4a6185ff899785989683-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-css"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id15"&gt;Adding CSS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CSS Modules を使うと、 React Component に CSSファイルをインポートできる&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code css"&gt;&lt;a name="rest_code_9e41045caa00472c9c1c531de353bd2c-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;/* components/layout.module.css */&lt;/span&gt;
&lt;a name="rest_code_9e41045caa00472c9c1c531de353bd2c-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_9e41045caa00472c9c1c531de353bd2c-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_9e41045caa00472c9c1c531de353bd2c-4"&gt;&lt;/a&gt;  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_9e41045caa00472c9c1c531de353bd2c-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_9e41045caa00472c9c1c531de353bd2c-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code javascript"&gt;&lt;a name="rest_code_bf02b6e537ae455c9694b120fd996919-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// components/layout.js&lt;/span&gt;
&lt;a name="rest_code_bf02b6e537ae455c9694b120fd996919-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"./layout.module.css"&lt;/span&gt;
&lt;a name="rest_code_bf02b6e537ae455c9694b120fd996919-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_bf02b6e537ae455c9694b120fd996919-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_bf02b6e537ae455c9694b120fd996919-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_bf02b6e537ae455c9694b120fd996919-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CSS Modules のファイル名は &lt;code class="docutils literal"&gt;.module.css&lt;/code&gt; で終わる名前にすること!!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS Modules により、一意の CSSクラス名が自動的に生成されるので、クラス名の衝突を心配する必要がない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;layout_container__2t4v2&lt;/code&gt; こんなクラス名が自動生成される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js の code splittin 機能が CSSモジュールでも機能するので、各ページに読み込まれる CSS量は最小限になる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS Modules は、ビルド時に JavaScriptバンドルから抽出され、
Next.js によって自動的にロードされる &lt;code class="docutils literal"&gt;.css&lt;/code&gt; ファイルを生成する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="global-styles"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id16"&gt;Global Styles&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;すべてのページにスタイルを適用したいときは &lt;code class="docutils literal"&gt;App&lt;/code&gt; Compnent を使う&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;pages&lt;/code&gt; ディレクトリに &lt;code class="docutils literal"&gt;_app.js&lt;/code&gt; を作成し、↓のような感じで書く&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_6dba445272ac40e7914512e1c111baa9-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// pages/_app.js&lt;/span&gt;
&lt;a name="rest_code_6dba445272ac40e7914512e1c111baa9-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6dba445272ac40e7914512e1c111baa9-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_6dba445272ac40e7914512e1c111baa9-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;App&lt;/code&gt; Compnent はすべてのページに共通する top-level Component です&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;この Compnent を使用して、ページ間を移動するときに状態を維持できます&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;_app.js&lt;/code&gt; を追加した際は、 dev server の再起動が必要&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-global-css"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id17"&gt;Adding Global CSS&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Next.js では、 global CSS files を追加できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;global CSS files は、 &lt;code class="docutils literal"&gt;_app.js&lt;/code&gt; からのみ import できる。ほかのところからは import できない (page 上のすべてのエレメントに影響するため) 。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;global CSS files は、配置先と名前はなんでもよい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;styles/global.css&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/* アプリケーション全体に適用する基本スタイルを書く感じ */&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Segoe&lt;/span&gt; &lt;span class="n"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Oxygen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Cantarell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fira&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Droid&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt; &lt;span class="n"&gt;Neue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#0070f3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;pages/_app.tsx&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;"../styles/global.css"&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"next/app"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// すべてのページにスタイルを適用したいときは App Compnent を使う&lt;/span&gt;
&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/first/#id18"&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;To use CSS Modules, import a CSS file named &lt;code class="docutils literal"&gt;*.module.css&lt;/code&gt; from any component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To use global CSS, import a CSS file in &lt;code class="docutils literal"&gt;pages/_app.js&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/first/</guid><pubDate>Sat, 04 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js TypeScript チュートリアル</title><link>https://32imuf.com/javascript/nextjs/tutorial/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/tutorial/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/tutorial/#next-js-note" id="id4"&gt;Next.js の note&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/tutorial/#note" id="id5"&gt;その他 note&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/tutorial/#id2" id="id6"&gt;コマンド書き留め&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/tutorial/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://programmagick.com/sections/nextjs_tutorial/sample"&gt;https://programmagick.com/sections/nextjs_tutorial/sample&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/docs/"&gt;https://nextjs.org/docs/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="next-js-note"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/tutorial/#id4"&gt;Next.js の note&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js 公式のサンプル集: &lt;a class="reference external" href="https://github.com/vercel/next.js/tree/master/examples"&gt;https://github.com/vercel/next.js/tree/master/examples&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;.babelrc&lt;/code&gt; ファイル: ビルド設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Next.jsでは &lt;code class="docutils literal"&gt;.babelrc&lt;/code&gt; を作成・編集してビルド設定を変更できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;next.config.js&lt;/code&gt; ファイル: Next.js 全般の設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript を使うよ、もここに書く&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom App:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/docs/advanced-features/custom-app"&gt;https://nextjs.org/docs/advanced-features/custom-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/docs/basic-features/typescript#custom-app"&gt;https://nextjs.org/docs/basic-features/typescript#custom-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ファイル名と配置先は決まっているもよう =&amp;gt; こう &lt;code class="docutils literal"&gt;./pages/_app.tsx&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js は App コンポーネントを使用してページを初期化する。そいつをオーバーライドしてページの初期化をコントロールできる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;すべてのページで共有するコンポーネント （メニューやツールバーなど） が必要な場合は、App を使う&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom Document: &lt;a class="reference external" href="https://nextjs.org/docs/advanced-features/custom-document"&gt;https://nextjs.org/docs/advanced-features/custom-document&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ファイル名と配置先は決まっているもよう =&amp;gt; こう &lt;code class="docutils literal"&gt;./pages/_document.tsx&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自分のアプリケーションの &lt;code class="docutils literal"&gt;&amp;lt;html&amp;gt;&lt;/code&gt; や &lt;code class="docutils literal"&gt;&amp;lt;body&amp;gt;&lt;/code&gt; タグを拡張するために使う感じ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&amp;lt;Html&amp;gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&amp;lt;Head /&amp;gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&amp;lt;Main /&amp;gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&amp;lt;NextScript /&amp;gt;&lt;/code&gt; は必ず必要のもよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Document はサーバーサイドのみでレンダリングされる。 &lt;code class="docutils literal"&gt;onClick&lt;/code&gt; とかは働かない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;static&lt;/code&gt; ディレクトリ: 配下に画像などの静的ファイルを置くと、
Node.js 経由で静的ファイルを配信できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本番では Node.js (Next.js) をアプリケーション処理に特化させ、
Nginx や各種CDN などに静的ファイル配信を任せる構成が一般的とのこと&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getInitialProps&lt;/code&gt;: &lt;a class="reference external" href="https://nextjs.org/docs/api-reference/data-fetching/getInitialProps"&gt;https://nextjs.org/docs/api-reference/data-fetching/getInitialProps&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サーバーサイドレンダリングを可能にし、初期データ設定できる (SEO に役立つらしい)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非同期でデータを取得し、 Props に初期値を設定できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static メソッドとして任意の Page にくっつけられる非同期関数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引数に &lt;code class="docutils literal"&gt;context&lt;/code&gt; オブジェクトを受け取る (いろいろ properties が入っている)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js 9.3 以降を使っている場合は &lt;code class="docutils literal"&gt;getInitialProps&lt;/code&gt; のかわりに &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; や &lt;code class="docutils literal"&gt;getServerSideProps&lt;/code&gt; がオススメとのこと。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;# TODO: Next.js の Getting Started もやると良さそう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="note"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/tutorial/#id5"&gt;その他 note&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;export&lt;/code&gt; : export するとほかのモジュールから import できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;...initialProps&lt;/span&gt;&lt;/code&gt; : 可変長引数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「antdesign と styled-components は使わないと損なレベルで完成度高い。」との情報を得た。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/tutorial/#id6"&gt;コマンド書き留め&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-1"&gt;&lt;/a&gt;$ mkdir curry
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-2"&gt;&lt;/a&gt;$ npm init -y
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-3"&gt;&lt;/a&gt;$ npm install next react react-dom styled-components
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# TypeScript で Next.js を動作させるため、 Zeit社が提供する公式プラグインをインストールする&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-6"&gt;&lt;/a&gt;$ npm install --save-dev @zeit/next-typescript
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# React等の型定義ファイルをインストールする&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-9"&gt;&lt;/a&gt;$ npm install --save-dev @types/react
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-10"&gt;&lt;/a&gt;$ npm install --save-dev @types/react-dom
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-11"&gt;&lt;/a&gt;$ npm install --save-dev @types/next
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-12"&gt;&lt;/a&gt;$ npm install --save-dev @types/styled-components
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# これもいるっぽい&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-15"&gt;&lt;/a&gt;$ npm install --save-dev typescript @types/node
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ビルド &amp;amp; アプリ起動&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# http://localhost:3000 でアクセスできる&lt;/span&gt;
&lt;a name="rest_code_6d7d6f1294384523b227bfa632b07b91-19"&gt;&lt;/a&gt;$ npm run dev
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/tutorial/</guid><pubDate>Sun, 21 Jun 2020 15:00:00 GMT</pubDate></item><item><title>React: 公式チュートリアルやってみた React のメモ</title><link>https://32imuf.com/javascript/react/tutorial/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#id2" id="id4"&gt;ふむ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/tutorial/#memo" id="id5"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/tutorial/tutorial.html"&gt;https://ja.reactjs.org/tutorial/tutorial.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hello-world.html"&gt;https://ja.reactjs.org/docs/hello-world.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id4"&gt;ふむ&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;インタラクティブな三目並べゲーム (tic-tac-toe) を作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Create React App&lt;/code&gt;: &lt;a class="reference external" href="https://ja.reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;https://ja.reactjs.org/docs/create-a-new-react-app.html#create-react-app&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;フロントエンドのビルドパイプラインを構築する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バックエンドのロジックやデータベース接続は扱わない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部では Babel と webpack を利用している&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コンポーネントは &lt;code class="docutils literal"&gt;props&lt;/code&gt; （“&lt;code class="docutils literal"&gt;properties&lt;/code&gt;” の略）と呼ばれるパラメータを受け取り、&lt;code class="docutils literal"&gt;render&lt;/code&gt; メソッドを通じて、表示するビューの階層構造を返します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;this.state&lt;/code&gt; はそれが定義されているコンポーネント内でプライベートと見なすべきものです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript のクラスでは、サブクラスのコンストラクタを定義する際は常に &lt;code class="docutils literal"&gt;super&lt;/code&gt; を呼ぶ必要があります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;constructor&lt;/code&gt; を持つ React のクラスコンポーネントでは、すべてコンストラクタを &lt;code class="docutils literal"&gt;super(props)&lt;/code&gt; の呼び出しから始めるべきです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;state&lt;/code&gt; を親コンポーネントにリフトアップ (lift up) することは React コンポーネントのリファクタリングでよくあることです&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では、イベントを表す &lt;code class="docutils literal"&gt;props&lt;/code&gt; には &lt;code class="docutils literal"&gt;on[Event]&lt;/code&gt; という名前、イベントを処理するメソッドには &lt;code class="docutils literal"&gt;handle[Event]&lt;/code&gt; という名前を付けるのが慣習となっています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React における関数コンポーネントとは、&lt;code class="docutils literal"&gt;render&lt;/code&gt; メソッドだけを有して自分の &lt;code class="docutils literal"&gt;state&lt;/code&gt; を持たないコンポーネントを、よりシンプルに書くための方法です。React.Component を継承するクラスを定義する代わりに、&lt;code class="docutils literal"&gt;props&lt;/code&gt; を入力として受け取り表示すべき内容を返す関数を定義します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リストには &lt;code class="docutils literal"&gt;key&lt;/code&gt; が必要です&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「実を言うと class コンポーネントはもうあんまり使わないから state も使わないんだよなぁ。関数コンポーネントで書いて、状態はフックで管理するのが今どきのやり方らしい。」という情報を得た&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/tutorial/#id5"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://nodejs.org/en/&lt;/span&gt;
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Node.js のバージョンを確認する&lt;/span&gt;
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-3"&gt;&lt;/a&gt;$ node --version
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Create React App で新しいプロジェクトを作成する&lt;/span&gt;
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# npx: npm 5.2 から利用できるパッケージランナーツール&lt;/span&gt;
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-7"&gt;&lt;/a&gt;$ npx create-react-app tic-tac-toe
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリを起動&lt;/span&gt;
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-10"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; tic-tac-toe
&lt;a name="rest_code_fc284ffa2cb94ab28117d9c33a434a43-11"&gt;&lt;/a&gt;$ npm start
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/tutorial/</guid><pubDate>Sat, 20 Jun 2020 15:00:00 GMT</pubDate></item><item><title>React: [読書メモ] React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発 (その他)</title><link>https://32imuf.com/javascript/react/part2/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#id2" id="id4"&gt;ほむほむ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/part2/#memo" id="id5"&gt;コマンド memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;React、Angular、Vue.js、React Nativeを使って学ぶ はじめてのフロントエンド開発: &lt;a class="reference external" href="https://gihyo.jp/book/2018/978-4-7741-9706-7"&gt;https://gihyo.jp/book/2018/978-4-7741-9706-7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://reactjs.org/"&gt;https://reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/"&gt;https://ja.reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id4"&gt;ほむほむ&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;react-router: Routing 機能を提供するサードパーティパッケージ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;semantic-ui-react: UIツールキット Semantic UI に実装された UI に関する機能を React Component として利用できるようにしたもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;axios: Promise をベースとした HTTP クライアント。サーバーサイドアプリケーションにリクエストを送信する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RESTful API のクライアントとしてよく利用する機能や設定があらかじめ用意されている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;.tsx&lt;/code&gt;: TypeScriptで記述し、かつJSXを利用するもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;.ts&lt;/code&gt;: TypeScriptでJSXを利用しないもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小さい中身も Component だし、まわりの外側も Component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;props として渡せるのは値だけではない。オブジェクトや関数などあらゆるものを受け渡せる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React では、データは親Component から子Component へ流れるというデータフローの原則がある。親子関係にない Component間で情報を直接やりとりすることはできない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;そういうときは、 親Component を経由して props で受け渡す&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;スピナー: &lt;code class="docutils literal"&gt;import {Dimmer, Loader} from &lt;span class="pre"&gt;'semantic-ui-react'&lt;/span&gt;&lt;/code&gt; とか&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component のアンマウントと HTTPリクエストのキャンセル: Axios の場合、 CancelToken のしくみを利用して処理の中断を実現できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/part2/#id5"&gt;コマンド memo&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# プロジェクト作成&lt;/span&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-2"&gt;&lt;/a&gt;$ mkdir react-sample-app
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-3"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; react-sample-app
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-4"&gt;&lt;/a&gt;$ npm init -y
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 依存パッケージのインストール&lt;/span&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-7"&gt;&lt;/a&gt;$ npm i react@ react-dom@
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-8"&gt;&lt;/a&gt;$ npm i react-router@ react-router-dom@
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-9"&gt;&lt;/a&gt;$ npm i semantic-ui-react@
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-10"&gt;&lt;/a&gt;$ npm i axios@
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 依存パッケージのインストール (開発環境用)&lt;/span&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-13"&gt;&lt;/a&gt;$ npm i -D @types/react@ @types/react-dom@
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-14"&gt;&lt;/a&gt;$ npm i -D @types/react-router@ @types/react-router-dom@
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-15"&gt;&lt;/a&gt;$ npm i -D typescript@ ts-loader@
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-16"&gt;&lt;/a&gt;$ npm i -D webpack webpack-cli webpack-dev-server
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# tslint (2019年から非推奨) のインストール&lt;/span&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-19"&gt;&lt;/a&gt;$ npm i -D tslint
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-20"&gt;&lt;/a&gt;$ npm i tslint-config-typings
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# eslint のインストール&lt;/span&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-22"&gt;&lt;/a&gt;$ npm i -D eslint
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-24"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# しばしアプリを実装...&lt;/span&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# アプリケーションの起動&lt;/span&gt;
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-27"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; react-sample-app
&lt;a name="rest_code_4948683170dd406abb58c2983bf0471e-28"&gt;&lt;/a&gt;$ npm run start
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/part2/</guid><pubDate>Mon, 15 Jun 2020 15:00:00 GMT</pubDate></item></channel></rss>