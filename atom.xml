<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて</title><link>https://32imuf.com/</link><description>のてのて</description><atom:link href="https://32imuf.com/atom.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Mon, 20 Sep 2021 14:44:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GitHub Actions で deploy 時に changelog を生成してタグを打ちたい</title><link>https://32imuf.com/github/actions/changelog-tag-deploy/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id1" id="id18"&gt;リファレンス・ガイド&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#github-actions" id="id19"&gt;GitHub Actions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#actions" id="id20"&gt;ワークフロー中で使った Actions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#case1-push-tag" id="id21"&gt;Case1: 直接 push する、 tag は手動トリガー時に入力できる&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id3" id="id22"&gt;条件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#workflow" id="id23"&gt;workflow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#case2-push-tag-protected-branch" id="id24"&gt;Case2: 直接 push する、 tag は手動トリガー時に入力できる (ちょっとだけ protected branch)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id5" id="id25"&gt;条件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id6" id="id26"&gt;workflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id9" id="id27"&gt;ちなみに&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#case3-protected-branch-pr-tag-auto-bump-changelog-tag" id="id28"&gt;Case3: protected branch に PR する、 tag は auto bump (changelog と tag のコミットがずれる)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id10" id="id29"&gt;条件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id13" id="id30"&gt;workflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#note" id="id31"&gt;Note&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#case4-protected-branch-pr-tag-auto-bump-changelog-tag" id="id32"&gt;Case4: protected branch に PR する、 tag は auto bump (changelog と tag のコミットがいっしょ!)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id14" id="id33"&gt;条件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id15" id="id34"&gt;workflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#changelog-next-tag" id="id35"&gt;1. changelog 生成, next tag 払い出し&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#tag-deploy" id="id36"&gt;2. tag 打ちして deploy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id16" id="id37"&gt;その他&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id18"&gt;リファレンス・ガイド&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="github-actions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id19"&gt;GitHub Actions&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/actions/reference/workflow-syntax-for-github-actions"&gt;GitHub Actionsのワークフロー構文&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="actions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id20"&gt;ワークフロー中で使った Actions&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Checkout V2: &lt;a class="reference external" href="https://github.com/actions/checkout"&gt;https://github.com/actions/checkout&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git-auto-commit Action: &lt;a class="reference external" href="https://github.com/stefanzweifel/git-auto-commit-action"&gt;https://github.com/stefanzweifel/git-auto-commit-action&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub Tag Action: &lt;a class="reference external" href="https://github.com/mathieudutour/github-tag-action"&gt;https://github.com/mathieudutour/github-tag-action&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create Pull Request: &lt;a class="reference external" href="https://github.com/peter-evans/create-pull-request"&gt;https://github.com/peter-evans/create-pull-request&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable Pull Request Auto-merge: &lt;a class="reference external" href="https://github.com/peter-evans/enable-pull-request-automerge"&gt;https://github.com/peter-evans/enable-pull-request-automerge&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;approve-pull-request-action: &lt;a class="reference external" href="https://github.com/juliangruber/approve-pull-request-action"&gt;https://github.com/juliangruber/approve-pull-request-action&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case1-push-tag"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id21"&gt;Case1: 直接 push する、 tag は手動トリガー時に入力できる&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id22"&gt;条件&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;private repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog push 対象のブランチに、 Branch protection rules の適用なし&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id23"&gt;workflow&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;ブランチを選択・タグ名を入力して、 &lt;code class="docutils literal"&gt;Run workflow&lt;/code&gt; (手動トリガー)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を生成&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ワークフローをトリガーしたブランチに、 changelog を commit &amp;amp; push&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog の commit に、入力したタグ名でタグ打ち&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;deploy&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/actions/managing-workflow-runs/manually-running-a-workflow"&gt;ワークフローの手動実行&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy (Case1)&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-3"&gt;&lt;/a&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-4"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 手動トリガー&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-6"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-7"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;tag-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-8"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ここで入力したタグ名でタグを打つ&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-9"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Enter&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tag&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(e.g.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;v1.2.3)'&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-10"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-12"&gt;&lt;/a&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-13"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# 必要な環境変数を定義する&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-14"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# ここで定義した env はすべての job から参照できる&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-15"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ap-northeast-1&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-16"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# (以下省略)&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-18"&gt;&lt;/a&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-19"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-20"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-22"&gt;&lt;/a&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-24"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-25"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG and create new tag&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-26"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-27"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-28"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# job の outputs として tag を打った (changelog を commit した) コミットの hash (SHA) を設定&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-29"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;tagged-sha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.push-changelog-tag.outputs.commit_hash }}&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-31"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-32"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-33"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-35"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build services&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-36"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-37"&gt;&lt;/a&gt;          &lt;span class="no"&gt;cp example.env .env&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-38"&gt;&lt;/a&gt;          &lt;span class="no"&gt;docker-compose build --parallel&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-39"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-40"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-41"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-42"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-43"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# root ユーザーで実行する&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-44"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# root で実行しないと、 towncrier が見たい dir の参照権限がなかったりして、fail する&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-45"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose run -u 0 --rm djangoapp towncrier --yes&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-46"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-47"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Stop and remove containers, networks and volumes&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-48"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose down -v&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-49"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always()&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-50"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-51"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Restore git dir owner and group&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-52"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# CHANGELOG は root:root で作成される&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-53"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# そのままだと git-auto-commit-action に失敗することがあるため元に戻す&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-54"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ※これは正しい解決策なのか否かちょっと自信なし&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-55"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo chown -R runner:docker .git/objects/&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-56"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-57"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Commit, push CHANGELOG and create new tag&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-58"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;push-changelog-tag&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-59"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;stefanzweifel/git-auto-commit-action@v4&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-60"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-61"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;commit_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Updated CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-62"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 手動トリガーで受け取ったタグ名でタグを打つ&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-63"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 手動トリガー時に受け取った inputs はこんな風に参照できる&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-64"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;tagging_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.inputs.tag-name }}&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-65"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-66"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-67"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-68"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-69"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# changelog job が正常終了したらこの job を実行する (直列で実行する)&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-70"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# needs を指定しないと並列実行される&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-71"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;needs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-72"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;changelog&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-73"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-74"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-75"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-76"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-77"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-78"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# すべての tag も fetch する&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-79"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# これをつけないと (デフォルトだと) 、ワークフローをトリガーした ref/SHA のコミットひとつだけが fetch される&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-80"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;fetch-depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-81"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# changelog job で tag を打った (changelog を commit した) コミットをチェックアウトする&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-82"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# ※ changelog + tag のコミットを deploy したいため&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-83"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# needs に指定した job の outputs はこんな風に参照できる&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-84"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ needs.changelog.outputs.tagged_hash }}&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-85"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-86"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set tagged sha&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-87"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;set-tag-sha&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-88"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# [確認用] チェックアウトしたブランチの最新の commit を取得&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-89"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-90"&gt;&lt;/a&gt;          &lt;span class="no"&gt;TAGGED_SHA=$(git log -1 --format='%H')&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-91"&gt;&lt;/a&gt;          &lt;span class="no"&gt;echo $TAGGED_SHA&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-92"&gt;&lt;/a&gt;          &lt;span class="no"&gt;echo "::set-output name=tag-sha::$TAGGED_SHA"&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-93"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-94"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-ref&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-95"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.ref }}"&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-96"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-sha&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-97"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーしたときの SHA&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-98"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.sha }}"&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-99"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo changelog-tagged_hash&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-100"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# changelog job で tag を打った SHA&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-101"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# このワークフロー中で commit したので、 github.sha より一つ進んでいる&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-102"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ needs.changelog.outputs.tagged_hash }}"&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-103"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo tag-sha&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-104"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# チェックアウトしたブランチの最新の commit の SHA&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-105"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# == changelog-tagged_hash&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-106"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ steps.set-tag-sha.outputs.tag-sha }}"&lt;/span&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-107"&gt;&lt;/a&gt;
&lt;a name="rest_code_f891ca1163b8490f81c4702d71e4a56a-108"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# あとは deploy する (省略)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case2-push-tag-protected-branch"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id24"&gt;Case2: 直接 push する、 tag は手動トリガー時に入力できる (ちょっとだけ protected branch)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id25"&gt;条件&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;private repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog push 対象のブランチに、 Branch protection rules の適用あり&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Require pull request reviews before merging: OFF&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Require status checks to pass before merging: ON&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include administrators: OFF&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id26"&gt;workflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Case1 と同じ&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_624db9a2f80e497b908c2bb1a1e7e574-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_624db9a2f80e497b908c2bb1a1e7e574-2"&gt;&lt;/a&gt;  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_624db9a2f80e497b908c2bb1a1e7e574-3"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_624db9a2f80e497b908c2bb1a1e7e574-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ここだけ変える&lt;/span&gt;
&lt;a name="rest_code_624db9a2f80e497b908c2bb1a1e7e574-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_624db9a2f80e497b908c2bb1a1e7e574-6"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# 管理者権限を持つユーザーで repo scope の PAT を作成し、&lt;/span&gt;
&lt;a name="rest_code_624db9a2f80e497b908c2bb1a1e7e574-7"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# GitHub Actions の secrets に登録しておく&lt;/span&gt;
&lt;a name="rest_code_624db9a2f80e497b908c2bb1a1e7e574-8"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.REPO_SCOPED_PAT }}&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;個人アクセストークンを使用する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/actions/reference/encrypted-secrets"&gt;暗号化されたシークレット&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id27"&gt;ちなみに&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Branch protection rules のうち、以下のいずれかもしくは両方が &lt;code class="docutils literal"&gt;ON&lt;/code&gt; の場合は NG です。
workflow は fail します (changelog の push に失敗する) 。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Require pull request reviews before merging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自分のローカルから push するときは、これ ON でも Include administrators が OFF なら push できるんだけれども、
なにか、PAT の権限足すといけるのかもしれない (けれどあまり強権限持たせたくない..)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それに、管理者だからって、自分の頭で気をつけるんじゃなくて GitHub に助けて (チェックして) もらいたい...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include administrators&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case3-protected-branch-pr-tag-auto-bump-changelog-tag"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id28"&gt;Case3: protected branch に PR する、 tag は auto bump (changelog と tag のコミットがずれる)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id29"&gt;条件&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;private repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog push 対象のブランチに、 Branch protection rules の適用あり&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Require pull request reviews before merging: ON&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Require status checks to pass before merging: ON (今回の場合は、以下の3つを指定)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ci (自分のところで用意している CI)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;push イベントで起動 (branch は特に絞り込んでいません)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/marketplace/task-list-completed"&gt;task-list-completed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/marketplace/actions/wip"&gt;WIP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include administrators: ON&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;リポジトリ内のプルリクエストの自動マージを許可: ON&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/github/administering-a-repository/configuring-pull-request-merges/managing-auto-merge-for-pull-requests-in-your-repository"&gt;リポジトリ内のプルリクエストの自動マージを管理する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request"&gt;プルリクエストを自動的にマージする&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id30"&gt;workflow&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;ブランチを選択して、 &lt;code class="docutils literal"&gt;Run workflow&lt;/code&gt; (手動トリガー)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;タグ version の bump up は自動でやってくれるので、通常の実行時はタグ名を指定しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デフォルトが &lt;code class="docutils literal"&gt;Patch&lt;/code&gt; になっているので、 &lt;code class="docutils literal"&gt;Minor&lt;/code&gt; or &lt;code class="docutils literal"&gt;Major&lt;/code&gt; の version を bump up したいときは、 &lt;code class="docutils literal"&gt;custom_tag&lt;/code&gt; を指定する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ちょっとまだどんな風に version up していくか見えていないので&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を生成&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ワークフローをトリガーしたコミットにタグ打ち (タグのバージョンは自動 bump up)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;changelog の PR が merge されるのをワークフロー中で待てないので、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;あきらめて「ワークフローをトリガーしたコミット」にタグを打つ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog のコミットは、「タグを打ったコミット」より後の別のコミットになる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を PR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog の PR の自動マージを有効化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を PR を自動 approve&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;deploy&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy (Case3)&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-3"&gt;&lt;/a&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-4"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-6"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;custom_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-7"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'メジャー/マイナーバージョンをインクリメントしたいときのみ指定してください&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(e.g.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1.2.0)'&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-9"&gt;&lt;/a&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-10"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ap-northeast-1&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-11"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# (以下省略)&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-13"&gt;&lt;/a&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-14"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-15"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-17"&gt;&lt;/a&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-19"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-20"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG and create new tag&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-21"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-22"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-23"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# changelog job の outputs として version を bump したタグ名設定&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-24"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;new_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.create-tag.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-26"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-27"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-28"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-30"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build services&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-31"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-32"&gt;&lt;/a&gt;          &lt;span class="no"&gt;cp example.env .env&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-33"&gt;&lt;/a&gt;          &lt;span class="no"&gt;docker-compose build --parallel&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-34"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-35"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-37"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-38"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose run -u 0 --rm djangoapp towncrier --yes&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-39"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-40"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Stop and remove containers, networks and volumes&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-41"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose down -v&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-42"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always()&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-44"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Bump version and push tag&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-45"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# changelog の PR が merge されるのをワークフロー中で待てないので、&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-46"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# あきらめて「ワークフローをトリガーしたコミット」にタグを打つ。&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-47"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# changelog のコミットは、「タグを打ったコミット」より後の別のコミットになる。&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-48"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;create-tag&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-49"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mathieudutour/github-tag-action@v5.6&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-50"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# main 以外のブランチで実行した場合は `v1.2.3-{branch_name}.0` のようなタグがつくため、&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-51"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# main ブランチの bump には影響しない。&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-52"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ※ custom_tag に、 main ブランチのタグと同じ形式のタグ名を指定すると影響する&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-53"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-54"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# secrets.GITHUB_TOKEN は github.token と同義だそうです&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-55"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-56"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 手動トリガー時に custom_tag を受け取った場合は、&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-57"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 受け取ったタグ名でタグを打つ&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-58"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;custom_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.inputs.custom_tag }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-59"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-60"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create Pull Request&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-61"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpr&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-62"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-63"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-64"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;TAG_MAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.create-tag.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-65"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-66"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PR_CHANGELOG_PAT }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-67"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'deploy/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-68"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;commit-message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Updated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CHANGELOG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-69"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CHANGELOG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-70"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# どのコミットにタグを打ったかわからなくならないようにメモ↓&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-71"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Commit&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SHA:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;github.sha&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-72"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-73"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Enable Pull Request Automerge&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-74"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.cpr.outputs.pull-request-operation == 'created'&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-75"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/enable-pull-request-automerge@v1&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-76"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-77"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# repo scope の PAT を作成し、&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-78"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# GitHub Actions の secrets に登録しておく&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-79"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PR_CHANGELOG_PAT }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-80"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;pull-request-number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.cpr.outputs.pull-request-number }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-81"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;merge-method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;squash&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-82"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-83"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Auto approve Pull Request&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-84"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.cpr.outputs.pull-request-operation == 'created'&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-85"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;juliangruber/approve-pull-request-action@v1&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-86"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-87"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-88"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.cpr.outputs.pull-request-number }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-89"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-90"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-91"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-92"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-93"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;needs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-94"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;changelog&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-95"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-96"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-97"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-98"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-99"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-100"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# changelog job で タグを打ったコミットをチェックアウトする&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-101"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# とはいえ、「ワークフローをトリガーしたコミット == タグを打ったコミット」なので、&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-102"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# 正直付けなくて良い&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-103"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;fetch-depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-104"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ needs.changelog.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-105"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-106"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set tagged sha&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-107"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;set-tag-sha&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-108"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# [確認用] チェックアウトしたブランチの最新の commit を取得&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-109"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-110"&gt;&lt;/a&gt;          &lt;span class="no"&gt;TAGGED_SHA=$(git log -1 --format='%H')&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-111"&gt;&lt;/a&gt;          &lt;span class="no"&gt;echo $TAGGED_SHA&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-112"&gt;&lt;/a&gt;          &lt;span class="no"&gt;echo "::set-output name=tag-sha::$TAGGED_SHA"&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-113"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-114"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-ref&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-115"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.ref }}"&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-116"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-sha&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-117"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーしたときの SHA&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-118"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.sha }}"&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-119"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo tag-sha&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-120"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# チェックアウトしたブランチの最新の commit の SHA&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-121"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# == changelog job で tag を打った SHA&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-122"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# == github-sha&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-123"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ steps.set-tag-sha.outputs.tag-sha }}"&lt;/span&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-124"&gt;&lt;/a&gt;
&lt;a name="rest_code_5692ccc23b2647d29c1f20243a1507cb-125"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# あとは deploy する (省略)&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="note"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id31"&gt;Note&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create Pull Request, Enable Pull Request Automerge, Auto approve Pull Request の &lt;code class="docutils literal"&gt;token&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;github-token&lt;/span&gt;&lt;/code&gt; は、
以下のとおり指定しないとうまくいかない (&lt;cite&gt;Can not approve your own pull request&lt;/cite&gt; になっちゃう)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Create Pull Request: &lt;code class="docutils literal"&gt;secrets.PR_CHANGELOG_PAT&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable Pull Request Automerge: &lt;code class="docutils literal"&gt;secrets.PR_CHANGELOG_PAT&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Auto approve Pull Request: &lt;code class="docutils literal"&gt;secrets.GITHUB_TOKEN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;※ &lt;a class="reference external" href="https://github.com/peter-evans/enable-pull-request-automerge#example"&gt;https://github.com/peter-evans/enable-pull-request-automerge#example&lt;/a&gt; に書いてある順番&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例えば、1 は &lt;code class="docutils literal"&gt;secrets.GITHUB_TOKEN&lt;/code&gt; も指定可能ですが、そうすると、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;PR つくるひと -&amp;gt; 2. PR の自動マージ有効化するひと -&amp;gt; 3. PR を approve するひと =&amp;gt; 1 と 3 がいっしょになっちゃう!!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case4-protected-branch-pr-tag-auto-bump-changelog-tag"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id32"&gt;Case4: protected branch に PR する、 tag は auto bump (changelog と tag のコミットがいっしょ!)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id33"&gt;条件&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Case3 と同じ&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id34"&gt;workflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;workflow は二本用意します&lt;/p&gt;
&lt;div class="section" id="changelog-next-tag"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id35"&gt;1. changelog 生成, next tag 払い出し&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;ブランチを選択して、 &lt;code class="docutils literal"&gt;Run workflow&lt;/code&gt; (手動トリガー)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;タグ version の bump up は自動でやってくれるので、通常の実行時はタグ名を指定しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デフォルトが &lt;code class="docutils literal"&gt;Patch&lt;/code&gt; になっているので、 &lt;code class="docutils literal"&gt;Minor&lt;/code&gt; or &lt;code class="docutils literal"&gt;Major&lt;/code&gt; の version を bump up したいときは、 &lt;code class="docutils literal"&gt;custom_tag&lt;/code&gt; を指定する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;デフォルトは変えられます&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を生成&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bump up したタグ名 (&lt;code class="docutils literal"&gt;next tag&lt;/code&gt;) 払い出し&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;タグ打ちはまだしない (&lt;code class="docutils literal"&gt;dry_run: true&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を PR&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;deploy&lt;/code&gt; ラベルをつける&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;body に 3 で払い出した &lt;code class="docutils literal"&gt;next tag&lt;/code&gt; を書いておく&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog の PR の自動マージを有効化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog を PR を自動 approve =&amp;gt; Automerge される&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Branch protection rules が適用されているブランチであれば、&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# main 以外のブランチでも実行できます&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-4"&gt;&lt;/a&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy dev (Case4-1. changelog)&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-6"&gt;&lt;/a&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-7"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-8"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-9"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;custom_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-10"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'メジャー/マイナーバージョンをインクリメントしたいときのみ指定してください&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(e.g.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1.2.0)'&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-12"&gt;&lt;/a&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-13"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-14"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-16"&gt;&lt;/a&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-18"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-19"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-20"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-22"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-23"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-24"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-26"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build services&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-27"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-28"&gt;&lt;/a&gt;          &lt;span class="no"&gt;cp example.env .env&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-29"&gt;&lt;/a&gt;          &lt;span class="no"&gt;docker-compose build --parallel&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-30"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-31"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-33"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update CHANGELOG&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-34"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose run -u 0 --rm djangoapp towncrier --yes&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-36"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Stop and remove containers, networks and volumes&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-37"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose down -v&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-38"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always()&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-39"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-40"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Bump tag version&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-41"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# bump up したタグ名を払い出す&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-42"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# main 以外のブランチで実行した場合は `v1.2.3-{branch_name}.0` のようなタグがつくため、&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-43"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;#  main ブランチの bump には影響しない。&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-44"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;#  ※ custom_tag に、 main ブランチのタグと同じ形式のタグ名を指定すると影響します&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-45"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bump-tag&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-46"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mathieudutour/github-tag-action@v5.6&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-47"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-48"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-49"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;custom_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.inputs.custom_tag }}&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-50"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# タグ打ちはまだしない&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-51"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;dry_run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-52"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-53"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create Pull Request&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-54"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpr&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-55"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-56"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-57"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;TAG_MAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.bump-tag.outputs.new_tag }}&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-58"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-59"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# FIXME: repo scoped の PAT が必要&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-60"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PR_CHANGELOG_PAT }}&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-61"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'deploy/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-62"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;commit-message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Updated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CHANGELOG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-63"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CHANGELOG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.TAG_MAME&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-64"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# `deploy` label を付けておく&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-65"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deploy, automerge&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-66"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# deploy workflow でタグ打ちするので、 next tag を body に書いておく&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-67"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ env.TAG_MAME }}&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-68"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-69"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Enable Pull Request Automerge&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-70"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.cpr.outputs.pull-request-operation == 'created'&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-71"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/enable-pull-request-automerge@v1&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-72"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-73"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PR_CHANGELOG_PAT }}&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-74"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;pull-request-number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.cpr.outputs.pull-request-number }}&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-75"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;merge-method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;squash&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-76"&gt;&lt;/a&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-77"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Auto approve Pull Request&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-78"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.cpr.outputs.pull-request-operation == 'created'&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-79"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;juliangruber/approve-pull-request-action@v1&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-80"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-81"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;a name="rest_code_86ac4ba85b954f1dbdf3e457e93d7e65-82"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.cpr.outputs.pull-request-number }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="tag-deploy"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id36"&gt;2. tag 打ちして deploy&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;PR の close イベントで起動&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以下の条件に合致する場合に deploy job を実行する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ワークフローをトリガーした PR が merge 済み、かつ、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ワークフローをトリガーした PR の labels に &lt;code class="docutils literal"&gt;deploy&lt;/code&gt; が含まれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;changelog のコミットにタグ打ち&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;タグ名には、 PR の body から取得した next tag を使用する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;deploy&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy dev (Case4-2. deploy)&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-3"&gt;&lt;/a&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-4"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;pull_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;closed&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-7"&gt;&lt;/a&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-8"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ap-northeast-1&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-9"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;# (以下省略)&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-11"&gt;&lt;/a&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-12"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-13"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-15"&gt;&lt;/a&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-17"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-18"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Tag and Deploy&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-19"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-20"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# PR が merge 済み、かつ、`deploy` label 付きの場合だけ実行&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-21"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ほかのトピックブランチが merge -&amp;gt; close されたときには、 Skip されるよ&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-22"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.event.pull_request.merged == true &amp;amp;&amp;amp; contains(github.event.pull_request.labels.*.name, 'deploy')&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-24"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-25"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-26"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-27"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーした PR の マージブランチの直近のマージコミット&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-28"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# がチェックアウトされる&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-30"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-ref&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-31"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーした PR のマージブランチ&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-32"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# 例えば、PR のブランチが main から生えていたら、 `main` 、&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-33"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;#  ブランチA から生えていたら `branchA`&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-34"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.ref }}"&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-35"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-sha&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-36"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ワークフローをトリガーした PR の マージブランチの直近のマージコミット&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-37"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# == changelog の commit&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-38"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# (タイミングによっては違っちゃうこともあるかもしれない、頻度は低いが可能性としてはありえそう)&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-39"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.sha }}"&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-40"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Echo github-head-sha&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-41"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# PR のブランチで changelog を commit したときの commit&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-42"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${{ github.event.pull_request.head.sha }}"&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-44"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Push tag&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-45"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-46"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;# ワークフローをトリガーした PR の body から取得した next tag&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-47"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;TAG_MAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.pull_request.body }}&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-48"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;COMMIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.sha }}&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-49"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-50"&gt;&lt;/a&gt;          &lt;span class="no"&gt;git tag $TAG_MAME $COMMIT&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-51"&gt;&lt;/a&gt;          &lt;span class="no"&gt;git push origin $TAG_MAME&lt;/span&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-52"&gt;&lt;/a&gt;
&lt;a name="rest_code_41c6c50029d54833b797bf95f96e9622-53"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# あとは deploy する (省略)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/github/actions/changelog-tag-deploy/#id37"&gt;その他&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GitHub Actions はスケジュール実行もできる。
&lt;code class="docutils literal"&gt;next tag&lt;/code&gt; がデフォルトの挙動通りで良いシーンでは、夜間に定期 deploy などしても。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/ja/actions/reference/events-that-trigger-workflows#scheduled-events"&gt;スケジュールしたイベント&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>github</category><guid>https://32imuf.com/github/actions/changelog-tag-deploy/</guid><pubDate>Sun, 19 Sep 2021 15:00:00 GMT</pubDate></item><item><title>GraphQL メモ</title><link>https://32imuf.com/graphql/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#graphql" id="id4"&gt;GraphQL&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#id1" id="id5"&gt;リファレンス・ガイド&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#id2" id="id6"&gt;概要&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#tools" id="id7"&gt;ライブラリ・tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/graphql/note/#id3" id="id8"&gt;耳より情報&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="graphql"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id4"&gt;GraphQL&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id5"&gt;リファレンス・ガイド&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GraphQL: &lt;a class="reference external" href="https://graphql.org/"&gt;https://graphql.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub の GraphQLガイド: &lt;a class="reference external" href="https://docs.github.com/ja/graphql/guides/introduction-to-graphql"&gt;https://docs.github.com/ja/graphql/guides/introduction-to-graphql&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id6"&gt;概要&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GraphQL だと、自分のほしいデータのみをクライアント側で絞り込んで取得できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;REST API: API のエンドポイントを叩くとデータが取得できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;公開されているAPI だと、自分には不要なデータも大量にとれてきたりする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;エンドポイントはひとつだけ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSON と SQL のあいのこみたいなクエリを書く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type 定義がサーバー側のテーブル定義のような雰囲気&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;画面に合わせて API を何本も書かないとならない、というようなことが解消できそうな印象を受けた&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tools"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id7"&gt;ライブラリ・tools&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.apollographql.com/docs/react/get-started/"&gt;https://www.apollographql.com/docs/react/get-started/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React 向けの GraphQL 呼び出し? ライブラリ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vue には同様に apollo というライブラリがある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/graphql/graphiql"&gt;https://github.com/graphql/graphiql&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;オートコンプリートが効く&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クエリを書くのにDBのテーブル構造を知っている必要があるが、これを使うと IDE でオートコンプリートが効くので、
いちいちテーブル定義書とか ER図とにらめっこしなくて便利&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL Code Generator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;紹介しているブログ: &lt;a class="reference external" href="https://techlife.cookpad.com/entry/2021/03/24/123214"&gt;https://techlife.cookpad.com/entry/2021/03/24/123214&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL クエリを書いて、 Generator を叩くと TypeScript の型定義を自動で生成してくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL は JSON しか返さないので、型がついていない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これを使うと型がついた状態で Response してくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;yaml に hook = true のような設定があって、true にすると、クエリを叩くフックをつけることができて、クエリを叩くコードが自動生成される (べんりそうー: まだ使っていない)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;apollo の Generator もある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React だと、 GraphQL Code Generator のほうが良さそうな雰囲気 (会社の同僚談)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub の Explorer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/en/graphql/overview/explorer"&gt;https://docs.github.com/en/graphql/overview/explorer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL のクエリを書く練習はここでやると良さそう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/graphql/note/#id8"&gt;耳より情報&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.github.com/en/graphql"&gt;https://docs.github.com/en/graphql&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitHub が公開している GraphQL API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;練習用に良さそう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/trending"&gt;https://github.com/trending&lt;/a&gt; (星がたくさんついている repo を探せる) ライクなものを書いてみるとか&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://newrelic.com/jp"&gt;https://newrelic.com/jp&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここも GraphQL API があるもよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;システム・データ監視分析してくれるやつ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>graphql</category><guid>https://32imuf.com/graphql/note/</guid><pubDate>Wed, 15 Sep 2021 15:00:00 GMT</pubDate></item><item><title>Test メモ</title><link>https://32imuf.com/frontend-test/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend-test/note/#id1" id="id3"&gt;テストフレームワーク&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/frontend-test/note/#id2" id="id4"&gt;設定など&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend-test/note/#id3"&gt;テストフレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Jest: &lt;a class="reference external" href="https://jestjs.io/ja/"&gt;https://jestjs.io/ja/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript のテスティングライブラリー&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React Testing Library: &lt;a class="reference external" href="https://testing-library.com/docs/react-testing-library/intro/"&gt;https://testing-library.com/docs/react-testing-library/intro/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React のテスティングライブラリー&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フレームワーク (React) 独自の render などの部分をサポートしてくれるもよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vue にも同様のものがある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/frontend-test/note/#id4"&gt;設定など&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/kk6/d14da41f041296dd55c18fb3da8db788"&gt;jest で TypeScript のテストを書く場合の最低限度の設定など&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;kk6 さんありがとうございます!!!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>frontend-test</category><guid>https://32imuf.com/frontend-test/note/</guid><pubDate>Wed, 15 Sep 2021 15:00:00 GMT</pubDate></item><item><title>OpenAPI Document の自動生成</title><link>https://32imuf.com/django-rest-framework/generating-openapi-document/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;以前案件で Django REST framework のアプリケーションコードから OpenAPI document を自動生成する調査をしたので、自分用にここにもメモ。&lt;/p&gt;
&lt;p&gt;2020年9月時点の情報。&lt;/p&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id1" id="id7"&gt;調査対象とした自動生成ライブラリ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id2" id="id8"&gt;挙動まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id3" id="id9"&gt;生成方法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#api-schemas-drf" id="id10"&gt;API schemas (DRF 標準)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id4" id="id11"&gt;参考にしたページ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#drf-yasg-third-party-package" id="id12"&gt;drf-yasg (Third party package)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id5" id="id13"&gt;参考にしたページ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#openapi-document" id="id14"&gt;OpenAPI document があるとうれしいこと&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id6" id="id15"&gt;OpenAPI document を自動生成できるとうれしいこと&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id7"&gt;調査対象とした自動生成ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下のふたつ。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;API schemas (DRF 標準): &lt;a class="reference external" href="https://www.django-rest-framework.org/coreapi/schemas/"&gt;https://www.django-rest-framework.org/coreapi/schemas/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drf-yasg (Third party package): &lt;a class="reference external" href="https://github.com/axnsan12/drf-yasg"&gt;https://github.com/axnsan12/drf-yasg&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/marcgibbons/django-rest-swagger"&gt;https://github.com/marcgibbons/django-rest-swagger&lt;/a&gt; の後継&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;現在は、 &lt;a class="reference external" href="https://github.com/tfranzel/drf-spectacular"&gt;https://github.com/tfranzel/drf-spectacular&lt;/a&gt; で OpenAPI 3.0 ベースの OpenAPI document が生成できるもよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[理由]&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;DRF の公式リファレンス &lt;a class="reference external" href="https://www.django-rest-framework.org/topics/documenting-your-api/#documenting-your-api"&gt;Documenting your API&lt;/a&gt; でオススメされているのはこの2つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web で検索してみると (現在有効なものだと) このふたつの情報がほとんど&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id8"&gt;挙動まとめ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;自分たちのアプリケーションコードに自動生成用のコードを追加する (※1) ことで生成結果をカスタマイズできる (より事実に近い状態の OpenAPI document を自動生成できる) もようだが、
以下はコード追加せずデフォルト状態で生成した (※2)&lt;/p&gt;
&lt;table class="colwidths-given"&gt;
&lt;colgroup&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 40%"&gt;
&lt;col style="width: 40%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head stub"&gt;&lt;p&gt;項目&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;API schemas (DRF 標準)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;drf-yasg&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;OpenAPI version&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;openapi: 3.0.2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;swagger: 2.0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;output format&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;yaml, json&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;yaml, json&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;UI&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;Swagger UI, ReDoc&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Swagger UI, ReDoc&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;path&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;コード通り生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;urls.py から生成しているもよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;method&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;コード通り生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;urls.py =&amp;gt; viewクラス/関数を見て生成しているもよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;operationId&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;実際のコードと相違がある&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;path + method に応じて機械的につけているもよう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左 (命名法則には違いがある)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;description&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;コード通り生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;viewクラス/view関数のDocString が転記される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;ステータスコード&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;実際のコードと相違がある&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;method に応じて機械的につけているもよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GET: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PUT: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PATCH: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POST: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DELETE: 204&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;実際のコードと相違がある&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;method に応じて機械的につけているもよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GET: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PUT: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PATCH: 200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POST: 201&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DELETE: 204&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;parameters (path)&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;コード通り生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ただし、ID などDRF としては int 型で受け取るものも一律 &lt;code class="docutils literal"&gt;type: string&lt;/code&gt; として出力される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;requestBody&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;一部コード通り?生成される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Generic views を継承している view の場合は serializer_class に指定されたserializer から生成されるもよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;APIView を継承した view は生成されない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;responses&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;同上&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ただし、ClassView の場合は、すべての method に同じ response がついてしまう (例えば実際は何も返さない post にも出力されてしまう)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;同左&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="stub"&gt;&lt;p&gt;tags&lt;/p&gt;&lt;/th&gt;
&lt;td&gt;&lt;p&gt;つかない&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;つく&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;起点 (ROOT_CONF or app/urls) で付き方は変わる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;※1 drf-yasg の場合。(試してないけど) View にデコレータをつけて、シリアライザやレスポンスコードなどを指定するようなイメージ。DRF 標準のほうでもできるのかは未確認。&lt;/p&gt;
&lt;p&gt;※2 drf-yasg のほうがチェックが甘く、多少ヘンテコなコードでも出力してくれた&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id9"&gt;生成方法&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="api-schemas-drf"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id10"&gt;API schemas (DRF 標準)&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;pyyaml, uritemplate を install&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;settings.DEFAULT_SCHEMA_CLASS&lt;/code&gt; が指定されていたら、 default の &lt;code class="docutils literal"&gt;rest_framework.schemas.openapi.AutoSchema&lt;/code&gt; に戻しておく&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以下のコマンドを実行する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_f15746ed00604c548b53e102a1acfa30-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python manage.py generateschema --title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fumi23API"&lt;/span&gt; --description&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[DFR標準] OpenAPI document 自動生成をテスト"&lt;/span&gt; --urlconf&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fumi23.urls'&lt;/span&gt; &amp;gt; openapi-schema.yaml
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;もしくは URLconf に以下を追記して、 runserver =&amp;gt;  &lt;a class="reference external" href="http://localhost:8000/openapi-schema/"&gt;http://localhost:8000/openapi-schema/&lt;/a&gt; にアクセス&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# urls.py (今回は ROOT_CONF に記載)&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.schemas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.renderers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OpenAPIRenderer&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# yaml file download&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'openapi-schema/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fumi23 API"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-11"&gt;&lt;/a&gt;        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[DFR標準] OpenAPI document 自動生成をテスト"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;urlconf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fumi23.urls'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;renderer_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OpenAPIRenderer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;permission_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllowAny&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-17"&gt;&lt;/a&gt;    &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'openapi-schema'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-18"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Swagger UI view&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-19"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# ここ https://www.django-rest-framework.org/topics/documenting-your-api/#a-minimal-example-with-swagger-ui に記載の template も用意する&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'docs/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'swagger-ui.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'schema_url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'openapi-schema'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-23"&gt;&lt;/a&gt;    &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'swagger-ui'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_fb06e0db03e342af87957ad3e968eeb2-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id11"&gt;参考にしたページ&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.django-rest-framework.org/coreapi/schemas/"&gt;https://www.django-rest-framework.org/coreapi/schemas/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.django-rest-framework.org/community/3.10-announcement/"&gt;https://www.django-rest-framework.org/community/3.10-announcement/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://dev.to/errietta/documenting-a-django-api-with-openapi-and-dataclasses-1p6h"&gt;https://dev.to/errietta/documenting-a-django-api-with-openapi-and-dataclasses-1p6h&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="drf-yasg-third-party-package"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id12"&gt;drf-yasg (Third party package)&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;drf-yasg を install&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;settings.INSTALLED_APPS に &lt;code class="docutils literal"&gt;drf_yasg&lt;/code&gt; を追記&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URLconf に以下を追記して runserver =&amp;gt; &lt;a class="reference external" href="http://localhost:8000/swagger/"&gt;http://localhost:8000/swagger/&lt;/a&gt; にアクセス&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;re_path&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;drf_yasg.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;drf_yasg&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;schema_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fumi23 API"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;default_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'v3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[drf-yasg] OpenAPI document 自動生成をテスト"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://localhost:8000'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;urlconf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fumi23.urls'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;permission_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllowAny&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-19"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# yaml or json file download&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;re_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'^swagger(?P&amp;lt;format&amp;gt;\.json|\.yaml)$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;without_ui&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'schema-json'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-21"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# Swagger UI view&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'swagger/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_ui&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'swagger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'schema-swagger-ui'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-23"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# ReDoc view&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-24"&gt;&lt;/a&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'redoc/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_ui&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'redoc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'schema-redoc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_9cac7835989445d5a2467a5f7453897d-25"&gt;&lt;/a&gt;    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id13"&gt;参考にしたページ&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/axnsan12/drf-yasg"&gt;https://github.com/axnsan12/drf-yasg&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://qiita.com/jnuank/items/be163ffb2a0c41a130be"&gt;https://qiita.com/jnuank/items/be163ffb2a0c41a130be&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://qiita.com/T0000N/items/c982fd9586763747fb11"&gt;https://qiita.com/T0000N/items/c982fd9586763747fb11&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="openapi-document"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id14"&gt;OpenAPI document があるとうれしいこと&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;コードを読んだり実際にアプリケーションを動かしてみなくても、API の I/F が一目瞭然&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;運用・保守していく立場からするととても助かる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フロントエンド の TypeScript の型ファイル? を自動生成できるもよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;人間が手でやると、書き間違えたり、誤認・誤解したりする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ちなみに、 Go など型がある言語だとどこも自動生成するものらしい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バックエンドの モックサーバーをたてられるもよう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/zalando/connexion"&gt;https://github.com/zalando/connexion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/encode/apistar"&gt;https://github.com/encode/apistar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同じ起点 (OpenAPI Document) から実装 =&amp;gt; テストしていけば、例えばバックエンドとフロントエンドの担当者が違っても、認識齟齬によるバグと悲しい気持ちを生まない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/django-rest-framework/generating-openapi-document/#id15"&gt;OpenAPI document を自動生成できるとうれしいこと&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;OAS に準拠した書き方を習得するのにちょっとだけ学習コストがかかるのと、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;書くのおっくうになっても、コード書けば勝手に yaml にしてくれたらうれしいかも&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>django-rest-framework</category><guid>https://32imuf.com/django-rest-framework/generating-openapi-document/</guid><pubDate>Fri, 01 Jan 2021 15:00:00 GMT</pubDate></item><item><title>Jenkins のなぞ</title><link>https://32imuf.com/docker/jenkins/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/docker/jenkins/#id1" id="id2"&gt;なぞ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/docker/jenkins/#id2"&gt;なぞ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker (docker-compose) で動かしている Jenkins から Docker (docker-compose) を動かせるのが不思議だったので調べたメモ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jenkins 自体も Docker コンテナ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins の Dockerfile あり (こんな感じ↓)&lt;/p&gt;
&lt;pre class="code docker"&gt;&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; jenkins/jenkins:lts&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-3"&gt;&lt;/a&gt;&lt;span class="c"&gt;# install docker&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; root&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; curl -fL -o docker.tgz &lt;span class="s2"&gt;"https://download.docker.com/linux/static/test/x86_64/docker-19.03.9.tgz"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-6"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar --strip-components&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; -xvzf docker.tgz -C /usr/bin &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-7"&gt;&lt;/a&gt;    # dockerグループの ID は環境によって変わるので調べておく
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-8"&gt;&lt;/a&gt;    # cat /etc/group &lt;span class="p"&gt;|&lt;/span&gt; grep docker
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-9"&gt;&lt;/a&gt;    # docker グループ作成, &lt;span class="nv"&gt;グループID&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;999&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-10"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; groupadd -g &lt;span class="m"&gt;999&lt;/span&gt; docker &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-11"&gt;&lt;/a&gt;    # docker グループに jenkins ユーザーを追加してる
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-12"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; gpasswd -a jenkins docker
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-15"&gt;&lt;/a&gt;    apt install -y python-pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-16"&gt;&lt;/a&gt;    pip install docker-compose
&lt;a name="rest_code_35a25aafabdf4631956d90fda0fbc86f-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; jenkins&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins 立ち上げるための docker-compose.yml もあり (こんな感じ↓)&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'3'&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-3"&gt;&lt;/a&gt;&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-4"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;jenkins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-6"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-7"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-8"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-9"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# コンテナ外にポート開放してる&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-10"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2323:8080&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-11"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;privileged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-12"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-13"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# https://github.com/jenkinsci/docker/blob/master/README.md#configuring-reverse-proxy&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-14"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;JENKINS_OPTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'--prefix=/jenkins'&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-15"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-16"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# volume 使ってる、じゃないと down したら workspace 消えちゃうからね&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-17"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jenkins_home:/var/jenkins_home&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-18"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# ここがみそだ!&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-19"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# ホストの dockerデーモンが使用しているソケット (/var/run/docker.sock) をマウントして&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-20"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;# jenkins からアクセスできるようにしている&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-21"&gt;&lt;/a&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-22"&gt;&lt;/a&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-23"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;jenkins_home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-24"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Compose の外ですでに作成済みの volume なんだぜ&lt;/span&gt;
&lt;a name="rest_code_0d0c701c2ff74dde8ba8edaeb553450f-25"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins 画面の URL はこんな感じ: &lt;a class="reference external" href="http://our.web.application:2323/jenkins"&gt;http://our.web.application:2323/jenkins&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;workspace はこんな感じ: /var/jenkins_home/workspace/our_app&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;これは jenikins コンテナの中だった&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ここにコードがある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins ジョブのビルド開始時に workspace は削除される (そういう設定にしている)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ジョブ自体は、&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GitHub のリポジトリからアプリを clone してきて、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker イメージを build して、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;アプリ起動している (docker-compose up --build している)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番は gunicorn なので&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これだ! &lt;a class="reference external" href="https://www.mmj.ne.jp/mmjblog/docker-on-jenkins/"&gt;https://www.mmj.ne.jp/mmjblog/docker-on-jenkins/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ホストの docker デーモンを共有しているので、 docker (jenkins) から自分達の services が docker-compose up できているわけだ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ありがとうございました&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これもありがとうございます: &lt;a class="reference external" href="https://techblog.recochoku.jp/1544"&gt;https://techblog.recochoku.jp/1544&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/jenkinsci/docker/blob/master/README.md"&gt;https://github.com/jenkinsci/docker/blob/master/README.md&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>docker</category><guid>https://32imuf.com/docker/jenkins/</guid><pubDate>Wed, 23 Sep 2020 15:00:00 GMT</pubDate></item><item><title>React * Next.js * TypeScript で何か作ろう</title><link>https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id1" id="id3"&gt;つくったもの&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id2" id="id4"&gt;アプリの種をつくる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#vercel-deploy" id="id5"&gt;Vercel へ deploy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id3"&gt;つくったもの&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fuminote-tools.vercel.app/"&gt;https://fuminote-tools.vercel.app/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id4"&gt;アプリの種をつくる&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code zsh"&gt;&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 新しいNext.jsアプリを作成&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-2"&gt;&lt;/a&gt;npx create-next-app
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Starts the development server.&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-5"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; path/to/app
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-6"&gt;&lt;/a&gt;npm run dev
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Builds the app for production.&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-9"&gt;&lt;/a&gt;npm run build
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Runs the built app in production mode.&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-12"&gt;&lt;/a&gt;npm start
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# TypeScript の導入&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-15"&gt;&lt;/a&gt;npm install --save-dev typescript @types/react @types/node
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-16"&gt;&lt;/a&gt;touch tsconfig.json
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-17"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# dev サーバーの再起動が必要&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-18"&gt;&lt;/a&gt;npm run dev
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-20"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# React Bootstrap の導入&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-21"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://react-bootstrap.github.io/getting-started/introduction&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-22"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# _app.tsx に `import 'bootstrap/dist/css/bootstrap.min.css';`&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-23"&gt;&lt;/a&gt;npm install react-bootstrap bootstrap
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-25"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# styled components の導入&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-26"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://styled-components.com/&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-27"&gt;&lt;/a&gt;npm install --save styled-components
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-28"&gt;&lt;/a&gt;npm install @types/styled-components
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-30"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# styled components: Babel Plugin&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://styled-components.com/docs/tooling#babel-plugin&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-32"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# .babelrc も書く&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-33"&gt;&lt;/a&gt;npm install --save-dev babel-plugin-styled-components
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-35"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# yarn をインストール (こっから yarn でやってみる)&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# package.json をそのまま使える&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-37"&gt;&lt;/a&gt;sudo npm install -g yarn
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-39"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Material-UI をインストール&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-40"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://material-ui.com/&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-41"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# React Bootstrap よりも使い方がややこしいが、 Component の種類が豊富&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-42"&gt;&lt;/a&gt;yarn add @material-ui/core @material-ui/icons
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-44"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# react-copy-to-clipboard をインストール&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-45"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://www.npmjs.com/package/react-copy-to-clipboard&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-46"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Clip board にコピーしてくれるさん&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-47"&gt;&lt;/a&gt;yarn add react-copy-to-clipboard
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-48"&gt;&lt;/a&gt;yarn add --dev @types/react-copy-to-clipboard
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-49"&gt;&lt;/a&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-50"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Axios をインストール&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-51"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# https://github.com/axios/axios&lt;/span&gt;
&lt;a name="rest_code_bba61e161af84b608ad064b50c5eac58-52"&gt;&lt;/a&gt;yarn add axios
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="vercel-deploy"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/#id5"&gt;Vercel へ deploy&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;&lt;p&gt;Vercel アカウントを作成し、GitHub 連携する (すでに持っている場合はスキップ)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://vercel.com/signup"&gt;https://vercel.com/signup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;やってみればわかる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub に deploy したいアプリの repository を作成して push する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub の自分のアカウントに &lt;a class="reference external" href="https://vercel.com/github"&gt;https://vercel.com/github&lt;/a&gt; (Vercel for GitHub) をインストールする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repository access を設定する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ここ &lt;a class="reference external" href="https://github.com/settings/installations"&gt;https://github.com/settings/installations&lt;/a&gt; でインストール済みの GitHub Apps が見られる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「すべての repositories にアクセスを許可する」 or 「選択した repositories のみにアクセスを許可する」が選べる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel から &lt;code class="docutils literal"&gt;Import Project&lt;/code&gt; (dashboard 画面右上の黒いボタン) する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;「Import Git Repository」を選択 &amp;gt; Continue &amp;gt; import したい Git repository の URL を入力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;手順3 で、 import したい repository にアクセスを許可をしていないと、ここで import したいプロジェクトが「ない」、と言われる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continue する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;勝手に deploy が始まって、終わったら ドメインが 3つ払い出される&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;deploy 時にエラーが発生すると、 production にはデプロイしないでおいてくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/how-to-start-creating-react-app-with-nextjs-typescript/</guid><pubDate>Sat, 22 Aug 2020 15:00:00 GMT</pubDate></item><item><title>React: Hooks</title><link>https://32imuf.com/javascript/react/hook/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id1" id="id12"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id2" id="id13"&gt;ステートフック&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id3" id="id14"&gt;要するにフックとは？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id4" id="id15"&gt;副作用フック&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id5" id="id16"&gt;クリーンアップを必要としない副作用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id6" id="id17"&gt;クリーンアップを有する副作用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id7" id="id18"&gt;副作用のスキップによるパフォーマンス改善&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id8" id="id19"&gt;フックのルール&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id9" id="id20"&gt;ルール&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#eslint" id="id21"&gt;ESLint プラグイン&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id10" id="id22"&gt;独自フックの作成&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/react/hook/#id11" id="id23"&gt;その他のフック&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id12"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-intro.html"&gt;https://ja.reactjs.org/docs/hooks-intro.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-overview.html"&gt;https://ja.reactjs.org/docs/hooks-overview.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-state.html"&gt;https://ja.reactjs.org/docs/hooks-state.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-effect.html"&gt;https://ja.reactjs.org/docs/hooks-effect.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-rules.html"&gt;https://ja.reactjs.org/docs/hooks-rules.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-custom.html"&gt;https://ja.reactjs.org/docs/hooks-custom.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フック API リファレンス: &lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-reference.html"&gt;https://ja.reactjs.org/docs/hooks-reference.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id13"&gt;ステートフック&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Declare a new state variable, which we'll call "count"&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-5"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 現在の state の値と、それを更新するための関数とをペアにして返す&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 引数は state の初期値のみ&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-7"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state はオブジェクトでもそうでなくてもOK&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 引数として渡された state の初期値は最初のレンダー時にのみ使用される&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-9"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-11"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// count が 『state変数』&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-12"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state 変数には好きな名前をつけられる&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-13"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// useState は何を返すのか？ =&amp;gt; 現在の state と、それを更新するための関数とを、ペアにして返す&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-15"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// state が「作成」されるのはコンポーネントの初回レンダー時だけ&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-16"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 通常、関数が終了すると変数は『消えて』しまうけれど、state 変数は React によって保持される&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-18"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 関数内では、`this.state.count` とかせずに、直接 count を使うことができる↓&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-19"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// setCount で、 state を更新↓&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-20"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-21"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-22"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/p&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-23"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-24"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-25"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-26"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-27"&gt;&lt;/a&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8f54400e91c4446bb8888c1ff673bf62-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code javascript"&gt;&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ExampleWithManyStates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Declare multiple state variables!&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// 1つのコンポーネント内で 2 回以上ステートフックを使うことができる&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// React は useState を何度も呼び出す場合は、それらが全てのレンダー間で同じ順番で呼び出されるものと仮定する&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-6"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFruit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'banana'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-7"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Learn Hooks'&lt;/span&gt; &lt;span class="p"&gt;}]);&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_bfdfc12cdd5a4289badc1e1ad258f1e9-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id14"&gt;要するにフックとは？&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;関数コンポーネントに &lt;code class="docutils literal"&gt;state&lt;/code&gt; やライフサイクルといった React の機能を &lt;code class="docutils literal"&gt;接続する (hook into)&lt;/code&gt; ための関数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックは React をクラスなしに使うための機能なので、クラス内では機能しない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React は &lt;code class="docutils literal"&gt;useState&lt;/code&gt; のような幾つかのビルトインのフックを提供する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;異なるコンポーネント間でステートフルな振る舞いを共有するために自分自身のフックを作成することもできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id15"&gt;副作用フック&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;副作用のためのフック&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;副作用 &lt;span class="pre"&gt;(side-effects)&lt;/span&gt;&lt;/code&gt;、あるいは省略して &lt;code class="docutils literal"&gt;作用 (effects)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;外部データの取得や購読 (subscription)、あるいは手動での DOM 更新&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;他のコンポーネントに影響することがあり、またレンダーの最中に実行することができない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React が DOM を更新した後で追加のコードを実行したい場合に使う&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クラスコンポーネントにおける &lt;code class="docutils literal"&gt;componentDidMount&lt;/code&gt;, &lt;code class="docutils literal"&gt;componentDidUpdate&lt;/code&gt; および &lt;code class="docutils literal"&gt;componentWillUnmount&lt;/code&gt; と同様の目的で使うもの&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React コンポーネントにおける副作用は 2 種類ある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クリーンアップコードを必要としない副作用&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必要とする副作用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id16"&gt;クリーンアップを必要としない副作用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ネットワークリクエストの送信、手動での DOM 改変、ログの記録、といったものがクリーンアップを必要としない&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// Similar to componentDidMount and componentDidUpdate:&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-7"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// useEffect フックを使うことで、レンダー後に何かの処理をしないといけない、ということを React に伝えられる&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-8"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-9"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// Update the document title using the browser API&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// React が DOM を更新した後で、HTML ドキュメントのタイトルを設定する&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// DOM の更新後に呼び出される&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 非同期的に行われる (useEffect でスケジュールされた副作用はブラウザによる画面更新をブロックしない)&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 副作用はコンポーネント内で宣言されるので、props や state にアクセスすることが可能&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// デフォルトでは初回のレンダーも含む毎回のレンダー時にこの副作用関数が呼び出される&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-16"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`You clicked &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-17"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-19"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-20"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-21"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/p&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-22"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-23"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-24"&gt;&lt;/a&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-25"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-26"&gt;&lt;/a&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_dcc40c3969254b9494ed9987bfbc1c8c-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;同期的に行う必要がある稀なケース（レイアウトの測定など）のために、&lt;code class="docutils literal"&gt;useEffect&lt;/code&gt; と同一の API を有する &lt;code class="docutils literal"&gt;useLayoutEffect&lt;/code&gt; という別のフックがある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id17"&gt;クリーンアップを有する副作用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;例えば何らかの外部のデータソースへの購読をセットアップしたいことがあります。そのような場合、メモリリークが発生しないようにクリーンアップが必要です！&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOnline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-6"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-7"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-8"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;setIsOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-10"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;ChatAPI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribeToFriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// Specify how to clean up after this effect:&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// すべての副作用は、それをクリーンアップするための関数を返すことができる&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// 関数を返した場合、 React はクリーンアップのタイミングが来たらそれを実行してくれる、しゅごい&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// React はコンポーネントがアンマウントされるときにクリーンアップを実行する&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-16"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// ひとつ前のレンダーによる副作用を、次回の副作用を実行する前にもクリーンアップする&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-18"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;// 名前付き関数でなくともよい、アロー関数でもOK&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-19"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;ChatAPI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribeFromFriendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-21"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-23"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Loading...'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-25"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-26"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'Online'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Offline'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_a46ef7f6808647eca41fcc183d07ff68-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id18"&gt;副作用のスキップによるパフォーマンス改善&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// 再レンダー間で特定の値が変わっていない場合には副作用の適用をスキップするよう、React に伝えることができる&lt;/span&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-3"&gt;&lt;/a&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`You clicked &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Only re-run the effect if count changes&lt;/span&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_6fe3bf454cb54678ad677a4112664d0a-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// useEffect のオプションの第 2 引数として配列を渡す ↑&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id19"&gt;フックのルール&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id20"&gt;ルール&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;フックを呼び出すのはトップレベルのみ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ループや条件分岐、あるいはネストされた関数内で呼び出してはいけません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これを守ることで、コンポーネントがレンダーされる際に毎回同じ順番で呼び出されるということが保証される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックを呼び出すのは React の関数内のみ&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;フックは React の関数コンポーネントの内部のみで呼び出してください。通常の JavaScript 関数内では呼び出さないでください。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="eslint"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id21"&gt;ESLint プラグイン&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;↑のルールを強制できる ESLint のプラグイン&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;linter plugin : &lt;a class="reference external" href="https://www.npmjs.com/package/eslint-plugin-react-hooks"&gt;https://www.npmjs.com/package/eslint-plugin-react-hooks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create React App ではデフォルトで含まれている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React はフックが呼ばれる順番に依存している&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;フックへの呼び出しの順番がレンダー間で変わらない限り、React はそれらのフックにローカル &lt;code class="docutils literal"&gt;state&lt;/code&gt; を割り当てることができる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id22"&gt;独自フックの作成&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;カスタムフックとは、名前が &lt;code class="docutils literal"&gt;use&lt;/code&gt; で始まり、ほかのフックを呼び出せる JavaScript の関数のことです&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;state を用いたロジックをコンポーネント間で再利用できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フックは state を用いたロジックを再利用するものであって、state そのものを再利用するものではない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;カスタムフックを使う場所ごとで、内部の state や副作用は完全に分離している&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カスタムフックは、機能というよりはむしろ慣習のようなもの。関数の名前が &lt;code class="docutils literal"&gt;use&lt;/code&gt; から始まって、その関数が他のフックを呼び出している。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React のコンポーネントと違い、カスタムフックは特定のシグネチャを持つ必要はありません。
何を引数として受け取り、そして（必要なら）何を返すのか、といったことは自分で決めることができる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/react/hook/#id23"&gt;その他のフック&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;useContext&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;useReducer&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フック API リファレンス: &lt;a class="reference external" href="https://ja.reactjs.org/docs/hooks-reference.html"&gt;https://ja.reactjs.org/docs/hooks-reference.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/react/hook/</guid><pubDate>Sat, 01 Aug 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: TypeScript</title><link>https://32imuf.com/javascript/nextjs/learn-course/typescript/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id1" id="id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#typescript" id="id3"&gt;TypeScript&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#how-to-set-up-next-js-with-typescript" id="id4"&gt;How to set up Next.js with TypeScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#next-js-specific-types" id="id5"&gt;Next.js Specific Types&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#static-generation-and-server-side-rendering" id="id6"&gt;Static Generation and Server-side Rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#api-routes" id="id7"&gt;API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#custom-app" id="id8"&gt;Custom App&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id2"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/excel/typescript"&gt;https://nextjs.org/learn/excel/typescript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="typescript"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id3"&gt;TypeScript&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="how-to-set-up-next-js-with-typescript"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id4"&gt;How to set up Next.js with TypeScript&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;プロジェクトルートディレクトリ直下に &lt;code class="docutils literal"&gt;tsconfig.json&lt;/code&gt; を作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript をインストールする&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_446080401b484ba687f188dd81e43449-1"&gt;&lt;/a&gt;$ npm install --save-dev typescript @types/react @types/node
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;開発サーバーを再起動する&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_bf11459cdc214023a549623ed1342508-1"&gt;&lt;/a&gt;$ npm run dev
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サーバー再起動後、 Next.js は次のことをしてくれるでしょう。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;tsconfig.json&lt;/code&gt; ファイルの中身を入れてくれる。このファイルは、自分でカスタマイズしても良し。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;next-env.d.ts&lt;/span&gt;&lt;/code&gt; ファイルを作ってくれる。このファイルは、触ってはいけません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このファイルは、Next.js types が確実に TypeScript compiler にピックアップされるようにします。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで、 Next.js アプリで TypeScript が使えるようになります!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-js-specific-types"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id5"&gt;Next.js Specific Types&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js 固有のタイプが使えるよ。&lt;/p&gt;
&lt;div class="section" id="static-generation-and-server-side-rendering"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id6"&gt;Static Generation and Server-side Rendering&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next'&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-7"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-8"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-11"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;: &lt;span class="kt"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-12"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_e9e8e719daa94e8db2c406b332176675-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-6"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-9"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-10"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_cddd2f79f591419a9e108a019901d8e9-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="api-routes"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id7"&gt;API Routes&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* TypeScript */&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next'&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;: &lt;span class="kt"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;: &lt;span class="kt"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-5"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-8"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* JavaScript */&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-9"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-10"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;a name="rest_code_721ff16bc4c04d829488a37919bc29b5-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="custom-app"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/typescript/#id8"&gt;Custom App&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TypeScript&lt;/p&gt;
&lt;pre class="code typescript"&gt;&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// built-in type&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'next/app'&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-4"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_b6b5fda9e94c40c29f9c39e20245b245-8"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_0f8c30d727e34ac5b051f9b4223fe313-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0f8c30d727e34ac5b051f9b4223fe313-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0f8c30d727e34ac5b051f9b4223fe313-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/typescript/</guid><pubDate>Fri, 24 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Deploying</title><link>https://32imuf.com/javascript/nextjs/learn-course/deploying/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id1" id="id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#deploying-your-next-js-app" id="id4"&gt;Deploying Your Next.js App&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#deploy-to-vercel" id="id5"&gt;Deploy to Vercel&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id2" id="id6"&gt;やりかた&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#next-js-and-vercel" id="id7"&gt;Next.js and Vercel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#preview-deployment-for-every-push" id="id8"&gt;Preview Deployment for Every Push&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#develop-preview-ship" id="id9"&gt;Develop, Preview, Ship&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#other-hosting-options" id="id10"&gt;Other Hosting Options&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id3"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/deploying-nextjs-app"&gt;https://nextjs.org/learn/basics/deploying-nextjs-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-your-next-js-app"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id4"&gt;Deploying Your Next.js App&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="deploy-to-vercel"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id5"&gt;Deploy to Vercel&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js を本番環境にデプロイする一番簡単な方法は、
Next.jsの作成者が開発した Vercel プラットフォームを使用することです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel は all-in-one プラットフォーム&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;with Global CDN supporting static &amp;amp; JAMstack deployment and Serverless Functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;無料で使い始められる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id6"&gt;やりかた&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Vercel アカウントを作る: &lt;a class="reference external" href="https://vercel.com/signup"&gt;https://vercel.com/signup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub と連携する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel for GitHub をインストールする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;デプロイしたい Next.js アプリをインポートする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;しばらく待つと、ビルド &amp;amp; デプロイされて deployment URLs が払い出される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これだけ!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-js-and-vercel"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id7"&gt;Next.js and Vercel&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Vercel に Next.js app をデプロイすると、デフォルトで以下がサポートされる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Generation を使っている page と assets  (JS, CSS, images, fonts, etc) は、
自動的に、めちゃくちゃ速い Vercel Edge Network から serve される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server-Side Rendering と API routes を使っている page は、
自動的に、分離された Serverless Functions になる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel には以下ようなたくさんの特徴がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Custom Domains: Next.js アプリにカスタムドメインを割り当ててくれる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment Variables: 環境変数を設定することもできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatic HTTPS: HTTPS がデフォルトで有効、SSL証明書は自動更新してくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preview-deployment-for-every-push"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id8"&gt;Preview Deployment for Every Push&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;アプリを変更して GitHub で PR すると、 push の度ごとに、
自動的に preview deployment を作成してくれる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitHub の PR に vercel bot が preview URL を表示してくれるので、&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;その URL へアクセスすると、最新の preview deployment を見られる。しゅごい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;master へ merge すると、自動的に production deplyment してくれる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="develop-preview-ship"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id9"&gt;Develop, Preview, Ship&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js アプリを開発するときは &lt;code class="docutils literal"&gt;DPS&lt;/code&gt; workflow を使いましょう&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-hosting-options"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/deploying/#id10"&gt;Other Hosting Options&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js は、 Node.js をサポートするどのホスティングプロバイダーにもデプロイできる。&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;package.json&lt;/code&gt; がこうなっているとするでしょ。&lt;/p&gt;
&lt;pre class="code json"&gt;&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-2"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-3"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-4"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"next start"&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-6"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e7438e4b7a8f48b8808068cd7104d924-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;するとこう。&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 自分のホスティングプロバイダー上で ``build`` スクリプトを1回実行すると、&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ``.next`` フォルダーに本番アプリケーションがビルドされる。&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-3"&gt;&lt;/a&gt;$ npm run build
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# ビルドしたらに ``start`` スクリプトでハイブリッドページをサポートする Node.js server を起動し、&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# 静的生成されたページとサーバーサイドレンダリングされたページの両方を提供する&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# API Routes もまたサポートしているよ&lt;/span&gt;
&lt;a name="rest_code_2715a245ef2b4bfaa7c1ca9a229bbe7a-8"&gt;&lt;/a&gt;$ npm run start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/deploying/</guid><pubDate>Sun, 19 Jul 2020 15:00:00 GMT</pubDate></item><item><title>Next.js: Dynamic Routes, API Routes</title><link>https://32imuf.com/javascript/nextjs/learn-course/third/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;
  &lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id1" id="id5"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-routes" id="id6"&gt;Dynamic Routes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#how-to-statically-generate-pages-with-dynamic-routes" id="id7"&gt;How to Statically Generate Pages with Dynamic Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id2" id="id8"&gt;実行の順番&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id3" id="id9"&gt;他のページからリンクするとき&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#getstaticpaths" id="id10"&gt;getStaticPaths が実行されるタイミング&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#fallback" id="id11"&gt;Fallback&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#catch-all-routes" id="id12"&gt;Catch-all Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#router" id="id13"&gt;Router&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#pages" id="id14"&gt;404 Pages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-routes-details" id="id15"&gt;Dynamic Routes Details&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id4" id="id16"&gt;ライブラリ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#api-routes" id="id17"&gt;API Routes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#creating-api-routes" id="id18"&gt;Creating API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/javascript/nextjs/learn-course/third/#dynamic-api-routes" id="id19"&gt;Dynamic API Routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id5"&gt;リファレンス, 書籍&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/dynamic-routes"&gt;https://nextjs.org/learn/basics/dynamic-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nextjs.org/learn/basics/api-routes"&gt;https://nextjs.org/learn/basics/api-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-routes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id6"&gt;Dynamic Routes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js は、外部データに依存するパスを持つページを静的に生成できる。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;これは、 Next.js において &lt;code class="docutils literal"&gt;dynamic URLs&lt;/code&gt; を可能にする。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="how-to-statically-generate-pages-with-dynamic-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id7"&gt;How to Statically Generate Pages with Dynamic Routes&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;page&lt;/code&gt; ディレクトリ配下に、 &lt;code class="docutils literal"&gt;[&lt;/code&gt; で始まり &lt;code class="docutils literal"&gt;]&lt;/code&gt; で終わるファイルを作る&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ファイル名: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[id].js&lt;/span&gt;&lt;/code&gt;  =&amp;gt; パス: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/posts/{id}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;[&lt;/code&gt; で始まり &lt;code class="docutils literal"&gt;]&lt;/code&gt; で終わるのが動的 page&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[id].js&lt;/span&gt;&lt;/code&gt; の中に、 &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt; という非同期関数を export する。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;pages/posts/[id].tsx&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../../components/layout"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllPostIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../../lib/posts"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"next/head"&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'../../components//date'&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;utilStyles&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'../../styles/utils.module.css'&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;postData&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;date&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;contentHtml&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* page を返す */&lt;/span&gt;
  &lt;span class="c1"&gt;// 受け取った `postData` を使って page を生成&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Head&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;utilStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headingXl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;utilStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;dateString&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;__html&lt;/span&gt;: &lt;span class="kt"&gt;postData.contentHtml&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Layout&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ブログIDの一覧を返す&lt;/span&gt;
&lt;span class="cm"&gt;  *&lt;/span&gt;
&lt;span class="cm"&gt;  * `/posts/{id}.js` というパスで page を返すべき ID の一覧を返すよ。&lt;/span&gt;
&lt;span class="cm"&gt;  * 取得するのは単なる文字列の配列ではなく、オブジェクトの配列である必要がある。&lt;/span&gt;
&lt;span class="cm"&gt;  * 各オブジェクトには `params` キーが必要、かつ、 `id` キーを持つオブジェクトが含まれている必要がある。&lt;/span&gt;
&lt;span class="cm"&gt;  * (`[id]` をファイル名に使用しているため。でないと `getStaticPaths` がこけちゃうよ。)&lt;/span&gt;
&lt;span class="cm"&gt;  */&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAllPostIds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;fallback&lt;/span&gt;: &lt;span class="kt"&gt;false&lt;/span&gt;
    &lt;span class="c1"&gt;// fallback: true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;: &lt;span class="kt"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ブログID に紐づく、ページの生成に必要なデータを返す&lt;/span&gt;
&lt;span class="cm"&gt;  *&lt;/span&gt;
&lt;span class="cm"&gt;  * 引数の `params` の中に `id` が入ってる&lt;/span&gt;
&lt;span class="cm"&gt;  * (この page は `/posts/{id}.js` というパスでアクセスされる)&lt;/span&gt;
&lt;span class="cm"&gt;  */&lt;/span&gt;
  &lt;span class="c1"&gt;// どこぞから id をキーにブログのデータを取得している&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPostData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// The value of the `props` key will be&lt;/span&gt;
  &lt;span class="c1"&gt;//  passed to the `Post` component&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// `props` key の inside で結果を返す&lt;/span&gt;
      &lt;span class="nx"&gt;postData&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id8"&gt;実行の順番&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticPaths()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;getStaticProps()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;Post()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id9"&gt;他のページからリンクするとき&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_2c9ccc526cd84ce685a5206319b88e42-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// href に `[]` を使い、 `as` prop に実際のパス (id) を入れてあげる&lt;/span&gt;
&lt;a name="rest_code_2c9ccc526cd84ce685a5206319b88e42-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/posts/[id]"&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/posts/ssg-ssr"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_2c9ccc526cd84ce685a5206319b88e42-3"&gt;&lt;/a&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/a&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_2c9ccc526cd84ce685a5206319b88e42-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="getstaticpaths"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id10"&gt;getStaticPaths が実行されるタイミング&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;開発時: リクエスト毎&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本番時: ビルド時&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="fallback"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id11"&gt;Fallback&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;fallback: false&lt;/code&gt;: &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt; から返されるどのページにも合致しないパスがリクエストされた場合、404 page を返す&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;fallback: true&lt;/code&gt;: 404 page を返さない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;のはわかったけれどあとは良くわからないので、ここを読んでください: &lt;a class="reference external" href="https://nextjs.org/docs/basic-features/data-fetching#fallback-pageshttps://nextjs.org/docs/basic-features/data"&gt;https://nextjs.org/docs/basic-features/data-fetching#fallback-pageshttps://nextjs.org/docs/basic-features/data&lt;/a&gt;-fetching#fallback-pages&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="catch-all-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id12"&gt;Catch-all Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;[]&lt;/code&gt; の中に &lt;code class="docutils literal"&gt;...&lt;/code&gt; (three dots) を入れるとすべてのパスをキャッチできるようになる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pages/posts/[...id].js&lt;/span&gt;&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal"&gt;/posts/a&lt;/code&gt; も &lt;code class="docutils literal"&gt;/posts/a/b&lt;/code&gt; も &lt;code class="docutils literal"&gt;/posts/a/b/c&lt;/code&gt; もマッチする。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="router"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id13"&gt;Router&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next.js router にアクセスしたい場合は、 &lt;code class="docutils literal"&gt;next/router&lt;/code&gt; から &lt;code class="docutils literal"&gt;useRouter&lt;/code&gt; hook を import する&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pages"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id14"&gt;404 Pages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;カスタム 404 Page を作成できる&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;pages/404.js&lt;/code&gt; というファイルを作れば良い&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ビルド時に静的生成される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/advanced-features/custom-error-page#404-page"&gt;https://nextjs.org/docs/advanced-features/custom-error-page#404-page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-routes-details"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id15"&gt;Dynamic Routes Details&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Data Fetching: &lt;a class="reference external" href="https://nextjs.org/docs/basic-features/data-fetching"&gt;https://nextjs.org/docs/basic-features/data-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamic Routes: &lt;a class="reference external" href="https://nextjs.org/docs/routing/dynamic-routes"&gt;https://nextjs.org/docs/routing/dynamic-routes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id16"&gt;ライブラリ&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;remark&lt;/code&gt;: Markdown コンテンツのレンダリング&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;date-fns&lt;/span&gt;&lt;/code&gt;: 日付フォーマット&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="api-routes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id17"&gt;API Routes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Next.js は API Routes をサポートしている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js 関数として APIエンドポイントを簡単に作成できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="creating-api-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id18"&gt;Creating API Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;pages/api&lt;/code&gt; 配下にこんな関数を作る&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="code-block "&gt;&lt;div class="code-block-label"&gt;pages/api/hello.ts&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// req = request data, res = response data&lt;/span&gt;
&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;: &lt;span class="kt"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;: &lt;span class="kt"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// http://localhost:3000/api/hello でアクセスできる&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Serverless Functions (also known as Lambdas) としてデプロイできる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do Not Fetch an API Route from &lt;code class="docutils literal"&gt;getStaticProps&lt;/code&gt; or &lt;code class="docutils literal"&gt;getStaticPaths&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;良い Use Case は、入力フォームのハンドリングです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;page にフォームを作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; API Route に POSTリクエストする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;=&amp;gt; API Route で直接 DBに保存する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API Route のコードはクライアントバンドルされないので、安全にサーバーサイドコードが記述できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-api-routes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/javascript/nextjs/learn-course/third/#id19"&gt;Dynamic API Routes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;API Routes は、通常の page と同様に動的にできる&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;詳しくは: &lt;a class="reference external" href="https://nextjs.org/docs/api-routes/dynamic-api-routes"&gt;https://nextjs.org/docs/api-routes/dynamic-api-routes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>javascript</category><guid>https://32imuf.com/javascript/nextjs/learn-course/third/</guid><pubDate>Sat, 18 Jul 2020 15:00:00 GMT</pubDate></item></channel></rss>