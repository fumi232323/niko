<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ふみのて (sqlについての文書)</title><link>https://32imuf.com/</link><description></description><atom:link href="https://32imuf.com/tags/sql.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2020 &lt;a href="mailto:fumi232323fumi2016@gmail.com"&gt;fumi23&lt;/a&gt; </copyright><lastBuildDate>Sun, 26 Jan 2020 13:34:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>[読書メモ] SQL アンチパターン: II部 データベース物理設計のアンチパターン</title><link>https://32imuf.com/sql/sql-antipatterns/2-physical-design/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id2" id="id8"&gt;書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id3" id="id9"&gt;1章 インデックスショットガン (闇雲インデックス)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id4" id="id10"&gt;目的:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id5" id="id11"&gt;アンチパターン:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id6" id="id12"&gt;解決策:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id7" id="id13"&gt;まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id8"&gt;書籍&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.oreilly.co.jp/books/9784873115894/"&gt;SQL アンチパターン SQL Antipatterns (2013年, オライリー・ジャパン)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Bill Karwin 著&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和田 卓人, 和田 省二 監訳&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小島 修 訳&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id9"&gt;1章 インデックスショットガン (闇雲インデックス)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id10"&gt;目的:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;パフォーマンスを最適化する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;データベースのパフォーマンスを完全する最善の方法は、 &lt;strong&gt;インデックス&lt;/strong&gt; を効果的に使用すること&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;インデックス:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;データベースが使うデータ構造で、対象とするデータベース列の値が、
データベースに実際に格納されている行の位置に関連付けられている&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;テーブルを最初から最後まで検索する方法に比べ、インデックスを用いることで検索を容易に行えるようになる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id11"&gt;アンチパターン:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;闇雲にインデックスを使用する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;インデックスを全く定義しない or 少ししか定義しない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通常のアプリケーションでは、更新よりも参照のほうが何百倍も多い&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;インデックス維持のためのオーバーヘッドを取り戻せる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;インデックスを定義し過ぎる or 役立たないインデックスを定義してしまう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ほとんどのデータベースは、主キーのインデックスを自動的に作成するので、主キーに明示的にインデックスを定義するのは冗長&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;検索やソートに使わない列につけても役立たない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;冗長だったり使用頻度の極めて低い複合インデックス&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;インデックスを活用しないクエリを実行してしまう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;複合インデックスでは列の順序がとても重要!! 検索条件、結合条件、ソート順において、列を定義した順 (左から右) に使わなければならない。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;WHERE MONTH(date_reported) = 4&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このインデックスの順番は年ごとに1月1日を開始日とした連続した日付に基づいているため、月を基準にした検索には役立たない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;LIKE '%crash%'&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;この LIKE述語は、文字列のどの部分とも一致する可能性があるため、ソートされたインデックスデータ構造は役立たない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id12"&gt;解決策:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MENTOR の原則に基づいて効果的なインデックス管理を行う&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Measure (測定)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL と PostgreSQL は、指定された閾値より実行時間が長くかかったクエリを記録できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL: スロークエリログ。 &lt;code class="docutils literal"&gt;long_query_time&lt;/code&gt; (デフォルト10秒)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PostgreSQL: &lt;code class="docutils literal"&gt;log_min_duration_statement&lt;/code&gt; 。 pgFouine (クエリログ分析支援ツール) もある。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クエリパフォーマンス測定中は、クエリ結果のキャッシュをすべて無効化しましょう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain (解析)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クエリの処理が遅くなっている原因を分析します&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;データベースは、クエリ実行計画 (Query Execution Plan: QEP) と呼ばれるクエリ最適化機能によって、クエリ実行にどのインデックスを使うかを判断している&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各データベース製品における QEP 取得方法&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;IBM DB2&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN&lt;/code&gt;, &lt;code class="docutils literal"&gt;db2expln&lt;/code&gt; コマンドまたは &lt;code class="docutils literal"&gt;Visual Explain&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Microsoft SQL Server&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;SET SHOWPLAN_XML&lt;/code&gt; または &lt;code class="docutils literal"&gt;Display Execution Plan&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;MySQL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Oracle&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN PLAN&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PostgresSQL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;SQLite&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;EXPLAIN&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nominate (指名)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;クエリの QEP を読んで、クエリがインデックスを使わないでテーブルアクセスしている箇所を探しましょう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;カバーリングインデックス (P.139)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test (テスト)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;インデックスの作成後 (インデックス作成でなくても何か策を講じたら) 再びクエリをプロファイリングする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimaize (最適化)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;インデックスはコンパクトで、使用頻度の高いデータ構造のため、キャッシュメモリに格納されやすい&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;メモリ上のインデックスにアクセスすることにより、ディスクI/O を伴う読み込みよりもはるかにパフォーマンスを改善できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;データベースサーバーでは、キャッシュに割り当てるシステムメモリ量を設定できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用頻度の高いインデックスをあらかじめキャッシュにロードしておくことでメリットを得られる場合もあり ( &lt;code class="docutils literal"&gt;LOAD INDEX INTO CACHE&lt;/code&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rebuild (再構築)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;インデックスは、バランスが取れているときに最も効果的&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;長期にわたって行の更新や削除を行っていくと次第に不均衡になっていく&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;できる限りインデックスの効率を高めたいのであれば、定期的にメンテナンスする価値はある&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各データベース製品におけるインデックスのメンテナンスコマンド&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;IBM DB2&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;REBUILD INDEX&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Microsoft SQL Server&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;ALTER INDEX ... REORGANIZE&lt;/code&gt; 、 &lt;code class="docutils literal"&gt;ALTER INDEX ... REBUILD&lt;/code&gt; 、または &lt;code class="docutils literal"&gt;DBCC DBREINDEX&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;MySQL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;ANALYZE TABLE&lt;/code&gt; または &lt;code class="docutils literal"&gt;OPTIMIZE TABLE&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Oracle&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;ALTER INDEX ... REBUILD&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PostgresSQL&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;VACUUM&lt;/code&gt; または &lt;code class="docutils literal"&gt;ANALYZE&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;SQLite&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;VACUUM&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/2-physical-design/#id13"&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;推測のみに基づいて、闇雲にインデックスをつけてはならない&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;データとクエリについての理解を深め、 MENTOR の原則に基づいてインデックスを管理しましょう&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>sql</category><guid>https://32imuf.com/sql/sql-antipatterns/2-physical-design/</guid><pubDate>Sat, 25 Jan 2020 15:00:00 GMT</pubDate></item><item><title>[読書メモ] SQL アンチパターン: I部 データベース論理設計のアンチパターン</title><link>https://32imuf.com/sql/sql-antipatterns/1-logical-design/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;details&gt;&lt;summary&gt;目次&lt;/summary&gt;&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目次&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id2" id="id8"&gt;書籍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id3" id="id9"&gt;1章 ジェイウォーク (信号無視)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id4" id="id10"&gt;2章 ナイーブツリー (素朴な木)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id-id" id="id11"&gt;3章 ID リクワイアド (とりあえずID)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id5" id="id12"&gt;4章 キーレスエントリー (外部キー嫌い)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#eav" id="id13"&gt;5章 EAV (エンティティ・アトリビュート・バリュー)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id6" id="id14"&gt;6章 ポリモーフィック関連&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id7" id="id15"&gt;7章 マルチカラムアトリビュート (複数列属性)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id8"&gt;書籍&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.oreilly.co.jp/books/9784873115894/"&gt;SQL アンチパターン SQL Antipatterns (2013年, オライリー・ジャパン)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Bill Karwin 著&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和田 卓人, 和田 省二 監訳&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小島 修 訳&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id9"&gt;1章 ジェイウォーク (信号無視)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;１つの製品に複数ユーザーを連絡先として登録できるようにしたい&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;複数の値を持つ属性を格納する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;カンマ区切りフォーマットのリストを格納する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;交差テーブルを作成する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ひとつひとつの値は個別の行と列に格納しましょう&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;多対多は交差テーブルだな&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id10"&gt;2章 ナイーブツリー (素朴な木)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スレッド形式のコメント欄&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;階層構造を格納し、クエリを実行する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;常に親のみに依存する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;代替ツリーモデルを使用する (各設計の比較はP.30を見よ)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;経路列挙 (Path Enumeration)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;入れ子集合 (Nested Set)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;閉包テーブル (Closure Table)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再帰クエリ ※&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;階層構造はエントリと関連 (リレーションシップ) から成り立ちます。これを念頭に、行う作業に合わせて最適な設計手法を選択しましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;再帰クエリめちゃくちゃ便利だな&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;pre class="code mysql"&gt;&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;-- ※ 再帰クエリの例&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;RECURSIVE&lt;/span&gt; &lt;span class="nf"&gt;CommentTree&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-3"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bug_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Comments&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;parent_id&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-7"&gt;&lt;/a&gt;  &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CommentTree&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;Comments&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comment_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_07419fca883f45408c517af0b7e11933-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CommentTree&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;bug_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;MySQL 8.0 ~ , PostgreSQL 8.4 ~ ... はサポートしている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id-id"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id11"&gt;3章 ID リクワイアド (とりあえずID)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;「行の重複を避けるにはどうすればよいか」と質問された&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;主キーの規約を確立する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;すべてのテーブルに「id」列を用いる&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;状況に応じて適切に調整する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;わかりやすい列名にしよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;規約に縛られない&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自然キーと複合キーの活用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;規約は、役立つと思える場合のみ従いましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ずっと気になっていたので腹落ち&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id12"&gt;4章 キーレスエントリー (外部キー嫌い)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;研究所の設備がダブルブッキングされた&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;データベースのアーキテクチャを単純化する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;外部キー制約を使用しない&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;外部キー制約を宣言する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;複数テーブルの変更をサポートする (カスケード更新)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オーバーヘッド、……にはなりません&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;データベースでのミスの発生を未然に防ぐために、外部キー制約を用いましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;やっぱりつけたほうが良かったんだな!&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="eav"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id13"&gt;5章 EAV (エンティティ・アトリビュート・バリュー)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Issue と Bug と FeatureRequest (機能要望) のはなし&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;可変属性をサポートする&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;汎用的な属性テーブルを使用する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;サブタイプのモデリングを行う&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;シングルテーブル継承 (Single Table Inheritance)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bug と FeatureRequest を同じテーブル (Issues) に入れる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;issue_type 列を持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bug のみが使う列/FeatureRequest のみが使う列、がある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具象テーブル継承 (Concrete Table Inheritance)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bugs テーブルと FeatureRequests テーブルを作る (サブタイプごとにテーブル作成)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;issue_type 列不要&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サブタイプに存在しない属性列を格納せずにすむ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;クラステーブル継承 (Class Table Inheritance)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サブタイプに共通する属性を含む基底型のテーブル (Issues) を１つ作る&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サブタイプごとに追加のテーブルを作る (Bugs/FeatureRequests)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Issues.id を外部キーに持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;それぞれに固有の属性のみを持つ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;半構造化データ (シリアライズLOB: Serialized LOB)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;issue_type 列を持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サブタイプに固有の属性は LOB列に持つ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;サブタイプの数が多い、頻繁に新しい属性を追加しなければならない、場合など&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;メタデータは、メタデータのために用いましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ありそう。ある。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id14"&gt;6章 ポリモーフィック関連&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ユーザーがバグについてのコメントを書き込める =&amp;gt; Bugs と Comments が １対多&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ユーザーが機能要望についてのコメントを書き込める =&amp;gt; FeatureRequests と Comments が １対多&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バグについてのコメントも、機能要望についてのコメントも、同じ Comments テーブルに格納したい&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;複数の親テーブルを参照する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;二重目的の外部キーを使用する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;関連 (リレーションシップ) を単純化する&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;参照を逆にする&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交差テーブルの作成 (Bugs/FeatureRequests が具象テーブル継承)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;共通の親テーブルの作成 (Bugs/FeatureRequests がクラステーブル継承)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;テーブル間の関連 (リレーションシップ) には、参照元テーブルと参照先テーブルが常にそれぞれ１つしかないことを忘れないようにしましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;5章と関連してる。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://32imuf.com/sql/sql-antipatterns/1-logical-design/#id15"&gt;7章 マルチカラムアトリビュート (複数列属性)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バグデータベースに、バグを分類するための「タグ付機能」を追加したい&lt;/p&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;目的&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;複数の値を持つ属性を格納する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;アンチパターン&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;複数の列を定義する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;解決策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;従属テーブル (Tags テーブル) を作成する&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;まとめ&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;同じ意味を持つ値は、１つの列に格納するようにしましょう。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;わたしの感想&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;すんなり。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>sql</category><guid>https://32imuf.com/sql/sql-antipatterns/1-logical-design/</guid><pubDate>Sat, 05 Oct 2019 15:00:00 GMT</pubDate></item><item><title>SQL のメモ</title><link>https://32imuf.com/sql/note/</link><dc:creator>fumi23</dc:creator><description>&lt;div&gt;&lt;div class="section" id="case-null"&gt;
&lt;h2&gt;検索 CASE 式でしか NULL の判定はできない&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;検索 CASE 式: NULL 判定できる&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-4"&gt;&lt;/a&gt;      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;'husky'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'risa'&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-5"&gt;&lt;/a&gt;      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;'shiba'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'natsu'&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-6"&gt;&lt;/a&gt;      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;'border collie'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'chon'&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-7"&gt;&lt;/a&gt;      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;'labrador retriever'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'robo'&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-8"&gt;&lt;/a&gt;      &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;END&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-10"&gt;&lt;/a&gt;  &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;a name="rest_code_e03c1c8b3873469b99d4670f81614ae6-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;簡易 CASE 式: NULL 判定できない&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-4"&gt;&lt;/a&gt;      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;'husky'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'risa'&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-5"&gt;&lt;/a&gt;      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;'shiba'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'natsu'&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-6"&gt;&lt;/a&gt;      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;'border collie'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'chon'&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-7"&gt;&lt;/a&gt;      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;'labrador retriever'&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'robo'&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-8"&gt;&lt;/a&gt;      &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;END&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-10"&gt;&lt;/a&gt;  &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;a name="rest_code_05475ea74b7942d59adc53a9b32b8e33-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;d.name&lt;/code&gt; が NULL の場合は、 &lt;code class="docutils literal"&gt;FALSE&lt;/code&gt; と評価されてしまう ( &lt;code class="docutils literal"&gt;ELSE&lt;/code&gt; 句に入ってしまう)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使いようによっては、&lt;code class="docutils literal"&gt;FALSE&lt;/code&gt; と評価されてしまうことを逆に利用できるかも....&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="count-distinct-case-when"&gt;
&lt;h2&gt;COUNT(DISTINCT CASE WHEN ...)&lt;/h2&gt;
&lt;p&gt;こういう書き方ができる&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a name="rest_code_1b37afdf4b3a42159c3fa3a88a779a63-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_1b37afdf4b3a42159c3fa3a88a779a63-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt;
&lt;a name="rest_code_1b37afdf4b3a42159c3fa3a88a779a63-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;
&lt;a name="rest_code_1b37afdf4b3a42159c3fa3a88a779a63-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;a name="rest_code_1b37afdf4b3a42159c3fa3a88a779a63-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;END&lt;/span&gt;
&lt;a name="rest_code_1b37afdf4b3a42159c3fa3a88a779a63-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;num_unique_users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="select"&gt;
&lt;h2&gt;SELECT文の評価順序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;これがわかりやすい (いつも見せていただいています、ありがとうございます)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://qiita.com/suzukito/items/edcd00e680186f2930a8"&gt;https://qiita.com/suzukito/items/edcd00e680186f2930a8&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>sql</category><guid>https://32imuf.com/sql/note/</guid><pubDate>Mon, 05 Nov 2018 15:00:00 GMT</pubDate></item></channel></rss>